#!/usr/bin/env node

/**
 * Fix User Balance Display Issue
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { User, EscrowTransaction, P2PTrade } = require('./src/database/models');
const walletService = require('./src/services/walletService');

const TARGET_USER_CHAT_ID = '942851377';

async function diagnoseAndFixUserBalance() {
  try {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ë–ê–õ–ê–ù–°–û–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    console.log('================================================');
    console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${TARGET_USER_CHAT_ID}`);
    console.log('');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ chatId: TARGET_USER_CHAT_ID });
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:`);
    console.log(`   –ò–º—è: ${user.firstName} ${user.lastName}`);
    console.log(`   –ö–æ—à–µ–ª–µ–∫: ${user.walletAddress}`);
    console.log(`   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${user.createdAt?.toLocaleString('ru-RU')}`);

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    console.log(`\nüîó –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–ê:`);
    const realCESBalance = await walletService.getCESBalance(user.walletAddress);
    const realPOLBalance = await walletService.getPOLBalance(user.walletAddress);
    
    console.log(`   –†–µ–∞–ª—å–Ω—ã–π CES –±–∞–ª–∞–Ω—Å: ${realCESBalance.toFixed(4)} CES`);
    console.log(`   –†–µ–∞–ª—å–Ω—ã–π POL –±–∞–ª–∞–Ω—Å: ${realPOLBalance.toFixed(4)} POL`);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    console.log(`\nüíæ –î–ê–ù–ù–´–ï –í –ë–ê–ó–ï:`);
    console.log(`   CES –±–∞–ª–∞–Ω—Å: ${user.cesBalance || 0} CES`);
    console.log(`   CES –≤ —ç—Å–∫—Ä–æ—É: ${user.escrowCESBalance || 0} CES`);
    console.log(`   POL –±–∞–ª–∞–Ω—Å: ${user.polBalance || 0} POL`);
    console.log(`   POL –≤ —ç—Å–∫—Ä–æ—É: ${user.escrowPOLBalance || 0} POL`);

    // –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    console.log(`\nüîÑ –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò:`);
    const activeTrades = await P2PTrade.find({
      $or: [
        { buyerId: user._id },
        { sellerId: user._id }
      ],
      status: { $in: ['escrow_locked', 'payment_pending', 'payment_made'] }
    }).populate('buyerId').populate('sellerId');

    if (activeTrades.length === 0) {
      console.log('   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
    } else {
      activeTrades.forEach((trade, index) => {
        const role = trade.sellerId._id.toString() === user._id.toString() ? '–ü—Ä–æ–¥–∞–≤–µ—Ü' : '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å';
        console.log(`   ${index + 1}. ${role} | ${trade.amount} CES | –°—Ç–∞—Ç—É—Å: ${trade.status}`);
        console.log(`      ID: ${trade._id}`);
        console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${trade.createdAt.toLocaleString('ru-RU')}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç—Å–∫—Ä–æ—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log(`\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –≠–°–ö–†–û–£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:`);
    const recentEscrowTxs = await EscrowTransaction.find({
      userId: user._id,
      tokenType: 'CES'
    }).sort({ createdAt: -1 }).limit(10);

    if (recentEscrowTxs.length === 0) {
      console.log('   –ù–µ—Ç —ç—Å–∫—Ä–æ—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    } else {
      recentEscrowTxs.forEach((tx, index) => {
        const date = tx.createdAt.toLocaleString('ru-RU');
        console.log(`   ${index + 1}. ${date} | ${tx.type.toUpperCase()}: ${tx.amount} CES (${tx.status})`);
        if (tx.smartContractEscrowId) {
          console.log(`      Smart Contract Escrow ID: ${tx.smartContractEscrowId}`);
        }
        if (tx.reason) {
          console.log(`      –ü—Ä–∏—á–∏–Ω–∞: ${tx.reason}`);
        }
      });
    }

    // –†–∞—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
    console.log(`\nüßÆ –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–û–í:`);
    
    // –°—É–º–º–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Å–∫—Ä–æ—É
    let totalActiveEscrow = 0;
    activeTrades.forEach(trade => {
      if (trade.sellerId._id.toString() === user._id.toString()) {
        totalActiveEscrow += trade.amount;
      }
    });

    const expectedAvailableBalance = Math.max(0, realCESBalance - totalActiveEscrow);
    const expectedEscrowBalance = totalActiveEscrow;

    console.log(`   –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: ${realCESBalance.toFixed(4)} CES`);
    console.log(`   –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —ç—Å–∫—Ä–æ—É: ${expectedEscrowBalance.toFixed(4)} CES`);
    console.log(`   –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ: ${expectedAvailableBalance.toFixed(4)} CES`);
    console.log(`   –¢–µ–∫—É—â–∏–π —ç—Å–∫—Ä–æ—É –≤ –ë–î: ${user.escrowCESBalance || 0} CES`);
    console.log(`   –¢–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤ –ë–î: ${user.cesBalance || 0} CES`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    const escrowDifference = Math.abs((user.escrowCESBalance || 0) - expectedEscrowBalance);
    const totalInDb = (user.cesBalance || 0) + (user.escrowCESBalance || 0);
    const totalDifference = Math.abs(totalInDb - realCESBalance);

    console.log(`\n‚öñÔ∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:`);
    console.log(`   –≠—Å–∫—Ä–æ—É: ${escrowDifference.toFixed(4)} CES`);
    console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalDifference.toFixed(4)} CES`);

    if (escrowDifference > 0.0001 || totalDifference > 0.0001) {
      console.log(`\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!`);
      console.log(`\nüìù –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
      console.log(`   1. –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.cesBalance || 0} ‚Üí ${realCESBalance.toFixed(4)} CES`);
      console.log(`   2. –û–±–Ω–æ–≤–∏—Ç—å —ç—Å–∫—Ä–æ—É –±–∞–ª–∞–Ω—Å: ${user.escrowCESBalance || 0} ‚Üí ${expectedEscrowBalance.toFixed(4)} CES`);
      console.log(`   3. –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ –±—É–¥–µ—Ç: ${expectedAvailableBalance.toFixed(4)} CES`);

      console.log(`\n‚ùì –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? (y/N)`);
      
      // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏:
      console.log(`\nüîÑ –í–´–ü–û–õ–ù–Ø–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï...`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
      const oldCESBalance = user.cesBalance || 0;
      const oldEscrowBalance = user.escrowCESBalance || 0;
      
      user.cesBalance = realCESBalance;
      user.escrowCESBalance = expectedEscrowBalance;
      user.lastBalanceUpdate = new Date();
      
      await user.save();
      
      console.log(`\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:`);
      console.log(`   CES –±–∞–ª–∞–Ω—Å: ${oldCESBalance} ‚Üí ${realCESBalance.toFixed(4)}`);
      console.log(`   –≠—Å–∫—Ä–æ—É –±–∞–ª–∞–Ω—Å: ${oldEscrowBalance} ‚Üí ${expectedEscrowBalance.toFixed(4)}`);
      console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${expectedAvailableBalance.toFixed(4)} CES`);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
      if (Math.abs(oldCESBalance - realCESBalance) > 0.0001 || Math.abs(oldEscrowBalance - expectedEscrowBalance) > 0.0001) {
        const correctionTx = new EscrowTransaction({
          userId: user._id,
          tradeId: null,
          type: 'refund',
          tokenType: 'CES',
          amount: Math.abs(oldEscrowBalance - expectedEscrowBalance),
          status: 'completed',
          reason: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ë–î: ${oldCESBalance + oldEscrowBalance} ‚Üí –ë–ª–æ–∫—á–µ–π–Ω: ${realCESBalance}`,
          completedAt: new Date()
        });
        
        await correctionTx.save();
        console.log(`   üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: ${correctionTx._id}`);
      }

    } else {
      console.log(`\n‚úÖ –ë–ê–õ–ê–ù–°–´ –ö–û–†–†–ï–ö–¢–ù–´`);
      console.log(`–ù–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log(`\nüì± –ù–û–í–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –í –õ–ò–ß–ù–û–ú –ö–ê–ë–ò–ù–ï–¢–ï:`);
    const walletInfo = await walletService.getUserWallet(TARGET_USER_CHAT_ID);
    
    if (walletInfo && walletInfo.hasWallet) {
      let cesDisplay = `–ë–∞–ª–∞–Ω—Å CES: ${walletInfo.cesBalance.toFixed(4)}`;
      if (walletInfo.escrowCESBalance > 0) {
        const available = (walletInfo.cesBalance - walletInfo.escrowCESBalance).toFixed(4);
        cesDisplay += ` (–¥–æ—Å—Ç—É–ø–Ω–æ: ${available}, –≤ —ç—Å–∫—Ä–æ—É: ${walletInfo.escrowCESBalance.toFixed(4)})`;
      }
      
      console.log(`   ${cesDisplay}`);
      console.log(`\nüí° –û–ë–™–Ø–°–ù–ï–ù–ò–ï:`);
      console.log(`   - –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES (–≤ –±–ª–æ–∫—á–µ–π–Ω–µ)`);
      console.log(`   - –í —ç—Å–∫—Ä–æ—É: ${walletInfo.escrowCESBalance?.toFixed(4) || 0} CES (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)`);
      console.log(`   - –î–æ—Å—Ç—É–ø–Ω–æ: ${(walletInfo.cesBalance - (walletInfo.escrowCESBalance || 0)).toFixed(4)} CES`);
      console.log(`\n‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤—Å–µ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã!`);
    }

    console.log(`\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    }
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  diagnoseAndFixUserBalance().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { diagnoseAndFixUserBalance };