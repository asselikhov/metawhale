/**
 * Real User Balance Checker
 * Checks balances of real users to identify the scope of the issue
 */

const mongoose = require('mongoose');
const config = require('../src/config/configuration');
const { User } = require('../src/database/models');
const walletService = require('../src/services/walletService');

async function checkRealUserBalances() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í –†–ï–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('=' .repeat(50));
  
  try {
    // Connect to database
    await mongoose.connect(config.database.mongoUri, config.database.options);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // Find all users with wallets (excluding test users)
    const realUsers = await User.find({ 
      walletAddress: { $exists: true, $ne: null },
      chatId: { $not: /^test_/ } // Exclude test users
    }).sort({ lastBalanceUpdate: -1 });
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏: ${realUsers.length}`);
    
    if (realUsers.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏');
      return;
    }
    
    let usersWithBalance = 0;
    let usersWithZeroBalance = 0;
    let totalCESBalance = 0;
    let totalPOLBalance = 0;
    
    console.log('\nüë• –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    console.log('-'.repeat(80));
    
    for (const user of realUsers.slice(0, 20)) { // Check first 20 users
      try {
        const walletInfo = await walletService.getUserWallet(user.chatId);
        
        const hasCES = walletInfo.totalCESBalance > 0;
        const hasPOL = walletInfo.totalPOLBalance > 0;
        
        if (hasCES || hasPOL) {
          usersWithBalance++;
          console.log(`\n‚úÖ ${user.chatId} (${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}):`);
          console.log(`   üí∞ CES: ${walletInfo.totalCESBalance.toFixed(4)}`);
          console.log(`   üíé POL: ${walletInfo.totalPOLBalance.toFixed(4)}`);
          console.log(`   üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${walletInfo.lastUpdate || '–ù–∏–∫–æ–≥–¥–∞'}`);
          
          totalCESBalance += walletInfo.totalCESBalance;
          totalPOLBalance += walletInfo.totalPOLBalance;
        } else {
          usersWithZeroBalance++;
          console.log(`‚ùå ${user.chatId}: –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å`);
        }
        
      } catch (error) {
        console.log(`‚ö†Ô∏è ${user.chatId}: –û—à–∏–±–∫–∞ - ${error.message}`);
      }
    }
    
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º: ${usersWithBalance}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${usersWithZeroBalance}`);
    console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å CES: ${totalCESBalance.toFixed(4)}`);
    console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å POL: ${totalPOLBalance.toFixed(4)}`);
    
    // Check recent balance updates
    console.log('\nüìÖ –ü–û–°–õ–ï–î–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í:');
    const recentUpdates = await User.find({
      lastBalanceUpdate: { $exists: true, $ne: null },
      chatId: { $not: /^test_/ }
    }).sort({ lastBalanceUpdate: -1 }).limit(10);
    
    for (const user of recentUpdates) {
      const timeDiff = new Date() - new Date(user.lastBalanceUpdate);
      const hoursAgo = Math.floor(timeDiff / (1000 * 60 * 60));
      console.log(`   ${user.chatId}: ${hoursAgo} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ (CES: ${user.cesBalance || 0}, POL: ${user.polBalance || 0})`);
    }
    
    // Check for users with escrowed balances
    console.log('\nüîí –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ú–ò –°–†–ï–î–°–¢–í–ê–ú–ò:');
    const usersWithEscrow = await User.find({
      $or: [
        { escrowCESBalance: { $gt: 0 } },
        { escrowPOLBalance: { $gt: 0 } }
      ],
      chatId: { $not: /^test_/ }
    });
    
    if (usersWithEscrow.length > 0) {
      for (const user of usersWithEscrow) {
        console.log(`   ${user.chatId}: CES –≤ —ç—Å–∫—Ä–æ—É: ${user.escrowCESBalance || 0}, POL –≤ —ç—Å–∫—Ä–æ—É: ${user.escrowPOLBalance || 0}`);
      }
    } else {
      console.log('   –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏');
    }
    
    // Recommendations
    console.log('\nüéØ –í–´–í–û–î–´:');
    if (usersWithZeroBalance > usersWithBalance * 2) {
      console.log('‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞');
      console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–æ–≤');
      console.log('   - –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ P2P —Å–¥–µ–ª–∫–∞—Ö');
    } else {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

checkRealUserBalances().catch(console.error);