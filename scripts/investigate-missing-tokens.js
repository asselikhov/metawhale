/**
 * Investigate Missing Tokens Script
 * –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø–∞–≤—à–∏—Ö 1.3 CES —Ç–æ–∫–µ–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { User, P2PTrade, P2POrder, EscrowTransaction, Transaction } = require('../src/database/models');
const walletService = require('../src/services/walletService');

const TARGET_WALLET = '0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d';

async function investigateMissingTokens() {
  try {
    console.log('üïµÔ∏è –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ü–ê–í–®–ò–• –¢–û–ö–ï–ù–û–í');
    console.log('====================================');
    console.log(`üéØ –ö–æ—à–µ–ª–µ–∫: ${TARGET_WALLET}`);
    console.log('üìä –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: 2 CES');
    console.log('üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: 0.7 CES');
    console.log('‚ùå –ü–†–û–ü–ê–õ–û: 1.3 CES');
    console.log('');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ walletAddress: TARGET_WALLET });
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ${user.firstName} (${user.chatId})`);
    
    // 1. –ü–û–õ–ù–ê–Ø –ò–°–¢–û–†–ò–Ø –≠–°–ö–†–û–£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log(`\nüìã –ü–û–õ–ù–ê–Ø –ò–°–¢–û–†–ò–Ø –≠–°–ö–†–û–£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
    const allEscrowTxs = await EscrowTransaction.find({
      userId: user._id,
      tokenType: 'CES'
    }).sort({ createdAt: 1 }); // –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
    
    let runningBalance = 0;
    let totalLocked = 0;
    let totalReleased = 0;
    let totalRefunded = 0;
    
    console.log(`\nüìà –•–†–û–ù–û–õ–û–ì–ò–Ø –≠–°–ö–†–û–£ –û–ü–ï–†–ê–¶–ò–ô:`);
    allEscrowTxs.forEach((tx, index) => {
      const date = tx.createdAt.toLocaleString('ru-RU');
      const amount = tx.amount;
      
      if (tx.type === 'lock' && tx.status === 'completed') {
        runningBalance += amount;
        totalLocked += amount;
        console.log(`${index + 1}. ${date} | –ë–õ–û–ö–ò–†–û–í–ö–ê: +${amount} CES | –ë–∞–ª–∞–Ω—Å —ç—Å–∫—Ä–æ—É: ${runningBalance} CES`);
      } else if (tx.type === 'release' && tx.status === 'completed') {
        runningBalance -= amount;
        totalReleased += amount;
        console.log(`${index + 1}. ${date} | –û–°–í–û–ë–û–ñ–î–ï–ù–ò–ï: -${amount} CES | –ë–∞–ª–∞–Ω—Å —ç—Å–∫—Ä–æ—É: ${runningBalance} CES`);
      } else if (tx.type === 'refund' && tx.status === 'completed') {
        runningBalance -= amount;
        totalRefunded += amount;
        console.log(`${index + 1}. ${date} | –í–û–ó–í–†–ê–¢: -${amount} CES | –ë–∞–ª–∞–Ω—Å —ç—Å–∫—Ä–æ—É: ${runningBalance} CES`);
      } else {
        console.log(`${index + 1}. ${date} | ${tx.type.toUpperCase()}: ${amount} CES (${tx.status}) | –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å`);
      }
      
      console.log(`      –ü—Ä–∏—á–∏–Ω–∞: ${tx.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      if (tx.tradeId) {
        console.log(`      –°–¥–µ–ª–∫–∞: ${tx.tradeId}`);
      }
      console.log('');
    });
    
    console.log(`üìä –ò–¢–û–ì–ò –≠–°–ö–†–û–£ –û–ü–ï–†–ê–¶–ò–ô:`);
    console.log(`   - –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${totalLocked.toFixed(4)} CES`);
    console.log(`   - –í—Å–µ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ${totalReleased.toFixed(4)} CES`);
    console.log(`   - –í—Å–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${totalRefunded.toFixed(4)} CES`);
    console.log(`   - –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å —ç—Å–∫—Ä–æ—É: ${(totalLocked - totalReleased - totalRefunded).toFixed(4)} CES`);
    console.log(`   - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —ç—Å–∫—Ä–æ—É –≤ –ë–î: ${user.escrowCESBalance || 0} CES`);
    
    // 2. –ò–°–¢–û–†–ò–Ø –û–ë–´–ß–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log(`\nüí∏ –ò–°–¢–û–†–ò–Ø –û–ë–´–ß–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
    const userTransactions = await Transaction.find({
      $or: [
        { fromUserId: user._id, tokenType: 'CES' },
        { toUserId: user._id, tokenType: 'CES' }
      ]
    }).sort({ createdAt: 1 });
    
    if (userTransactions.length === 0) {
      console.log('   - –ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π CES');
    } else {
      userTransactions.forEach((tx, index) => {
        const date = tx.createdAt.toLocaleString('ru-RU');
        const isIncoming = tx.toUserId && tx.toUserId.toString() === user._id.toString();
        const direction = isIncoming ? '–ü–û–õ–£–ß–ï–ù–û' : '–û–¢–ü–†–ê–í–õ–ï–ù–û';
        const sign = isIncoming ? '+' : '-';
        
        console.log(`   ${index + 1}. ${date} | ${direction}: ${sign}${tx.amount} CES | –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      –û—Ç: ${tx.fromAddress}`);
        console.log(`      –ö: ${tx.toAddress}`);
        if (tx.txHash) {
          console.log(`      –•–µ—à: ${tx.txHash}`);
        }
        console.log('');
      });
    }
    
    // 3. –ò–°–¢–û–†–ò–Ø P2P –û–†–î–ï–†–û–í
    console.log(`\nüìã –ò–°–¢–û–†–ò–Ø P2P –û–†–î–ï–†–û–í:`);
    const allOrders = await P2POrder.find({
      userId: user._id,
      type: 'sell'
    }).sort({ createdAt: 1 });
    
    if (allOrders.length === 0) {
      console.log('   - –ù–µ—Ç P2P –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É');
    } else {
      console.log(`\nüìà –•–†–û–ù–û–õ–û–ì–ò–Ø P2P –û–†–î–ï–†–û–í:`);
      allOrders.forEach((order, index) => {
        const date = order.createdAt.toLocaleString('ru-RU');
        const escrowInfo = order.escrowLocked ? `(${order.escrowAmount || 0} CES –≤ —ç—Å–∫—Ä–æ—É)` : '(–±–µ–∑ —ç—Å–∫—Ä–æ—É)';
        
        console.log(`   ${index + 1}. ${date} | –û—Ä–¥–µ—Ä ${order._id}`);
        console.log(`      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount} CES`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${order.status} ${escrowInfo}`);
        console.log(`      –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: ${order.filledAmount || 0} CES`);
        console.log(`      –û—Å—Ç–∞–µ—Ç—Å—è: ${order.remainingAmount || 0} CES`);
        console.log('');
      });
    }
    
    // 4. –ò–°–¢–û–†–ò–Ø P2P –°–î–ï–õ–û–ö
    console.log(`\nü§ù –ò–°–¢–û–†–ò–Ø P2P –°–î–ï–õ–û–ö (–≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–¥–∞–≤–µ—Ü):`);
    const allTrades = await P2PTrade.find({
      sellerId: user._id
    }).sort({ 'timeTracking.createdAt': 1 });
    
    if (allTrades.length === 0) {
      console.log('   - –ù–µ—Ç P2P —Å–¥–µ–ª–æ–∫ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤–µ—Ü');
    } else {
      console.log(`\nüìà –•–†–û–ù–û–õ–û–ì–ò–Ø P2P –°–î–ï–õ–û–ö:`);
      allTrades.forEach((trade, index) => {
        const date = trade.timeTracking?.createdAt?.toLocaleString('ru-RU') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        console.log(`   ${index + 1}. ${date} | –°–¥–µ–ª–∫–∞ ${trade._id}`);
        console.log(`      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${trade.amount} CES`);
        console.log(`      –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: ${trade.status}`);
        console.log(`      –°—Ç–∞—Ç—É—Å —ç—Å–∫—Ä–æ—É: ${trade.escrowStatus}`);
        console.log(`      –°—É–º–º–∞: ${trade.totalValue} ‚ÇΩ`);
        if (trade.disputeReason) {
          console.log(`      –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: ${trade.disputeReason}`);
        }
        console.log('');
      });
    }
    
    // 5. –ê–ù–ê–õ–ò–ó –ë–õ–û–ö–ß–ï–ô–ù –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log(`\nüîó –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ß–ï–ô–ù –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
    let realBalance = 0;
    try {
      realBalance = await walletService.getCESBalance(user.walletAddress);
      console.log(`   - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: ${realBalance.toFixed(4)} CES`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤ –∫ Polygon scan
      console.log(`   - –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫—á–µ–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è Polygon scan API`);
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞: ${error.message}`);
      realBalance = 0.7; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    }
    
    // 6. –ü–û–ò–°–ö –í–û–ó–ú–û–ñ–ù–´–• –ü–†–û–ë–õ–ï–ú
    console.log(`\nüîç –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–´–• –ü–†–û–ë–õ–ï–ú:`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–≤–æ–π–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
    const duplicateRefunds = allEscrowTxs.filter(tx => 
      tx.type === 'refund' && 
      tx.reason && 
      tx.reason.includes('Automatic balance correction')
    );
    
    if (duplicateRefunds.length > 0) {
      console.log(`   ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò –ë–ê–õ–ê–ù–°–ê: ${duplicateRefunds.length}`);
      duplicateRefunds.forEach((tx, index) => {
        const date = tx.createdAt.toLocaleString('ru-RU');
        console.log(`      ${index + 1}. ${date}: ${tx.amount} CES - ${tx.reason}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç—ã
    const unexpectedRefunds = allEscrowTxs.filter(tx => 
      tx.type === 'refund' && 
      tx.amount > 2 // –í–æ–∑–≤—Ä–∞—Ç—ã –±–æ–ª—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    );
    
    if (unexpectedRefunds.length > 0) {
      console.log(`   ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ö–†–£–ü–ù–´–ï –í–û–ó–í–†–ê–¢–´:`);
      unexpectedRefunds.forEach((tx, index) => {
        const date = tx.createdAt.toLocaleString('ru-RU');
        console.log(`      ${index + 1}. ${date}: ${tx.amount} CES - ${tx.reason}`);
      });
    }
    
    // 7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Æ
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Æ:`);
    
    const currentDbBalance = (user.cesBalance || 0) + (user.escrowCESBalance || 0);
    const expectedBalance = 2.0; // –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å
    const missingAmount = expectedBalance - realBalance;
    
    console.log(`   üìä –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞:`);
    console.log(`      - –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedBalance} CES`);
    console.log(`      - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: ${realBalance.toFixed(4)} CES`);
    console.log(`      - –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${currentDbBalance.toFixed(4)} CES`);
    console.log(`      - –ü–†–û–ü–ê–õ–û: ${missingAmount.toFixed(4)} CES`);
    
    if (missingAmount > 0.001) {
      console.log(`\n   üîß –¢–†–ï–ë–£–ï–¢–°–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï ${missingAmount.toFixed(4)} CES`);
      console.log(`   –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:`);
      console.log(`   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫—á–µ–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Polygon scan`);
      console.log(`   2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ`);
      console.log(`   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É –Ω–∞ –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ —Ç–æ–∫–µ–Ω—ã`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  investigateMissingTokens().catch(console.error);
}

module.exports = { investigateMissingTokens };