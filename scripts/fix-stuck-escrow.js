/**
 * Fix Stuck Escrow - Repair Database Balances
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å —ç—Å–∫—Ä–æ—É –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ —Å –∑–∞—Å—Ç—Ä—è–≤—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { User, P2PTrade, EscrowTransaction } = require('../src/database/models');
const walletService = require('../src/services/walletService');

const WALLET_ADDRESS = '0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d';

async function fixStuckEscrow() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–°–¢–†–Ø–í–®–ò–• –¢–û–ö–ï–ù–û–í –í –≠–°–ö–†–û–£');
    console.log('=========================================');
    
    // Connect to database
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // Find user by wallet address
    const user = await User.findOne({ walletAddress: WALLET_ADDRESS });
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞:', WALLET_ADDRESS);
      return;
    }
    
    console.log(`\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ${user.firstName} (${user.chatId})`);
    
    // Get current real balance from blockchain
    const realCESBalance = await walletService.getCESBalance(user.walletAddress);
    console.log(`üí∞ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å CES: ${realCESBalance.toFixed(4)} CES`);
    
    // Check active trades that should have escrow
    const activeTrades = await P2PTrade.find({
      sellerId: user._id, // User is seller, so their CES should be in escrow
      status: { $in: ['escrow_locked', 'payment_pending', 'payment_made', 'payment_confirmed'] }
    });
    
    let totalActiveEscrow = 0;
    console.log(`\nü§ù –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò (–≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–¥–∞–≤–µ—Ü):`);
    if (activeTrades.length === 0) {
      console.log('   - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
    } else {
      activeTrades.forEach((trade, index) => {
        console.log(`   ${index + 1}. –°–¥–µ–ª–∫–∞ ${trade._id}:`);
        console.log(`      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${trade.amount} CES`);
        console.log(`      - –°—Ç–∞—Ç—É—Å: ${trade.status}`);
        console.log(`      - –°–æ–∑–¥–∞–Ω–∞: ${trade.timeTracking?.createdAt?.toLocaleString('ru-RU') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        totalActiveEscrow += trade.amount;
      });
    }
    
    console.log(`\nüìä –†–ê–°–ß–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–´–• –ë–ê–õ–ê–ù–°–û–í:`);
    console.log(`   - –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: ${realCESBalance.toFixed(4)} CES`);
    console.log(`   - –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —ç—Å–∫—Ä–æ—É: ${totalActiveEscrow.toFixed(4)} CES`);
    console.log(`   - –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ: ${(realCESBalance - totalActiveEscrow).toFixed(4)} CES`);
    
    const correctAvailableBalance = realCESBalance - totalActiveEscrow;
    const correctEscrowBalance = totalActiveEscrow;
    
    console.log(`\nüîç –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–î:`);
    console.log(`   - –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.cesBalance || 0} CES`);
    console.log(`   - –≠—Å–∫—Ä–æ—É –±–∞–ª–∞–Ω—Å: ${user.escrowCESBalance || 0} CES`);
    console.log(`   - –û–±—â–∏–π –≤ –ë–î: ${(user.cesBalance || 0) + (user.escrowCESBalance || 0)} CES`);
    
    console.log(`\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:`);
    console.log(`   - –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${correctAvailableBalance.toFixed(4)} CES`);
    console.log(`   - –≠—Å–∫—Ä–æ—É –±–∞–ª–∞–Ω—Å: ${correctEscrowBalance.toFixed(4)} CES`);
    console.log(`   - –û–±—â–∏–π: ${realCESBalance.toFixed(4)} CES`);
    
    // Check if correction is needed
    const availableDiff = Math.abs((user.cesBalance || 0) - correctAvailableBalance);
    const escrowDiff = Math.abs((user.escrowCESBalance || 0) - correctEscrowBalance);
    
    if (availableDiff > 0.0001 || escrowDiff > 0.0001) {
      console.log(`\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:`);
      console.log(`   - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: ${((user.cesBalance || 0) - correctAvailableBalance).toFixed(4)} CES`);
      console.log(`   - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Å–∫—Ä–æ—É –±–∞–ª–∞–Ω—Å–∞: ${((user.escrowCESBalance || 0) - correctEscrowBalance).toFixed(4)} CES`);
      
      // Ask for confirmation (in real script, you'd want manual confirmation)
      console.log(`\nüîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô...`);
      
      // Store original values
      const originalCESBalance = user.cesBalance || 0;
      const originalEscrowBalance = user.escrowCESBalance || 0;
      
      // Update user balances
      user.cesBalance = correctAvailableBalance;
      user.escrowCESBalance = correctEscrowBalance;
      user.lastBalanceUpdate = new Date();
      
      await user.save();
      
      // Create corrective escrow transaction record
      const correctionTx = new EscrowTransaction({
        userId: user._id,
        tradeId: null,
        type: 'refund', // Mark as refund since we're reducing escrow
        tokenType: 'CES',
        amount: originalEscrowBalance - correctEscrowBalance,
        status: 'completed',
        reason: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Å—Ç—Ä—è–≤—à–µ–≥–æ —ç—Å–∫—Ä–æ—É. –ë—ã–ª–æ: ${originalEscrowBalance} CES, —Å—Ç–∞–ª–æ: ${correctEscrowBalance} CES`,
        completedAt: new Date()
      });
      
      if (correctionTx.amount !== 0) {
        await correctionTx.save();
        console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${correctionTx._id}`);
      }
      
      console.log(`\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:`);
      console.log(`   - –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${originalCESBalance} ‚Üí ${correctAvailableBalance.toFixed(4)} CES`);
      console.log(`   - –≠—Å–∫—Ä–æ—É –±–∞–ª–∞–Ω—Å: ${originalEscrowBalance} ‚Üí ${correctEscrowBalance.toFixed(4)} CES`);
      console.log(`   - –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${(originalCESBalance + originalEscrowBalance).toFixed(4)} ‚Üí ${realCESBalance.toFixed(4)} CES`);
      
      // Verify the fix
      const updatedUser = await User.findById(user._id);
      const newTotal = (updatedUser.cesBalance || 0) + (updatedUser.escrowCESBalance || 0);
      
      if (Math.abs(newTotal - realCESBalance) < 0.0001) {
        console.log(`\nüéâ –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê: –ë–∞–ª–∞–Ω—Å –ë–î —Ç–µ–ø–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–ª–æ–∫—á–µ–π–Ω—É!`);
      } else {
        console.log(`\n‚ùå –û–®–ò–ë–ö–ê: –ë–∞–ª–∞–Ω—Å –ë–î (${newTotal.toFixed(4)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–ª–æ–∫—á–µ–π–Ω—É (${realCESBalance.toFixed(4)})`);
      }
      
    } else {
      console.log(`\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø: –ë–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüíæ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// Run fix
if (require.main === module) {
  fixStuckEscrow();
}

module.exports = { fixStuckEscrow };