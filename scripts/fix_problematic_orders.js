/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –û–†–î–ï–†–û–í
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ enum
 */

require('dotenv').config();

const { connectDatabase, disconnectDatabase, P2POrder } = require('../src/database/models');

async function fixProblematicOrders() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö P2P –æ—Ä–¥–µ—Ä–æ–≤...');
    
    await connectDatabase();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ù–∞–π—Ç–∏ –≤—Å–µ –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    const allOrders = await P2POrder.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allOrders.length} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    let fixedCount = 0;
    
    for (const order of allOrders) {
      try {
        // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä - –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å enum, —ç—Ç–æ –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É
        await order.validate();
      } catch (validationError) {
        if (validationError.message.includes('is not a valid enum value')) {
          console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ${order._id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${order.status}"`);
          
          // –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          if (order.status === 'expired' || order.status === 'timeout') {
            order.status = 'cancelled';
            order.cancelReason = order.cancelReason || '–ò—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ä–¥–µ—Ä–∞';
            order.canceledAt = order.canceledAt || new Date();
          } else if (!['active', 'partial', 'completed', 'cancelled', 'locked'].includes(order.status)) {
            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cancelled
            order.status = 'cancelled';
            order.cancelReason = `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å "${order.status}"`;
            order.canceledAt = new Date();
          }
          
          await order.save();
          fixedCount++;
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä ${order._id}: —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ "${order.status}"`);
        }
      }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: ${fixedCount}`);
    console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤: ${allOrders.length}`);
    
    if (fixedCount === 0) {
      console.log('üéâ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.');
    } else {
      console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤:', error);
  } finally {
    await disconnectDatabase();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  fixProblematicOrders()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { fixProblematicOrders };