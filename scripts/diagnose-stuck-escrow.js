/**
 * Diagnose Stuck Escrow - CES Tokens Investigation
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å —ç—Å–∫—Ä–æ—É –∏ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ —Å –ø—Ä–æ–ø–∞–≤—à–∏–º–∏ 2 CES
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { User, P2POrder, P2PTrade, EscrowTransaction } = require('../src/database/models');
const walletService = require('../src/services/walletService');

const WALLET_ADDRESS = '0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d';

async function diagnoseStuckEscrow() {
  try {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–°–¢–†–Ø–í–®–ò–• –¢–û–ö–ï–ù–û–í –í –≠–°–ö–†–û–£');
    console.log('======================================');
    
    // Connect to database
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // Find user by wallet address
    const user = await User.findOne({ walletAddress: WALLET_ADDRESS });
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞:', WALLET_ADDRESS);
      return;
    }
    
    console.log(`\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:`);
    console.log(`   - Chat ID: ${user.chatId}`);
    console.log(`   - –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   - Username: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   - –ö–æ—à–µ–ª–µ–∫: ${user.walletAddress}`);
    
    // Check real blockchain balance
    console.log(`\nüí∞ –ë–ê–õ–ê–ù–°–´:`);
    const realCESBalance = await walletService.getCESBalance(user.walletAddress);
    console.log(`   - –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å CES (–±–ª–æ–∫—á–µ–π–Ω): ${realCESBalance.toFixed(4)} CES`);
    console.log(`   - –ë–∞–ª–∞–Ω—Å CES –≤ –ë–î: ${user.cesBalance || 0} CES`);
    console.log(`   - –≠—Å–∫—Ä–æ—É CES –≤ –ë–î: ${user.escrowCESBalance || 0} CES`);
    console.log(`   - –û–±—â–∏–π –≤ –ë–î: ${(user.cesBalance || 0) + (user.escrowCESBalance || 0)} CES`);
    
    const difference = realCESBalance - ((user.cesBalance || 0) + (user.escrowCESBalance || 0));
    console.log(`   - –†–∞–∑–Ω–∏—Ü–∞ (–±–ª–æ–∫—á–µ–π–Ω - –ë–î): ${difference.toFixed(4)} CES`);
    
    if (Math.abs(difference) > 0.0001) {
      console.log(`   ‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–û –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: ${difference.toFixed(4)} CES`);
    }
    
    // Check active orders
    console.log(`\nüìã –ê–ö–¢–ò–í–ù–´–ï –û–†–î–ï–†–ê:`);
    const activeOrders = await P2POrder.find({
      userId: user._id,
      status: { $in: ['active', 'partial'] }
    });
    
    if (activeOrders.length === 0) {
      console.log('   - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤');
    } else {
      activeOrders.forEach((order, index) => {
        console.log(`   ${index + 1}. ${order.type.toUpperCase()} –æ—Ä–¥–µ—Ä:`);
        console.log(`      - ID: ${order._id}`);
        console.log(`      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount} CES`);
        console.log(`      - –°—Ç–∞—Ç—É—Å: ${order.status}`);
        console.log(`      - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ —ç—Å–∫—Ä–æ—É: ${order.escrowLocked ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —ç—Å–∫—Ä–æ—É: ${order.escrowAmount || 0} CES`);
        console.log(`      - –°–æ–∑–¥–∞–Ω: ${order.createdAt.toLocaleString('ru-RU')}`);
      });
    }
    
    // Check cancelled orders with potential stuck escrow
    console.log(`\n‚ùå –û–¢–ú–ï–ù–ï–ù–ù–´–ï –û–†–î–ï–†–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):`);
    const cancelledOrders = await P2POrder.find({
      userId: user._id,
      status: 'cancelled'
    }).sort({ createdAt: -1 }).limit(10);
    
    if (cancelledOrders.length === 0) {
      console.log('   - –ù–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤');
    } else {
      for (const order of cancelledOrders) {
        console.log(`   ‚Ä¢ ${order.type.toUpperCase()} –æ—Ä–¥–µ—Ä:`);
        console.log(`     - ID: ${order._id}`);
        console.log(`     - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount} CES`);
        console.log(`     - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ —ç—Å–∫—Ä–æ—É: ${order.escrowLocked ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`     - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —ç—Å–∫—Ä–æ—É: ${order.escrowAmount || 0} CES`);
        console.log(`     - –û—Ç–º–µ–Ω–µ–Ω: ${order.updatedAt.toLocaleString('ru-RU')}`);
        
        // Check if escrow was properly released for this order
        if (order.escrowLocked && order.escrowAmount > 0) {
          const escrowRefund = await EscrowTransaction.findOne({
            userId: user._id,
            type: 'refund',
            amount: order.escrowAmount,
            createdAt: { $gte: order.updatedAt }
          });
          
          if (!escrowRefund) {
            console.log(`     ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –≠—Å–∫—Ä–æ—É –Ω–µ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞!`);
            console.log(`     üí∞ –ó–∞—Å—Ç—Ä—è–ª–æ: ${order.escrowAmount} CES`);
          } else {
            console.log(`     ‚úÖ –≠—Å–∫—Ä–æ—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω: ${escrowRefund.createdAt.toLocaleString('ru-RU')}`);
          }
        }
      }
    }
    
    // Check active trades
    console.log(`\nü§ù –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò:`);
    const activeTrades = await P2PTrade.find({
      $or: [
        { buyerId: user._id },
        { sellerId: user._id }
      ],
      status: { $in: ['escrow_locked', 'payment_pending', 'payment_made', 'payment_confirmed'] }
    }).populate('buyerId sellerId');
    
    if (activeTrades.length === 0) {
      console.log('   - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
    } else {
      activeTrades.forEach((trade, index) => {
        const userRole = trade.buyerId._id.toString() === user._id.toString() ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü';
        console.log(`   ${index + 1}. –°–¥–µ–ª–∫–∞ (${userRole}):`);
        console.log(`      - ID: ${trade._id}`);
        console.log(`      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${trade.amount} CES`);
        console.log(`      - –°—Ç–∞—Ç—É—Å: ${trade.status}`);
        console.log(`      - –≠—Å–∫—Ä–æ—É: ${trade.escrowStatus}`);
        console.log(`      - –°–æ–∑–¥–∞–Ω–∞: ${trade.timeTracking?.createdAt?.toLocaleString('ru-RU') || trade.createdAt.toLocaleString('ru-RU')}`);
      });
    }
    
    // Check escrow transaction history
    console.log(`\nüìä –ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –≠–°–ö–†–û–£ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):`);
    const escrowTransactions = await EscrowTransaction.find({
      userId: user._id
    }).sort({ createdAt: -1 }).limit(20);
    
    if (escrowTransactions.length === 0) {
      console.log('   - –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —ç—Å–∫—Ä–æ—É');
    } else {
      let totalLocked = 0;
      let totalReleased = 0;
      let totalRefunded = 0;
      
      escrowTransactions.forEach((tx, index) => {
        console.log(`   ${index + 1}. ${tx.type.toUpperCase()}:`);
        console.log(`      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${tx.amount} ${tx.tokenType}`);
        console.log(`      - –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      - –°–¥–µ–ª–∫–∞: ${tx.tradeId || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`      - –ü—Ä–∏—á–∏–Ω–∞: ${tx.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`      - –î–∞—Ç–∞: ${tx.createdAt.toLocaleString('ru-RU')}`);
        
        if (tx.tokenType === 'CES' && tx.status === 'completed') {
          switch (tx.type) {
            case 'lock':
              totalLocked += tx.amount;
              break;
            case 'release':
              totalReleased += tx.amount;
              break;
            case 'refund':
              totalRefunded += tx.amount;
              break;
          }
        }
      });
      
      console.log(`\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–°–ö–†–û–£ CES:`);
      console.log(`   - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${totalLocked.toFixed(4)} CES`);
      console.log(`   - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ${totalReleased.toFixed(4)} CES`);
      console.log(`   - –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${totalRefunded.toFixed(4)} CES`);
      const netLocked = totalLocked - totalReleased - totalRefunded;
      console.log(`   - –ß–∏—Å—Ç—ã–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${netLocked.toFixed(4)} CES`);
      
      if (Math.abs(netLocked - (user.escrowCESBalance || 0)) > 0.0001) {
        console.log(`   ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: –ë–î –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${user.escrowCESBalance || 0} CES, —Ä–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${netLocked.toFixed(4)} CES`);
      }
    }
    
    // Summary and recommendations
    console.log(`\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:`);
    if (Math.abs(difference) > 0.0001) {
      console.log(`‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: ${Math.abs(difference).toFixed(4)} CES –∑–∞—Å—Ç—Ä—è–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ`);
      
      if (difference > 0) {
        console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ ${difference.toFixed(4)} CES`);
        console.log(`   - –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —ç—Å–∫—Ä–æ—É`);
      } else {
        console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ ${Math.abs(difference).toFixed(4)} CES`);
        console.log(`   - –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –¥–≤–æ–π–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ë–î`);
      }
    } else {
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüíæ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// Run diagnostics
if (require.main === module) {
  diagnoseStuckEscrow();
}

module.exports = { diagnoseStuckEscrow };