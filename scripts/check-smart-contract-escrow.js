/**
 * Check Smart Contract Escrow Script
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —ç—Å–∫—Ä–æ—É –Ω–∞ –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { User, EscrowTransaction } = require('../src/database/models');
const { ethers } = require('ethers');

const TARGET_WALLET = '0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d';

async function checkSmartContractEscrow() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–ú–ê–†–¢-–ö–û–ù–¢–†–ê–ö–¢–ê –≠–°–ö–†–û–£');
    console.log('==================================');
    console.log(`üéØ –ö–æ—à–µ–ª–µ–∫: ${TARGET_WALLET}`);
    console.log('');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ walletAddress: TARGET_WALLET });
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞');
      return;
    }
    
    console.log(`\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ${user.firstName} (${user.chatId})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const escrowContractAddress = process.env.ESCROW_CONTRACT_ADDRESS;
    const cesTokenAddress = process.env.CES_TOKEN_ADDRESS;
    const useSmartContract = process.env.USE_SMART_CONTRACT_ESCROW === 'true';
    
    console.log(`\nüîß –ù–ê–°–¢–†–û–ô–ö–ò –°–ú–ê–†–¢-–ö–û–ù–¢–†–ê–ö–¢–ê:`);
    console.log(`   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${useSmartContract ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   - –ê–¥—Ä–µ—Å —ç—Å–∫—Ä–æ—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${escrowContractAddress || '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
    console.log(`   - –ê–¥—Ä–µ—Å CES —Ç–æ–∫–µ–Ω–∞: ${cesTokenAddress || '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
    
    if (!useSmartContract || !escrowContractAddress || !cesTokenAddress) {
      console.log(`\n‚ö†Ô∏è –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω`);
      console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∞—Ö –≤ –ë–î
      console.log(`\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–õ–ê–ù–°–ê–•:`);
      console.log(`   - cesBalance: ${user.cesBalance || 0}`);
      console.log(`   - escrowCESBalance: ${user.escrowCESBalance || 0}`);
      console.log(`   - –¢–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ escrowCESBalance: ${user.escrowCESBalance}`);
      
      return;
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É
    const config = require('../src/config/configuration');
    const provider = new ethers.providers.JsonRpcProvider(config.wallet.polygonRpcUrl);
    
    console.log(`\nüîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–õ–û–ö–ß–ï–ô–ù–£:`);
    console.log(`   - RPC URL: ${config.wallet.polygonRpcUrl}`);
    
    // ABI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Å–∫—Ä–æ—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const escrowAbi = [
      "function getEscrowDetails(uint256 escrowId) external view returns (address seller, address buyer, uint256 amount, uint256 timelock, uint8 status)",
      "function nextEscrowId() external view returns (uint256)"
    ];
    
    // ABI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CES —Ç–æ–∫–µ–Ω–∞
    const erc20Abi = [
      "function balanceOf(address owner) view returns (uint256)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function decimals() view returns (uint8)"
    ];
    
    try {
      const escrowContract = new ethers.Contract(escrowContractAddress, escrowAbi, provider);
      const cesContract = new ethers.Contract(cesTokenAddress, erc20Abi, provider);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å CES —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —ç—Å–∫—Ä–æ—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
      console.log(`\nüí∞ –ë–ê–õ–ê–ù–°–´ –°–ú–ê–†–¢-–ö–û–ù–¢–†–ê–ö–¢–ê:`);
      
      const escrowContractBalance = await cesContract.balanceOf(escrowContractAddress);
      const decimals = await cesContract.decimals();
      const formattedBalance = ethers.utils.formatUnits(escrowContractBalance, decimals);
      
      console.log(`   - CES –±–∞–ª–∞–Ω—Å —ç—Å–∫—Ä–æ—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${formattedBalance} CES`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Å–∫—Ä–æ—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const userAllowance = await cesContract.allowance(user.walletAddress, escrowContractAddress);
      const formattedAllowance = ethers.utils.formatUnits(userAllowance, decimals);
      
      console.log(`   - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Å–∫—Ä–æ—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${formattedAllowance} CES`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userBalance = await cesContract.balanceOf(user.walletAddress);
      const formattedUserBalance = ethers.utils.formatUnits(userBalance, decimals);
      
      console.log(`   - CES –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${formattedUserBalance} CES`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç—Å–∫—Ä–æ—É
      try {
        const nextEscrowId = await escrowContract.nextEscrowId();
        console.log(`\nüî¢ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –≠–°–ö–†–û–£:`);
        console.log(`   - –°–ª–µ–¥—É—é—â–∏–π ID —ç—Å–∫—Ä–æ—É: ${nextEscrowId.toString()}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Å–∫—Ä–æ—É
        const lastEscrowsToCheck = Math.min(10, parseInt(nextEscrowId.toString()));
        console.log(`   - –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${lastEscrowsToCheck} —ç—Å–∫—Ä–æ—É...`);
        
        for (let i = Math.max(1, nextEscrowId - lastEscrowsToCheck); i < nextEscrowId; i++) {
          try {
            const escrowDetails = await escrowContract.getEscrowDetails(i);
            const [seller, buyer, amount, timelock, status] = escrowDetails;
            
            if (seller.toLowerCase() === user.walletAddress.toLowerCase() || 
                buyer.toLowerCase() === user.walletAddress.toLowerCase()) {
              
              const formattedAmount = ethers.utils.formatUnits(amount, decimals);
              const statusNames = ['Active', 'Released', 'Refunded', 'Disputed'];
              const statusName = statusNames[status] || 'Unknown';
              const role = seller.toLowerCase() === user.walletAddress.toLowerCase() ? '–ü—Ä–æ–¥–∞–≤–µ—Ü' : '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å';
              
              console.log(`\n   üìã –ù–ê–ô–î–ï–ù–û –≠–°–ö–†–û–£ #${i}:`);
              console.log(`      - –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${role}`);
              console.log(`      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${formattedAmount} CES`);
              console.log(`      - –°—Ç–∞—Ç—É—Å: ${statusName} (${status})`);
              console.log(`      - –ü—Ä–æ–¥–∞–≤–µ—Ü: ${seller}`);
              console.log(`      - –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyer}`);
              console.log(`      - Timelock: ${new Date(timelock * 1000).toLocaleString('ru-RU')}`);
              
              if (status === 0 && parseFloat(formattedAmount) > 0) { // Active status
                console.log(`      ‚ö†Ô∏è –ê–ö–¢–ò–í–ù–û–ï –≠–°–ö–†–û–£ –° –¢–û–ö–ï–ù–ê–ú–ò!`);
              }
            }
          } catch (escrowError) {
            // –≠—Å–∫—Ä–æ—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          }
        }
        
      } catch (escrowInfoError) {
        console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Å–∫—Ä–æ—É: ${escrowInfoError.message}`);
      }
      
    } catch (contractError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º: ${contractError.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É
    console.log(`\nüìã –ó–ê–ü–ò–°–ò –û –°–ú–ê–†–¢-–ö–û–ù–¢–†–ê–ö–¢ –≠–°–ö–†–û–£ –í –ë–î:`);
    const smartContractEscrowTxs = await EscrowTransaction.find({
      userId: user._id,
      tokenType: 'CES',
      smartContractEscrowId: { $exists: true, $ne: null }
    }).sort({ createdAt: -1 });
    
    if (smartContractEscrowTxs.length === 0) {
      console.log(`   - –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É`);
    } else {
      smartContractEscrowTxs.forEach((tx, index) => {
        const date = tx.createdAt.toLocaleString('ru-RU');
        console.log(`   ${index + 1}. ${date} | ${tx.type.toUpperCase()}: ${tx.amount} CES`);
        console.log(`      –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É ID: ${tx.smartContractEscrowId}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      –ü—Ä–∏—á–∏–Ω–∞: ${tx.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log('');
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  checkSmartContractEscrow().catch(console.error);
}

module.exports = { checkSmartContractEscrow };