/**
 * Force Balance Update Script
 * Updates all user balances from blockchain and fixes DB synchronization issues
 */

const mongoose = require('mongoose');
const config = require('../src/config/configuration');
const { User } = require('../src/database/models');
const walletService = require('../src/services/walletService');

async function forceUpdateAllBalances() {
  console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í');
  console.log('=' .repeat(50));
  
  try {
    await mongoose.connect(config.database.mongoUri, config.database.options);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // Get all users with wallets
    const usersWithWallets = await User.find({ 
      walletAddress: { $exists: true, $ne: null }
    });
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏: ${usersWithWallets.length}`);
    
    if (usersWithWallets.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    let successCount = 0;
    let errorCount = 0;
    let updatedBalances = [];
    
    console.log('\nüîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í:');
    console.log('-'.repeat(80));
    
    for (const user of usersWithWallets) {
      try {
        console.log(`\nüë§ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.chatId} (${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'})...`);
        
        // Store old balances for comparison
        const oldCESBalance = user.cesBalance || 0;
        const oldPOLBalance = user.polBalance || 0;
        
        // Get real balances from blockchain
        console.log(`   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã...`);
        const [realCESBalance, realPOLBalance] = await Promise.all([
          walletService.getCESBalance(user.walletAddress),
          walletService.getPOLBalance(user.walletAddress)
        ]);
        
        console.log(`   üìä –†–µ–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã: CES: ${realCESBalance}, POL: ${realPOLBalance}`);
        console.log(`   üìä –°—Ç–∞—Ä—ã–µ –±–∞–ª–∞–Ω—Å—ã –≤ –ë–î: CES: ${oldCESBalance}, POL: ${oldPOLBalance}`);
        
        // Calculate changes
        const cesChange = realCESBalance - oldCESBalance;
        const polChange = realPOLBalance - oldPOLBalance;
        
        // Update user in database
        user.cesBalance = realCESBalance;
        user.polBalance = realPOLBalance;
        user.lastBalanceUpdate = new Date();
        await user.save();
        
        console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î:`);
        console.log(`      CES: ${oldCESBalance} ‚Üí ${realCESBalance} (${cesChange >= 0 ? '+' : ''}${cesChange.toFixed(4)})`);
        console.log(`      POL: ${oldPOLBalance} ‚Üí ${realPOLBalance} (${polChange >= 0 ? '+' : ''}${polChange.toFixed(4)})`);
        
        updatedBalances.push({
          chatId: user.chatId,
          name: user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏',
          cesOld: oldCESBalance,
          cesNew: realCESBalance,
          cesChange: cesChange,
          polOld: oldPOLBalance,
          polNew: realPOLBalance,
          polChange: polChange
        });
        
        successCount++;
        
        // Small delay to avoid overwhelming the RPC
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ${user.chatId}: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    if (updatedBalances.length > 0) {
      console.log('\nüí∞ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í:');
      console.log('-'.repeat(80));
      
      let totalCESChange = 0;
      let totalPOLChange = 0;
      
      for (const update of updatedBalances) {
        const hasChanges = Math.abs(update.cesChange) > 0.0001 || Math.abs(update.polChange) > 0.0001;
        
        if (hasChanges) {
          console.log(`\nüîÑ ${update.chatId} (${update.name}):`);
          if (Math.abs(update.cesChange) > 0.0001) {
            console.log(`   CES: ${update.cesOld.toFixed(4)} ‚Üí ${update.cesNew.toFixed(4)} (${update.cesChange >= 0 ? '+' : ''}${update.cesChange.toFixed(4)})`);
          }
          if (Math.abs(update.polChange) > 0.0001) {
            console.log(`   POL: ${update.polOld.toFixed(4)} ‚Üí ${update.polNew.toFixed(4)} (${update.polChange >= 0 ? '+' : ''}${update.polChange.toFixed(4)})`);
          }
          
          totalCESChange += update.cesChange;
          totalPOLChange += update.polChange;
        } else {
          console.log(`‚úÖ ${update.chatId} (${update.name}): –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
        }
      }
      
      console.log('\nüéØ –û–ë–©–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:');
      console.log(`   –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π CES: ${totalCESChange >= 0 ? '+' : ''}${totalCESChange.toFixed(4)}`);
      console.log(`   –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π POL: ${totalPOLChange >= 0 ? '+' : ''}${totalPOLChange.toFixed(4)}`);
    }
    
    console.log('\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüìù –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

forceUpdateAllBalances().catch(console.error);