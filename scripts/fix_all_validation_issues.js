/**
 * üîß –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–´–• –ü–†–û–ë–õ–ï–ú
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å enum –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

require('dotenv').config();

const { connectDatabase, disconnectDatabase, P2POrder, EscrowTransaction } = require('../src/database/models');

async function fixAllValidationIssues() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º...');
    
    await connectDatabase();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    let totalFixed = 0;
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º P2POrder —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    console.log('\nüìã –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï P2P –û–†–î–ï–†–û–í:');
    const orders = await P2POrder.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${orders.length} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    let fixedOrders = 0;
    for (const order of orders) {
      try {
        await order.validate();
      } catch (error) {
        if (error.message.includes('is not a valid enum value')) {
          console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ${order._id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${order.status}"`);
          
          if (order.status === 'expired' || order.status === 'timeout') {
            order.status = 'cancelled';
            order.cancelReason = order.cancelReason || '–ò—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ä–¥–µ—Ä–∞ (–∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)';
            order.canceledAt = order.canceledAt || new Date();
          } else if (!['active', 'partial', 'completed', 'cancelled', 'locked'].includes(order.status)) {
            order.status = 'cancelled';
            order.cancelReason = `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å "${order.status}"`;
            order.canceledAt = new Date();
          }
          
          await order.save();
          fixedOrders++;
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä ${order._id}: —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ "${order.status}"`);
        }
      }
    }
    
    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º EscrowTransaction —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    console.log('\nüí∞ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –≠–°–ö–†–û–£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    const escrows = await EscrowTransaction.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${escrows.length} —ç—Å–∫—Ä–æ—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    let fixedEscrows = 0;
    for (const escrow of escrows) {
      try {
        await escrow.validate();
      } catch (error) {
        if (error.message.includes('is not a valid enum value')) {
          console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Å–∫—Ä–æ—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${escrow._id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${escrow.status}"`);
          
          if (escrow.status === 'cancelled' || escrow.status === 'canceled') {
            escrow.status = 'failed';
            escrow.reason = escrow.reason || '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ (–∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)';
          } else if (!['pending', 'completed', 'failed'].includes(escrow.status)) {
            escrow.status = 'failed';
            escrow.reason = `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å "${escrow.status}"`;
          }
          
          await escrow.save();
          fixedEscrows++;
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —ç—Å–∫—Ä–æ—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${escrow._id}: —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ "${escrow.status}"`);
        }
      }
    }
    
    totalFixed = fixedOrders + fixedEscrows;
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ P2P –æ—Ä–¥–µ—Ä–æ–≤: ${fixedOrders}`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Å–∫—Ä–æ—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${fixedEscrows}`);
    console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixed}`);
    
    if (totalFixed === 0) {
      console.log('üéâ –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –ø–æ—Ä—è–¥–∫–µ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.');
    } else {
      console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
    
    let validationErrors = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
    const allOrders = await P2POrder.find({});
    for (const order of allOrders) {
      try {
        await order.validate();
      } catch (error) {
        console.error(`‚ùå –û—Ä–¥–µ—Ä ${order._id} –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, error.message);
        validationErrors++;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç—Å–∫—Ä–æ—É
    const allEscrows = await EscrowTransaction.find({});
    for (const escrow of allEscrows) {
      try {
        await escrow.validate();
      } catch (error) {
        console.error(`‚ùå –≠—Å–∫—Ä–æ—É ${escrow._id} –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, error.message);
        validationErrors++;
      }
    }
    
    if (validationErrors === 0) {
      console.log('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—à–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏!');
    } else {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${validationErrors} –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:', error);
  } finally {
    await disconnectDatabase();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  fixAllValidationIssues()
    .then(() => {
      console.log('‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { fixAllValidationIssues };