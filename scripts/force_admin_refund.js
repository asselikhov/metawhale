/**
 * –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ê–¥–º–∏–Ω—Å–∫–∏–π –í–æ–∑–≤—Ä–∞—Ç –≠—Å–∫—Ä–æ—É
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –≥–∞–∑–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ 1.1 CES
 */

const { ethers } = require('ethers');
const config = require('../src/config/configuration');
const { User, connectDatabase, disconnectDatabase } = require('../src/database/models');

const providers = ethers.providers || ethers;

const TARGET_USER_ID = 942851377;
const ESCROW_ID = 7;
const ADMIN_PRIVATE_KEY = process.env.ADMIN_PRIVATE_KEY;
const CONTRACT_ADDRESS = '0x04B16d50949CD92de90fbadcF49745897CbED5C4';

// ABI –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ adminRefundEscrow
const CONTRACT_ABI = [
  "function adminRefundEscrow(uint256 escrowId) external"
];

async function forceAdminRefund() {
  try {
    console.log('üöÄ –§–û–†–°–ò–†–û–í–ê–ù–ù–´–ô –ê–î–ú–ò–ù–°–ö–ò–ô –í–û–ó–í–†–ê–¢ –≠–°–ö–†–û–£');
    console.log('=========================================');
    
    await connectDatabase();
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ chatId: TARGET_USER_ID });
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    if (!ADMIN_PRIVATE_KEY) {
      throw new Error('ADMIN_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || user.firstName} (${user.chatId})`);
    console.log(`üí≥ –ö–æ—à–µ–ª–µ–∫: ${user.walletAddress}`);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ç–∏
    const provider = new providers.JsonRpcProvider(config.wallet.polygonRpcUrl);
    const adminWallet = new ethers.Wallet(ADMIN_PRIVATE_KEY, provider);
    
    console.log(`üîë –ê–¥–º–∏–Ω—Å–∫–∏–π –∫–æ—à–µ–ª–µ–∫: ${adminWallet.address}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∞
    const adminBalance = await provider.getBalance(adminWallet.address);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å MATIC –∞–¥–º–∏–Ω–∞: ${ethers.utils.formatEther(adminBalance)}`);
    
    if (adminBalance.lt(ethers.utils.parseEther('0.01'))) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MATIC –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞!');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, adminWallet);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –≥–∞–∑–∞
    console.log('\n‚õΩ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –≥–∞–∑–∞...');
    const feeData = await provider.getFeeData();
    const gasPrice = await provider.getGasPrice();
    
    console.log(`   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: ${ethers.utils.formatUnits(gasPrice, 'gwei')} Gwei`);
    console.log(`   Max Fee Per Gas: ${ethers.utils.formatUnits(feeData.maxFeePerGas || gasPrice, 'gwei')} Gwei`);
    console.log(`   Max Priority Fee: ${ethers.utils.formatUnits(feeData.maxPriorityFeePerGas || 0, 'gwei')} Gwei`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const maxFeePerGas = gasPrice.mul(3); // –í 3 —Ä–∞–∑–∞ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    const maxPriorityFeePerGas = ethers.utils.parseUnits('2', 'gwei'); // 2 Gwei –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const gasLimit = 300000; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≥–∞–∑–∞
    
    console.log('\nüîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    console.log(`   Gas Limit: ${gasLimit}`);
    console.log(`   Gas Price: ${ethers.utils.formatUnits(maxFeePerGas, 'gwei')} Gwei`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º nonce
    const nonce = await provider.getTransactionCount(adminWallet.address, 'latest');
    console.log(`   Nonce: ${nonce}`);
    
    console.log(`\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —ç—Å–∫—Ä–æ—É ${ESCROW_ID}...`);
    console.log(`‚ö†Ô∏è –≠—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç 1.1 CES –¥–ª—è ${user.walletAddress}`);
    
    const txOptions = {
      gasLimit: gasLimit,
      gasPrice: maxFeePerGas,
      nonce: nonce
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const tx = await contract.adminRefundEscrow(ESCROW_ID, txOptions);
    
    console.log(`\nüìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:`);
    console.log(`   Hash: ${tx.hash}`);
    console.log(`   From: ${tx.from}`);
    console.log(`   To: ${tx.to}`);
    console.log(`   Gas Limit: ${tx.gasLimit?.toString()}`);
    console.log(`   Nonce: ${tx.nonce}`);
    
    console.log(`\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç)`);
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const receipt = await Promise.race([
      tx.wait(),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')), 120000)
      )
    ]);
    
    if (receipt.status === 1) {
      console.log(`\nüéâ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –£–°–ü–ï–®–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!`);
      console.log(`   –ë–ª–æ–∫: ${receipt.blockNumber}`);
      console.log(`   Gas Used: ${receipt.gasUsed?.toString()}`);
      console.log(`   Effective Gas Price: ${ethers.utils.formatUnits(receipt.effectiveGasPrice || 0, 'gwei')} Gwei`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log(`\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`);
      const walletService = require('../src/services/walletService');
      const newBalance = await walletService.getCESBalance(user.walletAddress);
      console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} CES`);
      
      if (newBalance >= 2.0) {
        console.log(`   ‚úÖ –£–°–ü–ï–•: –í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ë–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –¥–æ ${newBalance} CES`);
      } else {
        console.log(`   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–ª–∞–Ω—Å ${newBalance} CES, –æ–∂–∏–¥–∞–ª–æ—Å—å ~2.0 CES`);
      }
      
    } else {
      console.log(`\n‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –ü–†–û–í–ê–õ–ò–õ–ê–°–¨`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${receipt.status}`);
    }
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error.message);
    
    if (error.message.includes('insufficient funds')) {
      console.log('\nüí° –†–ï–®–ï–ù–ò–ï: –ü–æ–ø–æ–ª–Ω–∏—Ç–µ MATIC –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–º –∫–æ—à–µ–ª—å–∫–µ');
    } else if (error.message.includes('nonce')) {
      console.log('\nüí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å nonce, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
    } else if (error.message.includes('gas')) {
      console.log('\nüí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–∞–∑–æ–º, —É–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç –∏–ª–∏ —Ü–µ–Ω—É');
    }
    
    throw error;
  } finally {
    await disconnectDatabase();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
if (require.main === module) {
  forceAdminRefund()
    .then(() => {
      console.log('\nüéâ –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error.message);
      process.exit(1);
    });
}

module.exports = { forceAdminRefund };