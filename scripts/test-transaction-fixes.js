/**
 * Transaction Fix Testing Script
 * Tests the improved gas handling and RPC connection reliability
 */

const mongoose = require('mongoose');
const config = require('../src/config/configuration');
const rpcService = require('../src/services/rpcService');
const walletService = require('../src/services/walletService');
const { User } = require('../src/database/models');

async function testTransactionFixes() {
  console.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–ï–†–ï–í–û–î–û–í');
  console.log('=' .repeat(50));
  
  try {
    await mongoose.connect(config.database.mongoUri, config.database.options);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // 1. Test RPC service
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPC —Å–µ—Ä–≤–∏—Å–∞...');
    try {
      const networkInfo = await rpcService.getNetworkInfo();
      console.log('‚úÖ RPC —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç:');
      console.log(`   - –°–µ—Ç—å: ${networkInfo.name} (Chain ID: ${networkInfo.chainId})`);
      console.log(`   - –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: ${networkInfo.blockNumber}`);
      console.log(`   - Gas price: ${networkInfo.gasPrice} Gwei`);
    } catch (rpcError) {
      console.log(`‚ùå RPC —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${rpcError.message}`);
    }
    
    // 2. Test gas price estimation
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞...');
    try {
      const feeData = await rpcService.getFeeData();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö –ø–æ–ª—É—á–µ–Ω—ã:');
      if (feeData.maxFeePerGas) {
        console.log(`   - Max Fee Per Gas: ${feeData.maxFeePerGas.toString()} wei`);
      }
      if (feeData.maxPriorityFeePerGas) {
        console.log(`   - Max Priority Fee: ${feeData.maxPriorityFeePerGas.toString()} wei`);
      }
      if (feeData.gasPrice) {
        console.log(`   - Legacy Gas Price: ${feeData.gasPrice.toString()} wei`);
      }
    } catch (gasError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–∞–∑–µ: ${gasError.message}`);
    }
    
    // 3. Test balance checking with new service
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤...');
    const testUsers = await User.find({ 
      walletAddress: { $exists: true, $ne: null },
      chatId: { $not: /^test_/ }
    }).limit(2);
    
    for (const user of testUsers) {
      try {
        console.log(`\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.chatId}:`);
        
        // Test CES balance
        const cesBalance = await walletService.getCESBalance(user.walletAddress);
        console.log(`   üí∞ CES –±–∞–ª–∞–Ω—Å: ${cesBalance}`);
        
        // Test POL balance
        const polBalance = await walletService.getPOLBalance(user.walletAddress);
        console.log(`   üíé POL –±–∞–ª–∞–Ω—Å: ${polBalance}`);
        
        console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ —É—Å–ø–µ—à–Ω–∞');
        
      } catch (balanceError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${balanceError.message}`);
      }
    }
    
    // 4. Test gas estimation for transactions
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    if (testUsers.length > 0) {
      const testUser = testUsers[0];
      
      try {
        // Test POL transfer gas estimation
        const polGasEstimate = await rpcService.estimateGas({
          to: testUser.walletAddress,
          value: '1000000000000000', // 0.001 POL
          from: testUser.walletAddress
        });
        console.log(`   üî• POL –ø–µ—Ä–µ–≤–æ–¥ (–æ—Ü–µ–Ω–∫–∞): ${polGasEstimate.toString()} gas`);
        
        // Test CES transfer gas estimation
        const { ethers } = require('ethers');
        const erc20Interface = new ethers.utils.Interface([
          "function transfer(address to, uint256 amount) returns (bool)"
        ]);
        const txData = erc20Interface.encodeFunctionData('transfer', [
          testUser.walletAddress, 
          '1000000000000000000' // 1 CES
        ]);
        
        const cesGasEstimate = await rpcService.estimateGas({
          to: config.wallet.cesContractAddress,
          data: txData,
          from: testUser.walletAddress
        });
        console.log(`   üî• CES –ø–µ—Ä–µ–≤–æ–¥ (–æ—Ü–µ–Ω–∫–∞): ${cesGasEstimate.toString()} gas`);
        
        console.log('   ‚úÖ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        
      } catch (gasEstError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞: ${gasEstError.message}`);
      }
    }
    
    // 5. Display configuration
    console.log('\n5Ô∏è‚É£ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RPC endpoints:');
    console.log(`   - –û—Å–Ω–æ–≤–Ω–æ–π RPC: ${config.wallet.polygonRpcUrl}`);
    console.log(`   - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ RPC endpoints: ${config.wallet.alternativeRpcUrls.length}`);
    config.wallet.alternativeRpcUrls.forEach((url, index) => {
      console.log(`     ${index + 1}. ${url}`);
    });
    
    // 6. Test recommendations
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚úÖ RPC —Å–µ—Ä–≤–∏—Å —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∞–∑–∞ –¥–ª—è EIP-1559 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É RPC endpoints –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö');
    console.log('‚úÖ Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤ —Å–µ—Ç–∏');
    
    console.log('\nüí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('üîß Gas price —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ —Å–µ—Ç–∏');
    console.log('üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ 30 Gwei –¥–ª—è Polygon');
    console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è EIP-1559 —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (type 2)');
    console.log('üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ RPC –ø—Ä–∏ rate limiting');
    console.log('üîß –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∞');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

testTransactionFixes().catch(console.error);