/**
 * Fix Specific Escrow Issues
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { User, P2PTrade, EscrowTransaction } = require('../src/database/models');
const escrowService = require('../src/services/escrowService');

async function fixEscrowIssues() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–ù–´–• –ü–†–û–ë–õ–ï–ú –≠–°–ö–†–û–£');
    console.log('====================================');
    
    // Connect to database
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    let fixedIssues = 0;
    
    // 1. Fix balance discrepancy for test_seller_123
    console.log('\nüí∞ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ô –í –ë–ê–õ–ê–ù–°–ê–•:');
    const testSeller = await User.findOne({ chatId: 'test_seller_123' });
    if (testSeller && testSeller.cesBalance > 0) {
      console.log(`   - –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å test_seller_123 —Å –±–∞–ª–∞–Ω—Å–æ–º ${testSeller.cesBalance} CES`);
      console.log(`   - –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–æ 0`);
      
      testSeller.cesBalance = 0;
      testSeller.escrowCESBalance = 0;
      await testSeller.save();
      
      console.log(`   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`);
      fixedIssues++;
    }
    
    // 2. Fix expired trades
    console.log('\nü§ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –°–î–ï–õ–û–ö:');
    const expiredTrades = await P2PTrade.find({
      status: { $in: ['escrow_locked', 'payment_pending'] },
      'timeTracking.createdAt': { $lt: new Date(Date.now() - 2 * 60 * 60 * 1000) }
    }).populate('sellerId buyerId');
    
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${expiredTrades.length}`);
    
    for (const trade of expiredTrades) {
      try {
        console.log(`   üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏: ${trade._id}`);
        
        // Check if escrow needs to be refunded
        const escrowTx = await EscrowTransaction.findOne({
          tradeId: trade._id,
          type: 'lock',
          status: 'completed'
        });
        
        if (escrowTx) {
          console.log(`     - –ù–∞–π–¥–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç—Å–∫—Ä–æ—É –Ω–∞ ${escrowTx.amount} CES`);
          
          // Refund escrow to seller
          await escrowService.refundTokensFromEscrow(
            trade.sellerId._id,
            trade._id,
            'CES',
            trade.amount,
            'Automatic cleanup: expired trade timeout'
          );
          
          console.log(`     ‚úÖ –≠—Å–∫—Ä–æ—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É`);
        }
        
        // Update trade status
        trade.status = 'cancelled';
        trade.escrowStatus = 'returned';
        trade.disputeReason = 'Automatic cleanup: trade timeout exceeded';
        trade.timeTracking.cancelledAt = new Date();
        
        await trade.save();
        
        console.log(`   ‚úÖ –°–¥–µ–ª–∫–∞ ${trade._id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ —ç—Å–∫—Ä–æ—É –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω`);
        fixedIssues++;
        
      } catch (tradeError) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ ${trade._id}:`, tradeError.message);
      }
    }
    
    // 3. Summary
    console.log(`\nüìä –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
    console.log(`   - –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${fixedIssues}`);
    
    if (fixedIssues > 0) {
      console.log(`   üéâ –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!`);
    } else {
      console.log(`   ‚ÑπÔ∏è –ü—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    
    return fixedIssues;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:', error);
    throw error;
  } finally {
    await mongoose.connection.close();
    console.log('\nüíæ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// Run fixes
if (require.main === module) {
  fixEscrowIssues().then(fixedCount => {
    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–±–ª–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error);
    process.exit(1);
  });
}

module.exports = { fixEscrowIssues };