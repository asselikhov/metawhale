/**
 * Balance Issue Diagnostic Script
 * Tests wallet balance checking functionality to identify the root cause
 */

const mongoose = require('mongoose');
const { ethers } = require('ethers');
const config = require('../src/config/configuration');
const { User } = require('../src/database/models');
const walletService = require('../src/services/walletService');

// Ensure ethers providers are available
const providers = ethers.providers || ethers;
const utils = ethers.utils || ethers;

async function runDiagnostics() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ë–ê–õ–ê–ù–°–ê–ú–ò');
  console.log('=' .repeat(50));
  
  try {
    // 1. Check database connection
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await mongoose.connect(config.database.mongoUri, config.database.options);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // 2. Check configuration
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    console.log(`   - Polygon RPC URL: ${config.wallet.polygonRpcUrl}`);
    console.log(`   - CES Contract Address: ${config.wallet.cesContractAddress}`);
    console.log(`   - Encryption Key present: ${config.wallet.encryptionKey ? 'Yes' : 'No'}`);
    
    // 3. Test RPC connection
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Polygon RPC...');
    try {
      const provider = new providers.JsonRpcProvider(config.wallet.polygonRpcUrl);
      const blockNumber = await provider.getBlockNumber();
      console.log(`‚úÖ RPC —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: ${blockNumber}`);
    } catch (rpcError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ RPC: ${rpcError.message}`);
      
      // Try alternative RPC endpoints
      const alternativeRPCs = [
        'https://rpc.ankr.com/polygon',
        'https://polygon-rpc.com/',
        'https://rpc-mainnet.matic.network',
        'https://matic-mainnet.chainstacklabs.com'
      ];
      
      console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö RPC...');
      for (const rpcUrl of alternativeRPCs) {
        try {
          const testProvider = new providers.JsonRpcProvider(rpcUrl);
          const testBlock = await testProvider.getBlockNumber();
          console.log(`‚úÖ ${rpcUrl} - –±–ª–æ–∫: ${testBlock}`);
        } catch (altError) {
          console.log(`‚ùå ${rpcUrl} - –æ—à–∏–±–∫–∞: ${altError.message}`);
        }
      }
    }
    
    // 4. Test CES contract
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ CES...');
    try {
      const provider = new providers.JsonRpcProvider(config.wallet.polygonRpcUrl);
      const erc20Abi = [
        "function balanceOf(address owner) view returns (uint256)",
        "function decimals() view returns (uint8)",
        "function name() view returns (string)",
        "function symbol() view returns (string)"
      ];
      
      const contract = new ethers.Contract(
        config.wallet.cesContractAddress,
        erc20Abi,
        provider
      );
      
      const [name, symbol, decimals] = await Promise.all([
        contract.name(),
        contract.symbol(),
        contract.decimals()
      ]);
      
      console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç CES –Ω–∞–π–¥–µ–Ω:`);
      console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${name}`);
      console.log(`   - –°–∏–º–≤–æ–ª: ${symbol}`);
      console.log(`   - –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏: ${decimals}`);
      
    } catch (contractError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ CES: ${contractError.message}`);
    }
    
    // 5. Check users with wallets
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏...');
    const usersWithWallets = await User.find({ 
      walletAddress: { $exists: true, $ne: null } 
    }).limit(5);
    
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏: ${usersWithWallets.length}`);
    
    if (usersWithWallets.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    } else {
      // 6. Test balance checking for a few users
      console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤...');
      
      for (const user of usersWithWallets.slice(0, 3)) {
        console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.chatId} (${user.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}):`);
        console.log(`   - –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${user.walletAddress}`);
        console.log(`   - –ë–∞–ª–∞–Ω—Å CES –≤ –ë–î: ${user.cesBalance || 0}`);
        console.log(`   - –ë–∞–ª–∞–Ω—Å POL –≤ –ë–î: ${user.polBalance || 0}`);
        console.log(`   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.lastBalanceUpdate || '–ù–∏–∫–æ–≥–¥–∞'}`);
        
        try {
          // Test CES balance
          console.log('   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ CES...');
          const cesBalance = await walletService.getCESBalance(user.walletAddress);
          console.log(`   üí∞ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å CES: ${cesBalance}`);
          
          // Test POL balance
          console.log('   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ POL...');
          const polBalance = await walletService.getPOLBalance(user.walletAddress);
          console.log(`   üíé –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å POL: ${polBalance}`);
          
          // Compare with DB
          const cesDiscrepancy = cesBalance - (user.cesBalance || 0);
          const polDiscrepancy = polBalance - (user.polBalance || 0);
          
          if (Math.abs(cesDiscrepancy) > 0.0001) {
            console.log(`   ‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ CES: ${cesDiscrepancy.toFixed(4)}`);
          } else {
            console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å CES —Å–æ–≤–ø–∞–¥–∞–µ—Ç`);
          }
          
          if (Math.abs(polDiscrepancy) > 0.0001) {
            console.log(`   ‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ POL: ${polDiscrepancy.toFixed(4)}`);
          } else {
            console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å POL —Å–æ–≤–ø–∞–¥–∞–µ—Ç`);
          }
          
        } catch (balanceError) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${balanceError.message}`);
        }
      }
      
      // 7. Test getUserWallet function
      console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ getUserWallet...');
      const testUser = usersWithWallets[0];
      
      try {
        const walletInfo = await walletService.getUserWallet(testUser.chatId);
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç getUserWallet:`);
        console.log(`   - hasWallet: ${walletInfo.hasWallet}`);
        console.log(`   - cesBalance: ${walletInfo.cesBalance}`);
        console.log(`   - polBalance: ${walletInfo.polBalance}`);
        console.log(`   - totalCESBalance: ${walletInfo.totalCESBalance}`);
        console.log(`   - totalPOLBalance: ${walletInfo.totalPOLBalance}`);
        
      } catch (walletError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ getUserWallet: ${walletError.message}`);
      }
    }
    
    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (POLYGON_RPC_URL, CES_CONTRACT_ADDRESS)');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Polygon RPC –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ CES');
    console.log('4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüìù –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

// Run diagnostics
runDiagnostics().catch(console.error);