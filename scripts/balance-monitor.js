/**
 * Balance Monitoring and Auto-Fix Script
 * Monitors user balances and automatically fixes synchronization issues
 * Can be run as a scheduled task to prevent balance display problems
 */

const mongoose = require('mongoose');
const config = require('../src/config/configuration');
const { User } = require('../src/database/models');
const walletService = require('../src/services/walletService');

class BalanceMonitor {
  constructor() {
    this.discrepancyThreshold = 0.0001; // Minimum difference to consider as discrepancy
    this.maxRetries = 3;
  }

  async checkAndFixBalances(options = {}) {
    const { 
      dryRun = false, 
      fixDiscrepancies = true, 
      onlyRealUsers = true 
    } = options;
    
    console.log('üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–ê–õ–ê–ù–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('=' .repeat(50));
    console.log(`–†–µ–∂–∏–º: ${dryRun ? '–¢–û–õ–¨–ö–û –ü–†–û–í–ï–†–ö–ê (dry run)' : '–ü–†–û–í–ï–†–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï'}`);
    console.log(`–¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${onlyRealUsers ? '–î–∞' : '–ù–µ—Ç'}`);
    
    try {
      await mongoose.connect(config.database.mongoUri, config.database.options);
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
      
      // Get users to check
      const query = { walletAddress: { $exists: true, $ne: null } };
      if (onlyRealUsers) {
        query.chatId = { $not: /^test_/ };
      }
      
      const users = await User.find(query);
      console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${users.length}`);
      
      if (users.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
        return { success: true, checkedUsers: 0, fixedUsers: 0 };
      }
      
      const results = {
        checkedUsers: 0,
        discrepanciesFound: 0,
        fixedUsers: 0,
        errors: 0,
        discrepancies: []
      };
      
      console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í:');
      console.log('-'.repeat(80));
      
      for (const user of users) {
        try {
          results.checkedUsers++;
          
          // Get real balances from blockchain with retry logic
          const [realCESBalance, realPOLBalance] = await this.getBalancesWithRetry(
            user.walletAddress
          );
          
          // Compare with DB balances
          const dbCESBalance = user.cesBalance || 0;
          const dbPOLBalance = user.polBalance || 0;
          
          const cesDiscrepancy = Math.abs(realCESBalance - dbCESBalance);
          const polDiscrepancy = Math.abs(realPOLBalance - dbPOLBalance);
          
          const hasDiscrepancy = cesDiscrepancy > this.discrepancyThreshold || 
                                 polDiscrepancy > this.discrepancyThreshold;
          
          if (hasDiscrepancy) {
            results.discrepanciesFound++;
            
            const discrepancyInfo = {
              chatId: user.chatId,
              name: user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏',
              address: user.walletAddress,
              cesReal: realCESBalance,
              cesDB: dbCESBalance,
              cesDiscrepancy: realCESBalance - dbCESBalance,
              polReal: realPOLBalance,
              polDB: dbPOLBalance,
              polDiscrepancy: realPOLBalance - dbPOLBalance,
              fixed: false
            };
            
            console.log(`\n‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: ${user.chatId} (${discrepancyInfo.name})`);
            console.log(`   CES: –ë–î ${dbCESBalance.toFixed(4)} ‚â† –ë–ª–æ–∫—á–µ–π–Ω ${realCESBalance.toFixed(4)} (—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${discrepancyInfo.cesDiscrepancy.toFixed(4)})`);
            console.log(`   POL: –ë–î ${dbPOLBalance.toFixed(4)} ‚â† –ë–ª–æ–∫—á–µ–π–Ω ${realPOLBalance.toFixed(4)} (—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${discrepancyInfo.polDiscrepancy.toFixed(4)})`);
            
            if (fixDiscrepancies && !dryRun) {
              try {
                // Update database with real balances
                user.cesBalance = realCESBalance;
                user.polBalance = realPOLBalance;
                user.lastBalanceUpdate = new Date();
                await user.save();
                
                discrepancyInfo.fixed = true;
                results.fixedUsers++;
                
                console.log(`   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î`);
                
              } catch (fixError) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${fixError.message}`);
                results.errors++;
              }
            } else if (dryRun) {
              console.log(`   üí° –¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (dry run —Ä–µ–∂–∏–º)`);
            }
            
            results.discrepancies.push(discrepancyInfo);
            
          } else {
            console.log(`‚úÖ ${user.chatId}: –ë–∞–ª–∞–Ω—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);
          }
          
          // Small delay to avoid overwhelming RPC
          await new Promise(resolve => setTimeout(resolve, 200));
          
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${user.chatId}: ${error.message}`);
          results.errors++;
        }
      }
      
      // Generate summary report
      this.generateReport(results, dryRun);
      
      return results;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      throw error;
    } finally {
      await mongoose.connection.close();
      console.log('\nüìù –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  }
  
  async getBalancesWithRetry(address) {
    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        const [cesBalance, polBalance] = await Promise.all([
          walletService.getCESBalance(address),
          walletService.getPOLBalance(address)
        ]);
        return [cesBalance, polBalance];
      } catch (error) {
        console.log(`   ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
        if (attempt === this.maxRetries) {
          throw error;
        }
        // Wait before retry
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }
  }
  
  generateReport(results, dryRun) {
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log('=' .repeat(50));
    console.log(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.checkedUsers}`);
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: ${results.discrepanciesFound}`);
    
    if (!dryRun) {
      console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.fixedUsers}`);
    }
    
    console.log(`–û—à–∏–±–æ–∫: ${results.errors}`);
    
    if (results.discrepancies.length > 0) {
      console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      
      if (results.discrepanciesFound > 0 && dryRun) {
        console.log('   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –±–µ–∑ —Ä–µ–∂–∏–º–∞ dry run –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      }
      
      if (results.fixedUsers > 0) {
        console.log('   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤');
        console.log('   üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      }
      
      if (results.discrepanciesFound > results.checkedUsers * 0.1) {
        console.log('   ‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É');
      }
    } else {
      console.log('\n‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    }
  }
}

// CLI interface
async function main() {
  const args = process.argv.slice(2);
  const options = {};
  
  // Parse command line arguments
  if (args.includes('--dry-run')) {
    options.dryRun = true;
  }
  
  if (args.includes('--include-test-users')) {
    options.onlyRealUsers = false;
  }
  
  if (args.includes('--no-fix')) {
    options.fixDiscrepancies = false;
  }
  
  const monitor = new BalanceMonitor();
  
  try {
    const results = await monitor.checkAndFixBalances(options);
    
    // Exit with appropriate code
    if (results.errors > 0) {
      process.exit(1);
    } else if (results.discrepanciesFound > 0 && options.dryRun) {
      process.exit(2); // Indicates discrepancies found in dry run
    } else {
      process.exit(0);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  console.log('üîç Balance Monitor v1.0');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node balance-monitor.js                    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å');
  console.log('  node balance-monitor.js --dry-run          - –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å');
  console.log('  node balance-monitor.js --include-test-users - –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('  node balance-monitor.js --no-fix           - –ù–µ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  console.log('');
  
  main();
}

module.exports = BalanceMonitor;