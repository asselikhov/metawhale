/**
 * –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–æ–∫
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏ –æ—Ç–º–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
 * 1. –ú–µ–π–∫–µ—Ä –ø–æ–∫—É–ø–∞–µ—Ç CES ‚Üí —Ç–æ–ª—å–∫–æ –º–µ–π–∫–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å
 * 2. –ú–µ–π–∫–µ—Ä –ø—Ä–æ–¥–∞—ë—Ç CES ‚Üí —Ç–æ–ª—å–∫–æ —Ç–µ–π–∫–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å  
 * 3. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã ‚Üí –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å
 */

require('dotenv').config();

const { connectDatabase, disconnectDatabase } = require('../src/database/models');

async function testTradeCancellationRules() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –ü–†–ê–í–ò–õ –û–¢–ú–ï–ù–´ –°–î–ï–õ–û–ö');
    console.log('===========================================');
    
    await connectDatabase();
    
    // Mock context and handler
    const mockContext = {
      chat: { id: '942851377' },
      reply: (message, keyboard) => {
        console.log('üì± –û—Ç–≤–µ—Ç –±–æ—Ç–∞:', message.replace(/\n/g, ' '));
        return Promise.resolve();
      }
    };
    
    const messageHandler = require('../src/handlers/messageHandler');
    const handler = new messageHandler();
    
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: –ú–µ–π–∫–µ—Ä –ø–æ–∫—É–ø–∞–µ—Ç CES
    console.log('\nüìù 1. –°–¶–ï–ù–ê–†–ò–ô: –ú–ï–ô–ö–ï–† –ü–û–ö–£–ü–ê–ï–¢ CES');
    console.log('   –ü—Ä–∞–≤–∏–ª–æ: –¢–æ–ª—å–∫–æ –º–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å) –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å');
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { P2PTrade, P2POrder, User } = require('../src/database/models');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testMaker = await User.findOneAndUpdate(
      { chatId: '942851377' },
      { 
        chatId: '942851377',
        username: 'test_maker',
        cesBalance: 100,
        escrowCESBalance: 0
      },
      { upsert: true, new: true }
    );
    
    const testTaker = await User.findOneAndUpdate(
      { chatId: '987654321' },
      { 
        chatId: '987654321',
        username: 'test_taker',
        cesBalance: 50,
        escrowCESBalance: 1
      },
      { upsert: true, new: true }
    );
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ (–º–µ–π–∫–µ—Ä —Å–æ–∑–¥–∞–ª buy order –ø–µ—Ä–≤—ã–º)
    const testBuyOrder = new P2POrder({
      userId: testMaker._id,
      type: 'buy',
      amount: 1,
      remainingAmount: 1,
      pricePerToken: 100,
      totalValue: 100,
      status: 'active',
      createdAt: new Date('2025-01-01T10:00:00Z') // –†–∞–Ω—å—à–µ
    });
    await testBuyOrder.save();
    
    const testSellOrder = new P2POrder({
      userId: testTaker._id,
      type: 'sell',
      amount: 1,
      remainingAmount: 1,
      pricePerToken: 100,
      totalValue: 100,
      status: 'active',
      createdAt: new Date('2025-01-01T10:05:00Z') // –ü–æ–∑–∂–µ
    });
    await testSellOrder.save();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É
    const testTrade = new P2PTrade({
      buyOrderId: testBuyOrder._id,
      sellOrderId: testSellOrder._id,
      buyerId: testMaker._id,    // –ú–µ–π–∫–µ—Ä (—Å–æ–∑–¥–∞–ª –æ—Ä–¥–µ—Ä –ø–µ—Ä–≤—ã–º)
      sellerId: testTaker._id,   // –¢–µ–π–∫–µ—Ä
      amount: 1,
      pricePerToken: 100,
      totalValue: 100,
      commission: 1, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
      status: 'escrow_locked',
      escrowStatus: 'locked'
    });
    await testTrade.save();
    
    console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –æ—Ç–º–µ–Ω—ã:');
    console.log('   üìù –ú–µ–π–∫–µ—Ä –ø–æ–∫—É–ø–∞–µ—Ç CES ‚Üí —Ç–æ–ª—å–∫–æ –º–µ–π–∫–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å');
    console.log('   üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await P2PTrade.deleteMany({ _id: testTrade._id });
    await P2POrder.deleteMany({ _id: { $in: [testBuyOrder._id, testSellOrder._id] } });
    await User.deleteMany({ _id: { $in: [testMaker._id, testTaker._id] } });
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚úÖ –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–æ–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã!');
    console.log('üìã –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log('   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–π–∫–µ—Ä–∞/—Ç–µ–π–∫–µ—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤');
    console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –æ—Ç–º–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π');
    console.log('   ‚úÖ –ó–∞–ø—Ä–µ—Ç –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
    console.log('   ‚úÖ –ü–æ–∫–∞–∑ –ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ');
    
    await disconnectDatabase();
    
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    await disconnectDatabase();
    throw error;
  }
}

if (require.main === module) {
  testTradeCancellationRules()
    .then(() => {
      console.log('\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error);
      process.exit(1);
    });
}

module.exports = { testTradeCancellationRules };