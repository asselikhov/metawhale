/**
 * –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–π P2P —Å–∏—Å—Ç–µ–º–µ
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
 * 1. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è currency, pricePerTokenInUSD, totalValueInUSD –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º P2P –æ—Ä–¥–µ—Ä–∞–º
 * 2. –ú–∏–≥—Ä–∏—Ä—É–µ—Ç RubleReserve –∑–∞–ø–∏—Å–∏ –≤ FiatReserve
 * 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 */

const mongoose = require('mongoose');
const { connectDatabase, P2POrder, P2PTrade, RubleReserve, FiatReserve, ExchangeRate } = require('../src/database/models');
const fiatCurrencyService = require('../src/services/fiatCurrencyService');

class P2PMigrationService {
  constructor() {
    this.migrationLog = [];
    this.errors = [];
    this.stats = {
      migratedOrders: 0,
      migratedTrades: 0,
      migratedReserves: 0,
      createdExchangeRates: 0
    };
  }

  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  async runMigration() {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é P2P —Å–∏—Å—Ç–µ–º—ã –∫ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç–∏...\n');
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
      await connectDatabase();
      
      // –≠—Ç–∞–ø 1: –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤
      await this.migrateP2POrders();
      
      // –≠—Ç–∞–ø 2: –ú–∏–≥—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫
      await this.migrateP2PTrades();
      
      // –≠—Ç–∞–ø 3: –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤
      await this.migrateRubleReserves();
      
      // –≠—Ç–∞–ø 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
      await this.initializeExchangeRates();
      
      // –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
      await this.validateMigration();
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      this.printMigrationReport();
      
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      process.exit(1);
    }
  }

  /**
   * –ú–∏–≥—Ä–∞—Ü–∏—è P2P –æ—Ä–¥–µ—Ä–æ–≤
   */
  async migrateP2POrders() {
    try {
      console.log('üì¶ –≠—Ç–∞–ø 1: –ú–∏–≥—Ä–∞—Ü–∏—è P2P –æ—Ä–¥–µ—Ä–æ–≤...');\n      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ –ø–æ–ª—è currency (legacy –æ—Ä–¥–µ—Ä–∞)\n      const legacyOrders = await P2POrder.find({\n        $or: [\n          { currency: { $exists: false } },\n          { currency: null },\n          { pricePerTokenInUSD: { $exists: false } }\n        ]\n      });\n\n      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ legacy –æ—Ä–¥–µ—Ä–æ–≤: ${legacyOrders.length}`);\n\n      // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å RUB/USD –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n      const rubToUsdRate = await fiatCurrencyService.getExchangeRate('RUB', 'USD');\n      \n      if (!rubToUsdRate) {\n        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å RUB/USD –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');\n      }\n\n      console.log(`üí± –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å RUB/USD: ${rubToUsdRate}`);\n\n      let migratedCount = 0;\n      \n      for (const order of legacyOrders) {\n        try {\n          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ USD\n          const pricePerTokenInUSD = order.pricePerToken * rubToUsdRate;\n          const totalValueInUSD = order.totalValue * rubToUsdRate;\n          \n          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä\n          await P2POrder.updateOne(\n            { _id: order._id },\n            {\n              $set: {\n                currency: 'RUB',\n                pricePerTokenInUSD: pricePerTokenInUSD,\n                totalValueInUSD: totalValueInUSD,\n                exchangeRateAtCreation: 1 / rubToUsdRate // USD –≤ RUB\n              }\n            }\n          );\n          \n          migratedCount++;\n          \n          if (migratedCount % 100 === 0) {\n            console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: ${migratedCount}`);\n          }\n          \n        } catch (orderError) {\n          this.errors.push(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–∞ ${order._id}: ${orderError.message}`);\n        }\n      }\n      \n      this.stats.migratedOrders = migratedCount;\n      console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: ${migratedCount}\\n`);\n      \n    } catch (error) {\n      throw new Error(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: ${error.message}`);\n    }\n  }\n\n  /**\n   * –ú–∏–≥—Ä–∞—Ü–∏—è P2P —Å–¥–µ–ª–æ–∫\n   */\n  async migrateP2PTrades() {\n    try {\n      console.log('ü§ù –≠—Ç–∞–ø 2: –ú–∏–≥—Ä–∞—Ü–∏—è P2P —Å–¥–µ–ª–æ–∫...');\n      \n      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –±–µ–∑ –ø–æ–ª—è currency\n      const legacyTrades = await P2PTrade.find({\n        $or: [\n          { currency: { $exists: false } },\n          { currency: null },\n          { pricePerTokenInUSD: { $exists: false } }\n        ]\n      });\n\n      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ legacy —Å–¥–µ–ª–æ–∫: ${legacyTrades.length}`);\n\n      const rubToUsdRate = await fiatCurrencyService.getExchangeRate('RUB', 'USD');\n      let migratedCount = 0;\n      \n      for (const trade of legacyTrades) {\n        try {\n          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ USD\n          const pricePerTokenInUSD = trade.pricePerToken * rubToUsdRate;\n          const totalValueInUSD = trade.totalValue * rubToUsdRate;\n          \n          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É\n          await P2PTrade.updateOne(\n            { _id: trade._id },\n            {\n              $set: {\n                currency: 'RUB',\n                pricePerTokenInUSD: pricePerTokenInUSD,\n                totalValueInUSD: totalValueInUSD,\n                exchangeRateAtTrade: 1 / rubToUsdRate\n              }\n            }\n          );\n          \n          migratedCount++;\n          \n        } catch (tradeError) {\n          this.errors.push(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏ ${trade._id}: ${tradeError.message}`);\n        }\n      }\n      \n      this.stats.migratedTrades = migratedCount;\n      console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–¥–µ–ª–æ–∫: ${migratedCount}\\n`);\n      \n    } catch (error) {\n      throw new Error(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫: ${error.message}`);\n    }\n  }\n\n  /**\n   * –ú–∏–≥—Ä–∞—Ü–∏—è —Ä—É–±–ª–µ–≤—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤ –≤ —Ñ–∏–∞—Ç–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã\n   */\n  async migrateRubleReserves() {\n    try {\n      console.log('üí∞ –≠—Ç–∞–ø 3: –ú–∏–≥—Ä–∞—Ü–∏—è —Ä—É–±–ª–µ–≤—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤...');\n      \n      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±–ª–µ–≤—ã–µ —Ä–µ–∑–µ—Ä–≤—ã\n      const rubleReserves = await RubleReserve.find({\n        isMigrated: { $ne: true }\n      });\n\n      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä—É–±–ª–µ–≤—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤: ${rubleReserves.length}`);\n\n      const rubToUsdRate = await fiatCurrencyService.getExchangeRate('RUB', 'USD');\n      let migratedCount = 0;\n      \n      for (const rubleReserve of rubleReserves) {\n        try {\n          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π FiatReserve\n          const fiatReserve = new FiatReserve({\n            userId: rubleReserve.userId,\n            orderId: rubleReserve.orderId,\n            tradeId: rubleReserve.tradeId,\n            amount: rubleReserve.amount,\n            currency: 'RUB',\n            amountInUSD: rubleReserve.amount * rubToUsdRate,\n            exchangeRate: 1 / rubToUsdRate,\n            type: rubleReserve.type,\n            status: rubleReserve.status,\n            reason: rubleReserve.reason,\n            createdAt: rubleReserve.createdAt,\n            releasedAt: rubleReserve.releasedAt\n          });\n          \n          const savedFiatReserve = await fiatReserve.save();\n          \n          // –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–∑–µ—Ä–≤ –∫–∞–∫ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π\n          await RubleReserve.updateOne(\n            { _id: rubleReserve._id },\n            {\n              $set: {\n                isMigrated: true,\n                migratedToFiatReserveId: savedFiatReserve._id\n              }\n            }\n          );\n          \n          migratedCount++;\n          \n        } catch (reserveError) {\n          this.errors.push(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞ ${rubleReserve._id}: ${reserveError.message}`);\n        }\n      }\n      \n      this.stats.migratedReserves = migratedCount;\n      console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–æ–≤: ${migratedCount}\\n`);\n      \n    } catch (error) {\n      throw new Error(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–æ–≤: ${error.message}`);\n    }\n  }\n\n  /**\n   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç\n   */\n  async initializeExchangeRates() {\n    try {\n      console.log('üí± –≠—Ç–∞–ø 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...');\n      \n      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã\n      const updateResult = await fiatCurrencyService.updateAllExchangeRates();\n      \n      if (updateResult.success) {\n        this.stats.createdExchangeRates = updateResult.updatedCount;\n        console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: ${updateResult.updatedCount}`);\n      } else {\n        console.warn(`‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤: ${updateResult.error}`);\n        \n        // –°–æ–∑–¥–∞–µ–º fallback –∫—É—Ä—Å—ã\n        await this.createFallbackExchangeRates();\n      }\n      \n      console.log();\n      \n    } catch (error) {\n      throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤: ${error.message}`);\n    }\n  }\n\n  /**\n   * –°–æ–∑–¥–∞–Ω–∏–µ fallback –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç\n   */\n  async createFallbackExchangeRates() {\n    const fallbackRates = {\n      'RUB': 100.0,\n      'EUR': 0.85,\n      'CNY': 7.20,\n      'INR': 83.0,\n      'NGN': 775.0,\n      'VND': 24000.0,\n      'KRW': 1320.0,\n      'JPY': 149.0,\n      'BRL': 5.0\n    };\n\n    let createdCount = 0;\n    \n    for (const [currency, rate] of Object.entries(fallbackRates)) {\n      try {\n        await ExchangeRate.findOneAndUpdate(\n          { baseCurrency: 'USD', targetCurrency: currency },\n          {\n            rate: rate,\n            source: 'fallback',\n            lastUpdated: new Date(),\n            isActive: true,\n            metadata: {\n              apiSource: 'manual',\n              confidence: 0.8\n            }\n          },\n          { upsert: true, new: true }\n        );\n        \n        createdCount++;\n        \n      } catch (error) {\n        this.errors.push(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –∫—É—Ä—Å–∞ ${currency}: ${error.message}`);\n      }\n    }\n    \n    console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ fallback –∫—É—Ä—Å–æ–≤: ${createdCount}`);\n  }\n\n  /**\n   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏\n   */\n  async validateMigration() {\n    try {\n      console.log('üîç –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...');\n      \n      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞\n      const ordersWithoutCurrency = await P2POrder.countDocuments({\n        currency: { $exists: false }\n      });\n      \n      const ordersWithoutUSD = await P2POrder.countDocuments({\n        pricePerTokenInUSD: { $exists: false }\n      });\n      \n      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–¥–µ–ª–∫–∏\n      const tradesWithoutCurrency = await P2PTrade.countDocuments({\n        currency: { $exists: false }\n      });\n      \n      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n      const activeExchangeRates = await ExchangeRate.countDocuments({\n        isActive: true\n      });\n      \n      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∞—Ç–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã\n      const totalFiatReserves = await FiatReserve.countDocuments({});\n      const activeFiatReserves = await FiatReserve.countDocuments({\n        status: 'reserved'\n      });\n      \n      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');\n      console.log(`  ‚Ä¢ –û—Ä–¥–µ—Ä–∞ –±–µ–∑ –≤–∞–ª—é—Ç—ã: ${ordersWithoutCurrency}`);\n      console.log(`  ‚Ä¢ –û—Ä–¥–µ—Ä–∞ –±–µ–∑ USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞: ${ordersWithoutUSD}`);\n      console.log(`  ‚Ä¢ –°–¥–µ–ª–∫–∏ –±–µ–∑ –≤–∞–ª—é—Ç—ã: ${tradesWithoutCurrency}`);\n      console.log(`  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: ${activeExchangeRates}`);\n      console.log(`  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–∞—Ç–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤: ${totalFiatReserves}`);\n      console.log(`  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã: ${activeFiatReserves}`);\n      \n      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n      if (ordersWithoutCurrency > 0 || tradesWithoutCurrency > 0) {\n        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω–æ—Å—Ç—å—é –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏!');\n      }\n      \n      if (activeExchangeRates < 5) {\n        console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ú–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç');\n      }\n      \n      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\\n');\n      \n    } catch (error) {\n      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: ${error.message}`);\n    }\n  }\n\n  /**\n   * –ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏\n   */\n  printMigrationReport() {\n    console.log('\\nüìã –û–¢–ß–ï–¢ –û –ú–ò–ì–†–ê–¶–ò–ò');\n    console.log('‚ïê'.repeat(50));\n    console.log(`üì¶ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: ${this.stats.migratedOrders}`);\n    console.log(`ü§ù –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–¥–µ–ª–æ–∫: ${this.stats.migratedTrades}`);\n    console.log(`üí∞ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–æ–≤: ${this.stats.migratedReserves}`);\n    console.log(`üí± –°–æ–∑–¥–∞–Ω–æ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: ${this.stats.createdExchangeRates}`);\n    \n    if (this.errors.length > 0) {\n      console.log(`\\n‚ùå –û—à–∏–±–∫–∏ (${this.errors.length}):`);\n      this.errors.forEach((error, index) => {\n        console.log(`  ${index + 1}. ${error}`);\n      });\n    } else {\n      console.log('\\n‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');\n    }\n    \n    console.log('‚ïê'.repeat(50));\n  }\n\n  /**\n   * –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–∞–≤–∞—Ä–∏–π–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)\n   */\n  async rollbackMigration() {\n    try {\n      console.log('üîÑ –í–ù–ò–ú–ê–ù–ò–ï: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');\n      \n      // –£–¥–∞–ª—è–µ–º –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ä–¥–µ—Ä–æ–≤\n      await P2POrder.updateMany(\n        {},\n        {\n          $unset: {\n            currency: '',\n            pricePerTokenInUSD: '',\n            totalValueInUSD: '',\n            exchangeRateAtCreation: ''\n          }\n        }\n      );\n      \n      // –£–¥–∞–ª—è–µ–º –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å–¥–µ–ª–æ–∫\n      await P2PTrade.updateMany(\n        {},\n        {\n          $unset: {\n            currency: '',\n            pricePerTokenInUSD: '',\n            totalValueInUSD: '',\n            exchangeRateAtTrade: ''\n          }\n        }\n      );\n      \n      // –£–¥–∞–ª—è–µ–º —Ñ–∏–∞—Ç–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã\n      await FiatReserve.deleteMany({});\n      \n      // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å —Ä—É–±–ª–µ–≤—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤\n      await RubleReserve.updateMany(\n        { isMigrated: true },\n        {\n          $unset: {\n            isMigrated: '',\n            migratedToFiatReserveId: ''\n          }\n        }\n      );\n      \n      // –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n      await ExchangeRate.deleteMany({});\n      \n      console.log('‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω');\n      \n    } catch (error) {\n      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);\n      throw error;\n    }\n  }\n}\n\n// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é\nif (require.main === module) {\n  const migration = new P2PMigrationService();\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n  const args = process.argv.slice(2);\n  \n  if (args.includes('--rollback')) {\n    console.log('‚ö†Ô∏è –†–ï–ñ–ò–ú –û–¢–ö–ê–¢–ê –ú–ò–ì–†–ê–¶–ò–ò');\n    migration.rollbackMigration()\n      .then(() => {\n        console.log('‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');\n        process.exit(0);\n      })\n      .catch((error) => {\n        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', error);\n        process.exit(1);\n      });\n  } else {\n    migration.runMigration();\n  }\n}\n\nmodule.exports = P2PMigrationService;