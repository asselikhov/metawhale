/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–†–û–¢–°–ö–ò–• –û–†–î–ï–†–û–í
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */

require('dotenv').config();

const { connectDatabase, disconnectDatabase, P2POrder, User } = require('../src/database/models');

async function fixOrphanedOrders() {
  try {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤...');
    
    await connectDatabase();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // 1. –ù–∞–π—Ç–∏ –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ userId
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –û–†–î–ï–†–û–í –ë–ï–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    const ordersWithoutUser = await P2POrder.find({
      userId: { $in: [null, undefined] }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${ordersWithoutUser.length} –æ—Ä–¥–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    let fixedWithoutUser = 0;
    for (const order of ordersWithoutUser) {
      console.log(`üîÑ –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${order._id}`);
      order.status = 'cancelled';
      order.cancelReason = '–û—Ä–¥–µ—Ä –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)';
      order.canceledAt = new Date();
      await order.save();
      fixedWithoutUser++;
    }
    
    // 2. –ù–∞–π—Ç–∏ –æ—Ä–¥–µ—Ä–∞ —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ userId
    console.log('\nüë§ –ü–†–û–í–ï–†–ö–ê –û–†–î–ï–†–û–í –° –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò:');
    const allActiveOrders = await P2POrder.find({
      status: { $in: ['active', 'partial'] },
      userId: { $ne: null }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allActiveOrders.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    let fixedInvalidUser = 0;
    for (const order of allActiveOrders) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const user = await User.findById(order.userId);
        if (!user) {
          console.log(`üîÑ –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${order._id} (userId: ${order.userId})`);
          order.status = 'cancelled';
          order.cancelReason = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)';
          order.canceledAt = new Date();
          await order.save();
          fixedInvalidUser++;
        }
      } catch (error) {
        console.log(`üîÑ –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º userId: ${order._id} (–æ—à–∏–±–∫–∞: ${error.message})`);
        order.status = 'cancelled';
        order.cancelReason = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)';
        order.canceledAt = new Date();
        await order.save();
        fixedInvalidUser++;
      }
    }
    
    // 3. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalFixed = fixedWithoutUser + fixedInvalidUser;
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${fixedWithoutUser}`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤ —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: ${fixedInvalidUser}`);
    console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixed}`);
    
    if (totalFixed === 0) {
      console.log('üéâ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.');
    } else {
      console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
    const remainingActiveOrders = await P2POrder.find({
      status: { $in: ['active', 'partial'] }
    }).populate('userId');
    
    let validOrders = 0;
    let invalidOrders = 0;
    
    for (const order of remainingActiveOrders) {
      if (order.userId && order.userId._id) {
        validOrders++;
      } else {
        invalidOrders++;
        console.log(`‚ö†Ô∏è –í—Å–µ –µ—â–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ä–¥–µ—Ä: ${order._id}`);
      }
    }
    
    console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${validOrders}`);
    console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${invalidOrders}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error);
  } finally {
    await disconnectDatabase();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  fixOrphanedOrders()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { fixOrphanedOrders };