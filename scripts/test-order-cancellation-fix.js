/**
 * Test Order Cancellation Fix
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º —ç—Å–∫—Ä–æ—É
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { User, P2POrder, EscrowTransaction } = require('../src/database/models');
const p2pService = require('../src/services/p2pService');

async function testOrderCancellationFix() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–ú–ï–ù–´ –û–†–î–ï–†–û–í');
    console.log('==========================================');
    
    // Connect to database
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // Test with the same user who had the issue
    const WALLET_ADDRESS = '0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d';
    const user = await User.findOne({ walletAddress: WALLET_ADDRESS });
    
    if (!user) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`\nüë§ –¢–ï–°–¢–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ${user.firstName} (${user.chatId})`);
    
    // Check current balances
    console.log(`\nüí∞ –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´:`);
    console.log(`   - –î–æ—Å—Ç—É–ø–Ω–æ: ${user.cesBalance || 0} CES`);
    console.log(`   - –í —ç—Å–∫—Ä–æ—É: ${user.escrowCESBalance || 0} CES`);
    console.log(`   - –û–±—â–∏–π: ${(user.cesBalance || 0) + (user.escrowCESBalance || 0)} CES`);
    
    // Test the cancellation function logic (without actually creating orders)
    console.log(`\nüîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –§–£–ù–ö–¶–ò–ò cancelOrder:`);
    
    // Test 1: Check if escrowService is properly imported
    try {
      const escrowService = require('../src/services/escrowService');
      console.log('‚úÖ EscrowService —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
      
      // Test refundTokensFromEscrow function signature
      if (typeof escrowService.refundTokensFromEscrow === 'function') {
        console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è refundTokensFromEscrow –¥–æ—Å—Ç—É–ø–Ω–∞');
      } else {
        console.log('‚ùå –§—É–Ω–∫—Ü–∏—è refundTokensFromEscrow –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ EscrowService:', error.message);
    }
    
    // Test 2: Check if rubleReserveService is properly imported
    try {
      const rubleReserveService = require('../src/services/rubleReserveService');
      console.log('‚úÖ RubleReserveService —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
      
      if (typeof rubleReserveService.releaseOrderReserve === 'function') {
        console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è releaseOrderReserve –¥–æ—Å—Ç—É–ø–Ω–∞');
      } else {
        console.log('‚ùå –§—É–Ω–∫—Ü–∏—è releaseOrderReserve –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ RubleReserveService:', error.message);
    }
    
    // Test 3: Look for any orders that could be cancelled to test the fix
    const testableOrders = await P2POrder.find({
      userId: user._id,
      status: { $in: ['active', 'partial'] }
    });
    
    console.log(`\nüìã –¢–ï–°–¢–ò–†–£–ï–ú–´–ï –û–†–î–ï–†–ê:`);
    if (testableOrders.length === 0) {
      console.log('   - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      
      // Look for recently cancelled orders to verify the fix was applied
      const recentCancelledOrders = await P2POrder.find({
        userId: user._id,
        status: 'cancelled',
        updatedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } // Last 24 hours
      });
      
      if (recentCancelledOrders.length > 0) {
        console.log(`\nüìã –ù–ï–î–ê–í–ù–û –û–¢–ú–ï–ù–ï–ù–ù–´–ï –û–†–î–ï–†–ê (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):`);
        for (const order of recentCancelledOrders) {
          console.log(`   ‚Ä¢ ${order.type.toUpperCase()} –æ—Ä–¥–µ—Ä ${order._id}:`);
          console.log(`     - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount} CES`);
          console.log(`     - –ë—ã–ª –≤ —ç—Å–∫—Ä–æ—É: ${order.escrowLocked ? '–î–∞' : '–ù–µ—Ç'}`);
          console.log(`     - –û—Ç–º–µ–Ω–µ–Ω: ${order.updatedAt.toLocaleString('ru-RU')}`);
          
          // Check if there's a corresponding refund transaction
          if (order.escrowLocked && order.escrowAmount > 0) {
            const refundTx = await EscrowTransaction.findOne({
              userId: user._id,
              type: 'refund',
              amount: order.escrowAmount,
              createdAt: { $gte: order.updatedAt }
            });
            
            if (refundTx) {
              console.log(`     ‚úÖ –≠—Å–∫—Ä–æ—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω: ${refundTx.createdAt.toLocaleString('ru-RU')}`);
            } else {
              console.log(`     ‚ùå –≠—Å–∫—Ä–æ—É –ù–ï –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω (—Å—Ç–∞—Ä–∞—è –æ—à–∏–±–∫–∞)`);
            }
          }
        }
      }
    } else {
      console.log(`   - –ù–∞–π–¥–µ–Ω–æ ${testableOrders.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:`);
      testableOrders.forEach((order, index) => {
        console.log(`   ${index + 1}. ${order.type.toUpperCase()} –æ—Ä–¥–µ—Ä ${order._id}:`);
        console.log(`      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount} CES`);
        console.log(`      - –í —ç—Å–∫—Ä–æ—É: ${order.escrowLocked ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —ç—Å–∫—Ä–æ—É: ${order.escrowAmount || 0} CES`);
      });
      
      console.log(`\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è`);
      console.log(`   —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.`);
    }
    
    // Test 4: Verify the updated cancelOrder function code
    console.log(`\nüîß –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê:`);
    try {
      // Read the updated function
      const fs = require('fs');
      const path = require('path');
      const p2pServicePath = path.join(__dirname, '../src/services/p2pService.js');
      const p2pServiceCode = fs.readFileSync(p2pServicePath, 'utf8');
      
      // Check if the fix is present
      const hasEscrowRefund = p2pServiceCode.includes('refundTokensFromEscrow');
      const hasRubleRelease = p2pServiceCode.includes('releaseOrderReserve');
      const hasSellOrderCheck = p2pServiceCode.includes("order.type === 'sell'");
      const hasBuyOrderCheck = p2pServiceCode.includes("order.type === 'buy'");
      
      console.log(`   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —ç—Å–∫—Ä–æ—É –¥–ª—è sell –æ—Ä–¥–µ—Ä–æ–≤: ${hasEscrowRefund ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä—É–±–ª–µ–≤—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤: ${hasRubleRelease ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞ (sell): ${hasSellOrderCheck ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞ (buy): ${hasBuyOrderCheck ? '‚úÖ' : '‚ùå'}`);
      
      if (hasEscrowRefund && hasRubleRelease && hasSellOrderCheck && hasBuyOrderCheck) {
        console.log(`\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û!`);
      } else {
        console.log(`\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: ${error.message}`);
    }
    
    console.log(`\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:`);
    console.log(`   ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞—Å—Ç—Ä—è–≤—à–∏–º–∏ 2 CES —Ç–æ–∫–µ–Ω–∞–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞`);
    console.log(`   ‚úÖ –§—É–Ω–∫—Ü–∏—è cancelOrder –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è`);
    console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —ç—Å–∫—Ä–æ—É –¥–ª—è sell –æ—Ä–¥–µ—Ä–æ–≤`);
    console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä—É–±–ª–µ–≤—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤ –¥–ª—è buy –æ—Ä–¥–µ—Ä–æ–≤`);
    console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüíæ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// Run test
if (require.main === module) {
  testOrderCancellationFix();
}

module.exports = { testOrderCancellationFix };