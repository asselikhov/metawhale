/**
 * Release Expired Smart Contract Escrow Script
 * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —ç—Å–∫—Ä–æ—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { User, EscrowTransaction } = require('../src/database/models');
const { ethers } = require('ethers');

const TARGET_WALLET = '0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d';
const ESCROW_ID = 1; // ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç—Å–∫—Ä–æ—É

async function releaseExpiredSmartEscrow() {
  try {
    console.log('üîì –û–°–í–û–ë–û–ñ–î–ï–ù–ò–ï –ò–°–¢–ï–ö–®–ï–ì–û –°–ú–ê–†–¢-–ö–û–ù–¢–†–ê–ö–¢ –≠–°–ö–†–û–£');
    console.log('===============================================');
    console.log(`üéØ –ö–æ—à–µ–ª–µ–∫: ${TARGET_WALLET}`);
    console.log(`üî¢ –≠—Å–∫—Ä–æ—É ID: ${ESCROW_ID}`);
    console.log('');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ walletAddress: TARGET_WALLET });
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞');
      return;
    }
    
    console.log(`\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ${user.firstName} (${user.chatId})`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const escrowContractAddress = process.env.ESCROW_CONTRACT_ADDRESS;
    const cesTokenAddress = process.env.CES_TOKEN_ADDRESS;
    
    if (!escrowContractAddress || !cesTokenAddress) {
      console.log('‚ùå –ê–¥—Ä–µ—Å–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      return;
    }
    
    console.log(`\nüîß –ù–ê–°–¢–†–û–ô–ö–ò:`);
    console.log(`   - –≠—Å–∫—Ä–æ—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ${escrowContractAddress}`);
    console.log(`   - CES —Ç–æ–∫–µ–Ω: ${cesTokenAddress}`);
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É
    const config = require('../src/config/configuration');
    const provider = new ethers.providers.JsonRpcProvider(config.wallet.polygonRpcUrl);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const walletService = require('../src/services/walletService');
    let userPrivateKey;
    
    try {
      userPrivateKey = await walletService.getUserPrivateKey(user.chatId);
      if (!userPrivateKey) {
        throw new Error('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω');
    } catch (keyError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${keyError.message}`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º wallet –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const userWallet = new ethers.Wallet(userPrivateKey, provider);
    
    console.log(`\nüîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –°–ú–ê–†–¢-–ö–û–ù–¢–†–ê–ö–¢–£:`);
    
    // ABI —ç—Å–∫—Ä–æ—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const escrowAbi = [
      "function getEscrowDetails(uint256 escrowId) external view returns (address seller, address buyer, uint256 amount, uint256 timelock, uint8 status)",
      "function refundEscrow(uint256 escrowId) external"
    ];
    
    // ABI CES —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    const erc20Abi = [
      "function balanceOf(address owner) view returns (uint256)",
      "function decimals() view returns (uint8)"
    ];
    
    const escrowContract = new ethers.Contract(escrowContractAddress, escrowAbi, userWallet);
    const cesContract = new ethers.Contract(cesTokenAddress, erc20Abi, provider);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ —ç—Å–∫—Ä–æ—É
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Å–∫—Ä–æ—É #${ESCROW_ID}...`);
      const escrowDetails = await escrowContract.getEscrowDetails(ESCROW_ID);
      const [seller, buyer, amount, timelock, status] = escrowDetails;
      
      const decimals = await cesContract.decimals();
      const formattedAmount = ethers.utils.formatUnits(amount, decimals);
      const statusNames = ['Active', 'Released', 'Refunded', 'Disputed'];
      const statusName = statusNames[status] || 'Unknown';
      
      console.log(`\nüìã –î–ï–¢–ê–õ–ò –≠–°–ö–†–û–£ #${ESCROW_ID}:`);
      console.log(`   - –ü—Ä–æ–¥–∞–≤–µ—Ü: ${seller}`);
      console.log(`   - –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyer}`);
      console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${formattedAmount} CES`);
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${statusName} (${status})`);
      console.log(`   - Timelock: ${new Date(timelock * 1000).toLocaleString('ru-RU')}`);
      console.log(`   - –ò—Å—Ç–µ–∫: ${Date.now() > timelock * 1000 ? '–î–ê' : '–ù–ï–¢'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (seller.toLowerCase() !== user.walletAddress.toLowerCase()) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ —ç—Ç–æ–º —ç—Å–∫—Ä–æ—É`);
        return;
      }
      
      if (status !== 0) { // –ù–µ Active
        console.log(`‚ùå –≠—Å–∫—Ä–æ—É –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (—Å—Ç–∞—Ç—É—Å: ${statusName})`);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const balanceBefore = await cesContract.balanceOf(user.walletAddress);
      const formattedBalanceBefore = ethers.utils.formatUnits(balanceBefore, decimals);
      
      console.log(`\nüí∞ –ë–ê–õ–ê–ù–° –î–û –û–ü–ï–†–ê–¶–ò–ò: ${formattedBalanceBefore} CES`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–∫–µ–Ω–æ–≤
      console.log(`\nüîÑ –í–´–ü–û–õ–ù–Ø–Æ –í–û–ó–í–†–ê–¢ –¢–û–ö–ï–ù–û–í –ò–ó –≠–°–ö–†–û–£...`);
      
      const tx = await escrowContract.refundEscrow(ESCROW_ID, {
        gasLimit: 150000,
        gasPrice: ethers.utils.parseUnits('30', 'gwei')
      });
      
      console.log(`üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);
      console.log(`‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...`);
      
      const receipt = await tx.wait();
      
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ: ${receipt.blockNumber}`);
      console.log(`‚õΩ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≥–∞–∑–∞: ${receipt.gasUsed.toString()}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const balanceAfter = await cesContract.balanceOf(user.walletAddress);
      const formattedBalanceAfter = ethers.utils.formatUnits(balanceAfter, decimals);
      const difference = parseFloat(formattedBalanceAfter) - parseFloat(formattedBalanceBefore);
      
      console.log(`\nüí∞ –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ü–ï–†–ê–¶–ò–ò:`);
      console.log(`   - –ë–∞–ª–∞–Ω—Å –¥–æ: ${formattedBalanceBefore} CES`);
      console.log(`   - –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: ${formattedBalanceAfter} CES`);
      console.log(`   - –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${difference.toFixed(4)} CES`);
      
      if (difference > 0) {
        console.log(`\nüéâ –£–°–ü–ï–•! –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞!`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
          const refundTx = new EscrowTransaction({
            userId: user._id,
            tradeId: null,
            type: 'refund',
            tokenType: 'CES',
            amount: difference,
            status: 'completed',
            txHash: tx.hash,
            smartContractEscrowId: ESCROW_ID.toString(),
            reason: `–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∏—Å—Ç–µ–∫—à–µ–≥–æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É #${ESCROW_ID}`,
            completedAt: new Date()
          });
          
          await refundTx.save();
          console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î: ${refundTx._id}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
          const updatedUser = await User.findById(user._id);
          updatedUser.cesBalance = parseFloat(formattedBalanceAfter);
          updatedUser.lastBalanceUpdate = new Date();
          await updatedUser.save();
          
          console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –≤ –ë–î: ${updatedUser.cesBalance} CES`);
          
        } catch (dbError) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î (—Ç–æ–∫–µ–Ω—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã): ${dbError.message}`);
        }
        
      } else {
        console.log(`‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —ç—Å–∫—Ä–æ—É.`);
      }
      
    } catch (contractError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º: ${contractError.message}`);
      
      if (contractError.message.includes('EscrowNotExpired')) {
        console.log(`üí° –≠—Å–∫—Ä–æ—É –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
      } else if (contractError.message.includes('UnauthorizedAccess')) {
        console.log(`üí° –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.`);
      } else if (contractError.message.includes('InvalidEscrowStatus')) {
        console.log(`üí° –≠—Å–∫—Ä–æ—É –Ω–µ –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  releaseExpiredSmartEscrow().catch(console.error);
}

module.exports = { releaseExpiredSmartEscrow };