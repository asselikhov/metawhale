/**
 * –ë—ã—Å—Ç—Ä–∞—è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≠—Å–∫—Ä–æ—É
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç—Å–∫—Ä–æ—É –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
 */

require('dotenv').config();

const { connectDatabase, disconnectDatabase } = require('../src/database/models');

async function quickEscrowCheck() {
  try {
    console.log('üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –≠–°–ö–†–û–£');
    console.log('=====================================');
    
    await connectDatabase();
    
    const { EscrowTransaction, P2PTrade, User } = require('../src/database/models');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Å–∫—Ä–æ—É
    console.log('\nüìä 1. –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–´–• –≠–°–ö–†–û–£:');
    
    const activeEscrows = await EscrowTransaction.find({
      type: 'lock',
      status: 'completed',
      smartContractEscrowId: { $exists: true, $ne: null }
    }).populate('userId', 'chatId username firstName');
    
    console.log(`   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Å–∫—Ä–æ—É: ${activeEscrows.length}`);
    
    if (activeEscrows.length > 0) {
      console.log('   –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Å–∫—Ä–æ—É:');
      for (const escrow of activeEscrows.slice(0, 5)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        const refund = await EscrowTransaction.findOne({
          tradeId: escrow.tradeId,
          type: 'refund',
          smartContractEscrowId: escrow.smartContractEscrowId
        });
        
        const status = refund ? '‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω' : '‚ö†Ô∏è –ê–∫—Ç–∏–≤–µ–Ω';
        console.log(`   - ID ${escrow.smartContractEscrowId}: ${escrow.amount} CES, ${status}`);
        console.log(`     –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${escrow.userId?.chatId || 'Unknown'} (${escrow.userId?.username || escrow.userId?.firstName || 'N/A'})`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${escrow.createdAt.toISOString()}`);
      }
      
      if (activeEscrows.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${activeEscrows.length - 5} —ç—Å–∫—Ä–æ—É`);
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö —Å–¥–µ–ª–æ–∫
    console.log('\nüïê 2. –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–®–ò–• –°–î–ï–õ–û–ö:');
    
    const stuckTrades = await P2PTrade.find({
      status: { $in: ['escrow_locked', 'payment_pending'] },
      'timeTracking.createdAt': { $lt: new Date(Date.now() - 60 * 60 * 1000) } // –°—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
    }).populate('sellerId buyerId', 'chatId username firstName');
    
    console.log(`   –ó–∞–≤–∏—Å—à–∏—Ö —Å–¥–µ–ª–æ–∫: ${stuckTrades.length}`);
    
    if (stuckTrades.length > 0) {
      console.log('   –î–µ—Ç–∞–ª–∏ –∑–∞–≤–∏—Å—à–∏—Ö —Å–¥–µ–ª–æ–∫:');
      for (const trade of stuckTrades) {
        const age = Math.round((Date.now() - trade.timeTracking.createdAt.getTime()) / (60 * 1000));
        console.log(`   - –°–¥–µ–ª–∫–∞ ${trade._id}: ${trade.amount} CES, –≤–æ–∑—Ä–∞—Å—Ç ${age} –º–∏–Ω`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${trade.status}, –ü—Ä–æ–¥–∞–≤–µ—Ü: ${trade.sellerId?.chatId}`);
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –æ —Ä—É—á–Ω–æ–º –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ
    console.log('\nüõ†Ô∏è 3. –ó–ê–ü–ò–°–ò –û –†–£–ß–ù–û–ú –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–ï:');
    
    const manualInterventions = await EscrowTransaction.find({
      type: { $in: ['manual_intervention_required', 'timeout_intervention_required'] },
      status: 'pending'
    }).populate('userId', 'chatId username firstName');
    
    console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω—ã—Ö –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤: ${manualInterventions.length}`);
    
    if (manualInterventions.length > 0) {
      console.log('   –î–µ—Ç–∞–ª–∏:');
      for (const intervention of manualInterventions) {
        console.log(`   - ${intervention.type}: ${intervention.amount} CES`);
        console.log(`     –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${intervention.userId?.chatId} (${intervention.userId?.username || intervention.userId?.firstName || 'N/A'})`);
        console.log(`     –ü—Ä–∏—á–∏–Ω–∞: ${intervention.reason}`);
        console.log(`     –°–æ–∑–¥–∞–Ω–æ: ${intervention.createdAt.toISOString()}`);
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Å–∫—Ä–æ—É –±–∞–ª–∞–Ω—Å–∞–º–∏
    console.log('\nüë• 4. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –≠–°–ö–†–û–£ –ë–ê–õ–ê–ù–°–ê–ú–ò:');
    
    const usersWithEscrow = await User.find({
      escrowCESBalance: { $gt: 0 }
    }, 'chatId username firstName escrowCESBalance cesBalance walletAddress').limit(10);
    
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Å–∫—Ä–æ—É: ${usersWithEscrow.length}`);
    
    if (usersWithEscrow.length > 0) {
      console.log('   –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç—Å–∫—Ä–æ—É:');
      for (const user of usersWithEscrow) {
        console.log(`   - ${user.chatId} (${user.username || user.firstName || 'N/A'}): ${user.escrowCESBalance} CES –≤ —ç—Å–∫—Ä–æ—É`);
        console.log(`     –î–æ—Å—Ç—É–ø–Ω–æ: ${user.cesBalance} CES, –ö–æ—à–µ–ª–µ–∫: ${user.walletAddress?.slice(0, 10)}...`);
      }
    }
    
    // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    console.log('\nüìà 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 24 –ß–ê–°–ê:');
    
    const last24h = new Date(Date.now() - 24 * 60 * 60 * 1000);
    
    const stats = {
      newEscrows: await EscrowTransaction.countDocuments({
        type: 'lock',
        createdAt: { $gte: last24h }
      }),
      refunds: await EscrowTransaction.countDocuments({
        type: 'refund',
        createdAt: { $gte: last24h }
      }),
      completedTrades: await P2PTrade.countDocuments({
        status: 'completed',
        'timeTracking.completedAt': { $gte: last24h }
      }),
      cancelledTrades: await P2PTrade.countDocuments({
        status: 'cancelled',
        'timeTracking.createdAt': { $gte: last24h }
      })
    };
    
    console.log(`   –ù–æ–≤—ã—Ö —ç—Å–∫—Ä–æ—É: ${stats.newEscrows}`);
    console.log(`   –í–æ–∑–≤—Ä–∞—Ç–æ–≤: ${stats.refunds}`);
    console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${stats.completedTrades}`);
    console.log(`   –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${stats.cancelledTrades}`);
    
    // 6. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüè• 6. –û–¶–ï–ù–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´:');
    
    let healthScore = 100;
    const issues = [];
    
    if (stuckTrades.length > 0) {
      healthScore -= stuckTrades.length * 10;
      issues.push(`${stuckTrades.length} –∑–∞–≤–∏—Å—à–∏—Ö —Å–¥–µ–ª–æ–∫`);
    }
    
    if (manualInterventions.length > 0) {
      healthScore -= manualInterventions.length * 15;
      issues.push(`${manualInterventions.length} —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞`);
    }
    
    const unresolvedEscrows = activeEscrows.filter(async escrow => {
      const refund = await EscrowTransaction.findOne({
        tradeId: escrow.tradeId,
        type: 'refund',
        smartContractEscrowId: escrow.smartContractEscrowId
      });
      return !refund;
    });
    
    if (unresolvedEscrows.length > 5) {
      healthScore -= (unresolvedEscrows.length - 5) * 5;
      issues.push(`${unresolvedEscrows.length} –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö —ç—Å–∫—Ä–æ—É`);
    }
    
    healthScore = Math.max(0, healthScore);
    
    if (healthScore >= 90) {
      console.log(`   üü¢ –û–¢–õ–ò–ß–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ (${healthScore}/100)`);
    } else if (healthScore >= 70) {
      console.log(`   üü° –•–û–†–û–®–ï–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ (${healthScore}/100)`);
    } else if (healthScore >= 50) {
      console.log(`   üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ (${healthScore}/100)`);
    } else {
      console.log(`   üî¥ –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø (${healthScore}/100)`);
    }
    
    if (issues.length > 0) {
      console.log('   –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
      issues.forEach(issue => console.log(`   - ${issue}`));
    } else {
      console.log('   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
    
    // 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° 7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    
    if (healthScore < 70) {
      console.log('   üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
      if (manualInterventions.length > 0) {
        console.log('   - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏ –æ —Ä—É—á–Ω–æ–º –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ');
      }
      if (stuckTrades.length > 0) {
        console.log('   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å—à–∏–µ —Å–¥–µ–ª–∫–∏');
      }
    }
    
    console.log('   üìÖ –†–ï–ì–£–õ–Ø–†–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
    console.log('   - –ó–∞–ø—É—Å–∫–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ');
    console.log('   - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç—Å–∫—Ä–æ—É');
    
    if (usersWithEscrow.length > 20) {
      console.log('   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —ç—Å–∫—Ä–æ—É (–º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)');
    }
    
    await disconnectDatabase();
    
    console.log('\n‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
    await disconnectDatabase();
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  quickEscrowCheck()
    .then(() => {
      console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', error);
      process.exit(1);
    });
}

module.exports = { quickEscrowCheck };