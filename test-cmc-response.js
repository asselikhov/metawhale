// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ CoinMarketCap API
require('dotenv').config();
const axios = require('axios');

async function testCMCResponse() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ CoinMarketCap API...\n');
  
  try {
    if (!process.env.CMC_API_KEY) {
      console.log('‚ùå CMC API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ CoinMarketCap...');
    
    const response = await axios.get(
      'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest',
      {
        headers: {
          'X-CMC_PRO_API_KEY': process.env.CMC_API_KEY,
          'Accept': 'application/json'
        },
        params: {
          id: '36465', // ID –¥–ª—è Whalebit (CES) –Ω–∞ Polygon
          convert: 'USD'
        },
        timeout: 10000
      }
    );

    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
    
    if (response.data && response.data.data && response.data.data['36465']) {
      const cesData = response.data.data['36465'];
      const quote = cesData.quote.USD;
      
      console.log('\nüìä –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:');
      console.log('='.repeat(50));
      console.log(JSON.stringify(cesData, null, 2));
      console.log('='.repeat(50));
      
      console.log('\nüí∞ –¶–ï–ù–ê –ò ATH:');
      console.log(`–¶–µ–Ω–∞: $${quote.price}`);
      console.log(`ATH –≤ –æ—Ç–≤–µ—Ç–µ: ${quote.ath ? `$${quote.ath}` : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`–í—Å–µ –∫–ª—é—á–∏ –≤ quote.USD:`, Object.keys(quote));
      
      console.log('\nüîç –ü–†–û–í–ï–†–ö–ê ATH:');
      if (quote.ath) {
        console.log(`‚úÖ ATH –¥–æ—Å—Ç—É–ø–µ–Ω: $${quote.ath}`);
      } else {
        console.log(`‚ùå ATH –ù–ï –î–û–°–¢–£–ü–ï–ù –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ`);
        console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫–∞–∫ ATH: $${quote.price}`);
      }
      
      console.log('\nüí± –í–ê–õ–Æ–¢–ù–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø:');
      console.log(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ:`, Object.keys(cesData.quote));
      console.log(`RUB –≤ –æ—Ç–≤–µ—Ç–µ: ${cesData.quote.RUB ? '–î–ê' : '–ù–ï–¢'}`);
      
      if (!cesData.quote.RUB) {
        console.log(`‚ùå –†—É–±–ª–∏ –ù–ï –î–û–°–¢–£–ü–ù–´ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ`);
        console.log(`üí° –ù—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USD ‚Üí RUB`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.log('HTTP Status:', error.response.status);
      console.log('Response:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCMCResponse().catch(console.error);