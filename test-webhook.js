const axios = require('axios');
require('dotenv').config();

async function testWebhook() {
  const webhookUrl = process.env.WEBHOOK_URL || 'https://metawhale.onrender.com';
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...\n');
  
  try {
    // –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint...');
    const mainResponse = await axios.get(webhookUrl, { timeout: 10000 });
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π endpoint:', mainResponse.data);
    
    // –¢–µ—Å—Ç ping endpoint
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ ping endpoint...');
    const pingResponse = await axios.get(`${webhookUrl}/ping`, { timeout: 10000 });
    console.log('‚úÖ Ping endpoint:', pingResponse.data);
    
    // –¢–µ—Å—Ç health endpoint
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...');
    const healthResponse = await axios.get(`${webhookUrl}/health`, { timeout: 10000 });
    console.log('‚úÖ Health endpoint:', healthResponse.data);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook Telegram
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Telegram...');
    const webhookInfoResponse = await axios.get(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getWebhookInfo`
    );
    
    const webhookInfo = webhookInfoResponse.data.result;
    console.log('üì° Webhook Info:');
    console.log(`   URL: ${webhookInfo.url}`);
    console.log(`   Pending updates: ${webhookInfo.pending_update_count}`);
    console.log(`   Last error: ${webhookInfo.last_error_message || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}`);
    console.log(`   Last error date: ${webhookInfo.last_error_date ? new Date(webhookInfo.last_error_date * 1000) : '–ù–∏–∫–æ–≥–¥–∞'}`);
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ Render');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testWebhook();