/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é, –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
 */

const { Markup } = require('telegraf');

// –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const mockLanguageService = {
  getText: async (chatId, key) => {
    const translations = {
      'ru': {
        'main_menu': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !',
        'personal_cabinet': '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        'p2p': 'üîÑ P2P –ë–∏—Ä–∂–∞'
      }
    };
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    return translations['ru'][key] || key;
  },
  setUserLanguage: async (chatId, languageCode) => {
    console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${languageCode}`);
    return true;
  },
  getUserLanguage: async (chatId) => {
    return 'ru';
  }
};

// –ú–æ–∫–∞–µ–º LocalizationHelper
const mockLocalizationHelper = {
  getText: mockLanguageService.getText,
  getUserLanguage: mockLanguageService.getUserLanguage,
  setUserLanguage: mockLanguageService.setUserLanguage,
  getLocalizedMainMenu: async (chatId) => {
    // –°–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏:
    // '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' –∏ 'üîÑ P2P –ë–∏—Ä–∂–∞'
    const personalCabinet = await mockLanguageService.getText(chatId, 'personal_cabinet');
    const p2p = await mockLanguageService.getText(chatId, 'p2p');
    
    return [
      [personalCabinet, p2p]
    ];
  }
};

// –ú–æ–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
const mockWalletHandler = {
  handlePersonalCabinetText: async (ctx) => {
    console.log('üè† –í—ã–∑–æ–≤ handlePersonalCabinetText –≤ WalletHandler');
    return await ctx.reply('üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
};

const mockP2PHandler = {
  handleP2PMenu: async (ctx) => {
    console.log('üîÑ –í—ã–∑–æ–≤ handleP2PMenu –≤ P2PHandler');
    return await ctx.reply('üîÑ –ú–µ–Ω—é P2P –ë–∏—Ä–∂–∏');
  }
};

// –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockCtx = {
  chat: {
    id: 'test_user_full_cycle',
    username: 'testuser'
  },
  message: {
    text: ''
  },
  reply: async (message, keyboard) => {
    console.log(`\nü§ñ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
    
    if (keyboard && keyboard.reply_markup && keyboard.reply_markup.keyboard) {
      console.log('   –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:');
      keyboard.reply_markup.keyboard.forEach((row, index) => {
        console.log(`     –†—è–¥ ${index + 1}: [${row.map(btn => `"${btn}"`).join(', ')}]`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
      const totalButtons = keyboard.reply_markup.keyboard.reduce((acc, row) => acc + row.length, 0);
      console.log(`   –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: ${totalButtons}`);
    } else if (keyboard) {
      console.log(`   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:`, JSON.stringify(keyboard, null, 2));
    }
    
    return { message_id: 1001 };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è BaseCommandHandler)
async function handleTextMessage(text) {
  console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: "${text}" ---`);
  mockCtx.message.text = text;
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ BaseCommandHandler
  if (text.includes('–õ–ö') || text.includes('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç') || text.includes('üë§')) {
    console.log('‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"');
    return await mockWalletHandler.handlePersonalCabinetText(mockCtx);
  }
  
  if (text.includes('P2P –ë–∏—Ä–∂–∞') || text.includes('üîÑ P2P') || text.includes('P2P')) {
    console.log('‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "üîÑ P2P –ë–∏—Ä–∂–∞"');
    return await mockP2PHandler.handleP2PMenu(mockCtx);
  }
  
  console.log('‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
  return await mockCtx.reply('üòï –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∏–º–∏—Ç–∞—Ü–∏—è handleBackToMenu)
async function showMainMenu() {
  console.log('\n--- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---');
  
  try {
    const chatId = mockCtx.chat.id.toString();
    const mainMenu = Markup.keyboard(
      await mockLocalizationHelper.getLocalizedMainMenu(chatId)
    ).resize();
    
    const welcomeMessage = await mockLanguageService.getText(chatId, 'main_menu');
    return await mockCtx.reply(welcomeMessage, mainMenu);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
    return await mockCtx.reply('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ (–∏–º–∏—Ç–∞—Ü–∏—è handleLanguageSelected)
async function changeLanguage(languageCode) {
  console.log(`\n--- –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –Ω–∞: ${languageCode} ---`);
  
  try {
    const chatId = mockCtx.chat.id.toString();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await mockLanguageService.setUserLanguage(chatId, languageCode);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
    const mainMenu = Markup.keyboard(
      await mockLocalizationHelper.getLocalizedMainMenu(chatId)
    ).resize();
    
    const welcomeMessage = await mockLanguageService.getText(chatId, 'main_menu');
    return await mockCtx.reply(`‚úÖ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${languageCode}`, mainMenu);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞:', error);
    return await mockCtx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞.');
  }
}

async function runFullCycleTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é...\n');
  
  console.log('–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:');
  console.log('- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !"');
  console.log('- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
  console.log('- –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"');
  console.log('- –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞: "üîÑ P2P –ë–∏—Ä–∂–∞"');
  console.log('- –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n');
  
  try {
    // –¢–µ—Å—Ç 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    console.log('–¢–µ—Å—Ç 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
    await showMainMenu();
    
    // –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    console.log('\n–¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"');
    await handleTextMessage('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç');
    
    // –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîÑ P2P –ë–∏—Ä–∂–∞"
    console.log('\n–¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîÑ P2P –ë–∏—Ä–∂–∞"');
    await handleTextMessage('üîÑ P2P –ë–∏—Ä–∂–∞');
    
    // –¢–µ—Å—Ç 4: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    console.log('\n–¢–µ—Å—Ç 4: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    await showMainMenu();
    
    // –¢–µ—Å—Ç 5: –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é
    console.log('\n–¢–µ—Å—Ç 5: –°–º–µ–Ω–∞ —è–∑—ã–∫–∞');
    await changeLanguage('ru');
    
    // –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    console.log('\n–¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤');
    await handleTextMessage('–õ–ö');
    await handleTextMessage('P2P');
    
    // –¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    console.log('\n–¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã');
    await handleTextMessage('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    
    console.log(`\n${'='.repeat(70)}`);
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ–≤–Ω–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏');
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" –∏ "üîÑ P2P –ë–∏—Ä–∂–∞" —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –º–µ–Ω—é —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log(`${'='.repeat(70)}`);
    
    return true;
    
  } catch (error) {
    console.error('üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  runFullCycleTest().then((success) => {
    console.log('\nüèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(success ? 0 : 1);
  }).catch((error) => {
    console.error('üí• –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
}

module.exports = { runFullCycleTest };