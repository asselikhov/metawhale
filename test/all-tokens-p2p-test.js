/**
 * –¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç–æ–∫–µ–Ω–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
 */

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç–æ–∫–µ–Ω–æ–≤ —Å P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π...\n');

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
const ALL_TOKENS = [
  'CES', 'POL', 'TRX', 'BNB', 'SOL', 'ETH', 'ARB', 'AVAX', 
  'USDT', 'USDC', 'BUSD', 'TON', 'NOT'
];

async function testTokenCommand(tokenSymbol) {
  try {
    const priceService = require('../src/services/priceService');
    const BaseCommandHandler = require('../src/handlers/BaseCommandHandler');
    
    const handler = new BaseCommandHandler();
    const tokenConfig = handler.getTokenDisplayConfig(tokenSymbol);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
    let priceData;
    const methodName = `get${tokenSymbol}Price`;
    
    if (typeof priceService[methodName] === 'function') {
      priceData = await priceService[methodName]();
    } else {
      console.log(`   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ ${methodName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return { skipped: true };
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
    const changeEmoji = priceData.change24h >= 0 ? 'üî∫' : 'üîª';
    const changeSign = priceData.change24h >= 0 ? '+' : '';
    
    let volumeDisplay = '';
    if (priceData.volume24h) {
      volumeDisplay = ` ‚Ä¢ üÖ• $ ${priceService.formatNumber(priceData.volume24h)}`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
    let expectedMessage;
    if (tokenSymbol === 'CES') {
      expectedMessage = `–¢–æ—Ä–≥—É–π CES —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ  
P2P –ë–∏—Ä–∂–∞: –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ ‚ÇΩ`;
    } else {
      expectedMessage = `–¢–æ—Ä–≥—É–π ${tokenSymbol} —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ  
P2P –ë–∏—Ä–∂–∞: –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ ‚ÇΩ`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    const checks = {
      hasEmoji: tokenConfig.emoji !== undefined,
      hasCorrectTokenName: expectedMessage.includes(`–¢–æ—Ä–≥—É–π ${tokenSymbol}`),
      hasP2PInfo: expectedMessage.includes('P2P –ë–∏—Ä–∂–∞'),
      hasPurchaseText: expectedMessage.includes('–ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ ‚ÇΩ')
    };
    
    return {
      token: tokenSymbol,
      emoji: tokenConfig.emoji,
      price: priceData.price,
      expectedMessage,
      checks,
      success: Object.values(checks).every(check => check === true)
    };
    
  } catch (error) {
    return {
      token: tokenSymbol,
      error: error.message,
      success: false
    };
  }
}

async function runAllTokensTest() {
  console.log('üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –í–°–ï –∫–æ–º–∞–Ω–¥—ã —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
  console.log(`üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º ${ALL_TOKENS.length} —Ç–æ–∫–µ–Ω–æ–≤: ${ALL_TOKENS.join(', ')}\n`);
  
  const results = [];
  
  for (const token of ALL_TOKENS) {
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É /${token.toLowerCase()}...`);
    
    try {
      const result = await testTokenCommand(token);
      results.push(result);
      
      if (result.skipped) {
        console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω)`);
      } else if (result.success) {
        console.log(`   ‚úÖ –£—Å–ø–µ—Ö: ${result.emoji} –¢–æ—Ä–≥—É–π ${token}`);
      } else if (result.error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      } else {
        console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫`);
        Object.entries(result.checks).forEach(([check, passed]) => {
          console.log(`      ${passed ? '‚úÖ' : '‚ùå'} ${check}`);
        });
      }
    } catch (error) {
      console.log(`   üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      results.push({
        token,
        error: error.message,
        success: false
      });
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success && !r.skipped);
  const skipped = results.filter(r => r.skipped);
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful.length}/${ALL_TOKENS.length}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed.length}/${ALL_TOKENS.length}`);
  console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped.length}/${ALL_TOKENS.length}`);
  
  if (successful.length > 0) {
    console.log('\n‚úÖ –£–°–ü–ï–®–ù–´–ï –ö–û–ú–ê–ù–î–´:');
    successful.forEach(result => {
      console.log(`   ${result.emoji} /${result.token.toLowerCase()} - "–¢–æ—Ä–≥—É–π ${result.token} —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ"`);
    });
  }
  
  if (failed.length > 0) {
    console.log('\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´:');
    failed.forEach(result => {
      console.log(`   /${result.token.toLowerCase()} - ${result.error || '–ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã'}`);
    });
  }
  
  if (skipped.length > 0) {
    console.log('\n‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´:');
    skipped.forEach(result => {
      console.log(`   /${result.token.toLowerCase()} - –ú–µ—Ç–æ–¥ —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    });
  }
  
  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  console.log('\nüì± –ü–†–ò–ú–ï–†–´ –°–û–û–ë–©–ï–ù–ò–ô:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞
  successful.slice(0, 3).forEach(result => {
    console.log(`\nüî∏ –ö–æ–º–∞–Ω–¥–∞ /${result.token.toLowerCase()}:`);
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log(`‚îÇ ${result.emoji} –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ ${result.token}: $ ${result.price.toFixed(2)} | ‚ÇΩ XXX.XX ‚îÇ`);
    console.log('‚îÇ ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ                                         ‚îÇ');
    console.log('‚îÇ üîª -X.X% ‚Ä¢ üÖ• $ XXX.XM                                  ‚îÇ');
    console.log('‚îÇ                                                         ‚îÇ');
    console.log(`‚îÇ –¢–æ—Ä–≥—É–π ${result.token} —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ                           ‚îÇ`);
    console.log('‚îÇ P2P –ë–∏—Ä–∂–∞: –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ ‚ÇΩ                       ‚îÇ');
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  });
  
  const overallSuccess = failed.length === 0;
  
  if (overallSuccess) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
    console.log('üöÄ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–∫–µ–Ω–æ–≤ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!');
  } else {
    console.log('\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!');
    console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
  
  return overallSuccess;
}

if (require.main === module) {
  runAllTokensTest()
    .then((success) => {
      console.log(`\n${success ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω`);
      process.exit(success ? 0 : 1);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
      process.exit(1);
    });
}

module.exports = { runAllTokensTest };