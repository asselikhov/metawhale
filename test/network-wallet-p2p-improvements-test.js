/**
 * –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–µ–π –∏ P2P –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–≤–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * 1. –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
 * 2. P2P –º–µ–Ω—é —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
 */

console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–µ–π –∏ P2P...\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ WalletHandler —É–ª—É—á—à–µ–Ω–∏–π
try {
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π WalletHandler...');
  const WalletHandler = require('../src/handlers/WalletHandler');
  const handler = new WalletHandler();
  console.log('   ‚úÖ WalletHandler –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏
  const networkMethods = [
    'handleSwitchNetwork',
    'handleNetworkSwitch'
  ];
  
  for (const method of networkMethods) {
    if (typeof handler[method] === 'function') {
      console.log(`   ‚úÖ ${method} –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω`);
    } else {
      console.log(`   ‚ùå ${method} –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ WalletHandler:', error.message);
  // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ P2PHandler —É–ª—É—á—à–µ–Ω–∏–π
try {
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π P2PHandler...');
  const P2PHandler = require('../src/handlers/P2PHandler');
  const handler = new P2PHandler();
  console.log('   ‚úÖ P2PHandler –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ P2P –º–µ–Ω—é
  if (typeof handler.handleP2PMenu === 'function') {
    console.log('   ‚úÖ handleP2PMenu –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
  } else {
    console.log('   ‚ùå handleP2PMenu –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
  const tokenMethods = [
    'handleP2PTokenSelect',
    'handleP2PBuyToken',
    'handleP2PSellToken'
  ];
  
  for (const method of tokenMethods) {
    if (typeof handler[method] === 'function') {
      console.log(`   ‚úÖ ${method} –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω`);
    } else {
      console.log(`   ‚ùå ${method} –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ P2PHandler:', error.message);
  // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ multiChainWalletService
try {
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ multiChainWalletService...');
  const multiChainWalletService = require('../src/services/multiChainWalletService');
  console.log('   ‚úÖ multiChainWalletService –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ
  if (typeof multiChainWalletService.getMultiChainWalletInfo === 'function') {
    console.log('   ‚úÖ getMultiChainWalletInfo –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω');
  } else {
    console.log('   ‚ùå getMultiChainWalletInfo –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ multiChainWalletService:', error.message);
  // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ userNetworkService
try {
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ userNetworkService...');
  const userNetworkService = require('../src/services/userNetworkService');
  console.log('   ‚úÖ userNetworkService –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç—è–º–∏
  const networkServiceMethods = [
    'getUserNetwork',
    'setUserNetwork', 
    'canSwitchToNetwork',
    'getNetworkInfo',
    'recordNetworkSwitch'
  ];
  
  for (const method of networkServiceMethods) {
    if (typeof userNetworkService[method] === 'function') {
      console.log(`   ‚úÖ ${method} –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω`);
    } else {
      console.log(`   ‚ùå ${method} –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ userNetworkService:', error.message);
  // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ multiChainService
try {
  console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ multiChainService...');
  const multiChainService = require('../src/services/multiChainService');
  console.log('   ‚úÖ multiChainService –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—è–º–∏
  const multiChainMethods = [
    'getNetworkDisplayName',
    'getNetworkEmoji',
    'getNetworkTokens',
    'getNetworkConfig',
    'getNetworks',
    'getNetworkSelectorButtons'
  ];
  
  for (const method of multiChainMethods) {
    if (typeof multiChainService[method] === 'function') {
      console.log(`   ‚úÖ ${method} –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω`);
    } else {
      console.log(`   ‚ùå ${method} –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ multiChainService:', error.message);
  // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
}

// 6. –°–∏–º—É–ª—è—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
try {
  console.log('\n6Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏
  console.log('   üì± –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏');
  const userNetworkService = require('../src/services/userNetworkService');
  const multiChainService = require('../src/services/multiChainService');
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  const testChatId = 'test_user_123';
  const currentNetwork = await userNetworkService.getUserNetwork(testChatId);
  console.log(`   üåê –¢–µ–∫—É—â–∞—è —Å–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentNetwork}`);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
  const networkInfo = await userNetworkService.getNetworkInfo(testChatId);
  console.log(`   üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏: ${networkInfo}`);
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è P2P
  console.log('\n   üí∞ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è P2P');
  const P2PHandler = require('../src/handlers/P2PHandler');
  const p2pHandler = new P2PHandler();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
  const networks = ['polygon', 'tron', 'bsc', 'solana', 'arbitrum', 'avalanche'];
  for (const networkId of networks) {
    try {
      const networkTokens = multiChainService.getNetworkTokens(networkId);
      const networkName = multiChainService.getNetworkDisplayName(networkId);
      const networkEmoji = multiChainService.getNetworkEmoji(networkId);
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è P2P
      const tradableTokens = Object.keys(networkTokens).filter(token => 
        p2pHandler.shouldShowTokenForTrading(networkId, token)
      );
      
      console.log(`   ${networkEmoji} ${networkName}: ${tradableTokens.length} —Ç–æ—Ä–≥—É–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (${tradableTokens.join(', ')})`);
    } catch (netError) {
      console.log(`   ‚ö†Ô∏è ${networkId}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤`);
    }
  }
  
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:', error.message);
  // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
}

console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

console.log('\nüìã –†–µ–∑—é–º–µ —É–ª—É—á—à–µ–Ω–∏–π:');
console.log('   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ—à–µ–ª—å–∫–∞');
console.log('   ‚úÖ –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ');
console.log('   ‚úÖ P2P –º–µ–Ω—é –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä–µ —Ç–æ–∫–µ–Ω–∞');
console.log('   ‚úÖ –ß–µ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å "–ö–ê–ö–£–Æ –ú–û–ù–ï–¢–£ –í–´ –•–û–¢–ò–¢–ï –¢–û–†–ì–û–í–ê–¢–¨?"');
console.log('   ‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏');
console.log('   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã');

console.log('\nüöÄ –£–ª—É—á—à–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
process.exit(0);