/**
 * ะขะตัั ะบะพะผะฐะฝะด ัะตะฝ ะฒัะตั ัะพะบะตะฝะพะฒ
 * ะัะพะฒะตััะตั ัะฐะฑะพัั ะฒัะตั ะบะพะผะฐะฝะด ัะธะฟะฐ /ces, /pol, /ton ะธ ั.ะด.
 */

console.log('๐ฐ ะขะตััะธัะพะฒะฐะฝะธะต ะบะพะผะฐะฝะด ัะตะฝ ะฒัะตั ัะพะบะตะฝะพะฒ...\n');

// 1. ะัะพะฒะตัะบะฐ BaseCommandHandler
try {
  console.log('1๏ธโฃ ะขะตััะธัะพะฒะฐะฝะธะต BaseCommandHandler...');
  const BaseCommandHandler = require('../src/handlers/BaseCommandHandler');
  const handler = new BaseCommandHandler();
  console.log('   โ BaseCommandHandler ะทะฐะณััะถะตะฝ ะฑะตะท ะพัะธะฑะพะบ');
  
  // ะัะพะฒะตัะบะฐ ะผะตัะพะดะฐ handlePrice
  if (typeof handler.handlePrice === 'function') {
    console.log('   โ handlePrice ะผะตัะพะด ะดะพัััะฟะตะฝ');
  } else {
    console.log('   โ handlePrice ะผะตัะพะด ะฝะต ะฝะฐะนะดะตะฝ');
  }
  
  // ะัะพะฒะตัะบะฐ ะผะตัะพะดะฐ getTokenDisplayConfig
  if (typeof handler.getTokenDisplayConfig === 'function') {
    console.log('   โ getTokenDisplayConfig ะผะตัะพะด ะดะพัััะฟะตะฝ');
  } else {
    console.log('   โ getTokenDisplayConfig ะผะตัะพะด ะฝะต ะฝะฐะนะดะตะฝ');
  }
} catch (error) {
  console.error('   โ ะัะธะฑะบะฐ ะฒ BaseCommandHandler:', error.message);
}

// 2. ะัะพะฒะตัะบะฐ priceService ะผะตัะพะดะพะฒ
try {
  console.log('\n2๏ธโฃ ะขะตััะธัะพะฒะฐะฝะธะต priceService ะผะตัะพะดะพะฒ...');
  const priceService = require('../src/services/priceService');
  console.log('   โ priceService ะทะฐะณััะถะตะฝ ะฑะตะท ะพัะธะฑะพะบ');
  
  // ะกะฟะธัะพะบ ะฒัะตั ะฟะพะดะดะตัะถะธะฒะฐะตะผัั ัะพะบะตะฝะพะฒ
  const supportedTokens = [
    'CES', 'POL', 'TRX', 'BNB', 'SOL', 'ETH', 'ARB', 'AVAX', 
    'USDT', 'USDC', 'BUSD', 'TON', 'NOT'
  ];
  
  supportedTokens.forEach(token => {
    const methodName = `get${token}Price`;
    if (typeof priceService[methodName] === 'function') {
      console.log(`   โ ${methodName} ะผะตัะพะด ะดะพัััะฟะตะฝ`);
    } else {
      console.log(`   โ ${methodName} ะผะตัะพะด ะฝะต ะฝะฐะนะดะตะฝ`);
    }
  });
  
} catch (error) {
  console.error('   โ ะัะธะฑะบะฐ ะฒ priceService:', error.message);
}

// 3. ะัะพะฒะตัะบะฐ messageHandler
try {
  console.log('\n3๏ธโฃ ะขะตััะธัะพะฒะฐะฝะธะต messageHandler...');
  const messageHandler = require('../src/handlers/messageHandler');
  const handler = new messageHandler();
  console.log('   โ messageHandler ะทะฐะณััะถะตะฝ ะฑะตะท ะพัะธะฑะพะบ');
  
  // ะัะพะฒะตัะบะฐ ะผะตัะพะดะฐ handlePrice
  if (typeof handler.handlePrice === 'function') {
    console.log('   โ handlePrice ะผะตัะพะด ะดะพัััะฟะตะฝ');
  } else {
    console.log('   โ handlePrice ะผะตัะพะด ะฝะต ะฝะฐะนะดะตะฝ');
  }
  
} catch (error) {
  console.error('   โ ะัะธะฑะบะฐ ะฒ messageHandler:', error.message);
}

// 4. ะัะพะฒะตัะบะฐ ะบะพะฝัะธะณััะฐัะธะธ ะพัะพะฑัะฐะถะตะฝะธั ัะพะบะตะฝะพะฒ
try {
  console.log('\n4๏ธโฃ ะขะตััะธัะพะฒะฐะฝะธะต ะบะพะฝัะธะณััะฐัะธะธ ะพัะพะฑัะฐะถะตะฝะธั ัะพะบะตะฝะพะฒ...');
  const BaseCommandHandler = require('../src/handlers/BaseCommandHandler');
  const handler = new BaseCommandHandler();
  
  const testTokens = ['CES', 'POL', 'TRX', 'BNB', 'SOL', 'ETH', 'ARB', 'AVAX', 'USDT', 'USDC', 'BUSD', 'TON', 'NOT'];
  
  testTokens.forEach(token => {
    try {
      const config = handler.getTokenDisplayConfig(token);
      console.log(`   ${config.emoji} ${token}: ${config.priceDecimals} ะดะตัััะธัะฝัั ะทะฝะฐะบะพะฒ`);
      console.log(`      ๐ ${config.description.slice(0, 50)}...`);
    } catch (configError) {
      console.log(`   โ ${token}: ะพัะธะฑะบะฐ ะบะพะฝัะธะณััะฐัะธะธ`);
    }
  });
  
} catch (error) {
  console.error('   โ ะัะธะฑะบะฐ ะฒ ะบะพะฝัะธะณััะฐัะธะธ ัะพะบะตะฝะพะฒ:', error.message);
}

// 5. ะกะธะผัะปััะธั ะบะพะผะฐะฝะด
console.log('\n5๏ธโฃ ะกะธะผัะปััะธั ะบะพะผะฐะฝะด ัะพะบะตะฝะพะฒ...');

const commands = [
  { command: '/ces', token: 'CES' },
  { command: '/pol', token: 'POL' },
  { command: '/trx', token: 'TRX' },
  { command: '/bnb', token: 'BNB' },
  { command: '/sol', token: 'SOL' },
  { command: '/eth', token: 'ETH' },
  { command: '/arb', token: 'ARB' },
  { command: '/avax', token: 'AVAX' },
  { command: '/usdt', token: 'USDT' },
  { command: '/usdc', token: 'USDC' },
  { command: '/busd', token: 'BUSD' },
  { command: '/ton', token: 'TON' },
  { command: '/not', token: 'NOT' }
];

commands.forEach(cmd => {
  console.log(`   ๐ฐ ${cmd.command} โ ะฟะพะปััะตะฝะธะต ัะตะฝั ${cmd.token}`);
});

console.log('\n๐ ะขะตััะธัะพะฒะฐะฝะธะต ะบะพะผะฐะฝะด ัะตะฝ ะทะฐะฒะตััะตะฝะพ!');

console.log('\n๐ ะะพะดะดะตัะถะธะฒะฐะตะผัะต ะบะพะผะฐะฝะดั:');
console.log('   ๐ฐ /ces  - ะฆะตะฝะฐ CES ัะพะบะตะฝะฐ');
console.log('   ๐ฃ /pol  - ะฆะตะฝะฐ POL (Polygon)');
console.log('   ๐ด /trx  - ะฆะตะฝะฐ TRX (TRON)');
console.log('   ๐ก /bnb  - ะฆะตะฝะฐ BNB (Binance)');
console.log('   ๐ข /sol  - ะฆะตะฝะฐ SOL (Solana)');
console.log('   ๐ต /eth  - ะฆะตะฝะฐ ETH (Ethereum)');
console.log('   ๐ต /arb  - ะฆะตะฝะฐ ARB (Arbitrum)');
console.log('   ๐ถ /avax - ะฆะตะฝะฐ AVAX (Avalanche)');
console.log('   ๐ต /usdt - ะฆะตะฝะฐ USDT (Tether)');
console.log('   ๐ต /usdc - ะฆะตะฝะฐ USDC (USD Coin)');
console.log('   ๐ก /busd - ะฆะตะฝะฐ BUSD (Binance USD)');
console.log('   ๐ /ton  - ะฆะตะฝะฐ TON (TON Network)');
console.log('   ๐ /not  - ะฆะตะฝะฐ NOT (Notcoin)');

console.log('\n๐ฑ ะัะฟะพะปัะทะพะฒะฐะฝะธะต:');
console.log('   ะัะพััะพ ะพัะฟัะฐะฒััะต ะบะพะผะฐะฝะดั ะฒ ัะฐั ั ะฑะพัะพะผ');
console.log('   ะัะธะผะตั: /ton ะดะปั ะฟะพะปััะตะฝะธั ัะตะฝั Toncoin');

console.log('\n๐ ะัะต ะบะพะผะฐะฝะดั ะณะพัะพะฒั ะบ ะธัะฟะพะปัะทะพะฒะฐะฝะธั!');
process.exit(0);