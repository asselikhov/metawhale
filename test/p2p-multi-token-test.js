/**
 * –¢–µ—Å—Ç –º–Ω–æ–≥–æ—Ç–æ–∫–µ–Ω–Ω–æ–π P2P —Ç–æ—Ä–≥–æ–≤–ª–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
 */

console.log('ü™ô –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Ç–æ–∫–µ–Ω–Ω–æ–π P2P —Ç–æ—Ä–≥–æ–≤–ª–∏...\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ P2PHandler
try {
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ P2PHandler...');
  const P2PHandler = require('../src/handlers/P2PHandler');
  const handler = new P2PHandler();
  console.log('   ‚úÖ P2PHandler –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ—Ç–æ–∫–µ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
  const newMethods = [
    'handleP2PTokenSelect',
    'handleP2PBuyToken', 
    'handleP2PSellToken',
    'shouldShowTokenForTrading'
  ];
  
  for (const method of newMethods) {
    if (typeof handler[method] === 'function') {
      console.log(`   ‚úÖ ${method} –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω`);
    } else {
      console.log(`   ‚ùå ${method} –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ P2PHandler:', error.message);
  process.exit(1);
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ messageHandler
try {
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ messageHandler...');
  const messageHandler = require('../src/handlers/messageHandler');
  const handler = new messageHandler();
  console.log('   ‚úÖ messageHandler –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–µ–ª–µ–≥–∏—Ä—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤
  const delegatedMethods = [
    'handleP2PTokenSelect',
    'handleP2PBuyToken',
    'handleP2PSellToken'
  ];
  
  for (const method of delegatedMethods) {
    if (typeof handler[method] === 'function') {
      console.log(`   ‚úÖ ${method} –¥–µ–ª–µ–≥–∏—Ä—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω`);
    } else {
      console.log(`   ‚ùå ${method} –¥–µ–ª–µ–≥–∏—Ä—É—é—â–∏–π –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ messageHandler:', error.message);
  process.exit(1);
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ multiChainService —Ç–æ–∫–µ–Ω–æ–≤
try {
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ multiChainService...');
  const multiChainService = require('../src/services/multiChainService');
  console.log('   ‚úÖ multiChainService –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
  const networks = ['polygon', 'tron', 'bsc', 'solana', 'arbitrum', 'avalanche'];
  
  for (const networkId of networks) {
    try {
      const networkTokens = multiChainService.getNetworkTokens(networkId);
      const tokenCount = Object.keys(networkTokens).length;
      const networkName = multiChainService.getNetworkDisplayName(networkId);
      const emoji = multiChainService.getNetworkEmoji(networkId);
      
      console.log(`   ${emoji} ${networkName}: ${tokenCount} —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
      const tokenList = Object.keys(networkTokens).join(', ');
      console.log(`      üìã –¢–æ–∫–µ–Ω—ã: ${tokenList}`);
      
    } catch (netError) {
      console.log(`   ‚ö†Ô∏è ${networkId}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤`);
    }
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ multiChainService:', error.message);
  process.exit(1);
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ shouldShowTokenForTrading
try {
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è P2P...');
  const P2PHandler = require('../src/handlers/P2PHandler');
  const handler = new P2PHandler();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è P2P —Ç–æ—Ä–≥–æ–≤–ª–∏
  const networks = ['polygon', 'tron', 'bsc', 'solana', 'arbitrum', 'avalanche'];
  const testTokens = ['CES', 'USDT', 'USDC', 'TRX', 'BNB', 'SOL', 'ETH', 'AVAX', 'BUSD'];
  
  for (const networkId of networks) {
    const suitableTokens = testTokens.filter(token => 
      handler.shouldShowTokenForTrading(networkId, token)
    );
    
    if (suitableTokens.length > 0) {
      console.log(`   üí∞ ${networkId}: –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è P2P: ${suitableTokens.join(', ')}`);
    } else {
      console.log(`   ‚ö†Ô∏è ${networkId}: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è P2P`);
    }
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è P2P:', error.message);
  process.exit(1);
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram bot callbacks
try {
  console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram bot callbacks...');
  const fs = require('fs');
  const telegramBotCode = fs.readFileSync('./src/bot/telegramBot.js', 'utf-8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö callback handlers
  const requiredCallbacks = [
    'p2p_select_token_',
    'p2p_buy_',
    'p2p_sell_'
  ];
  
  for (const callback of requiredCallbacks) {
    if (telegramBotCode.includes(callback)) {
      console.log(`   ‚úÖ Callback ${callback} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ telegramBot.js`);
    } else {
      console.log(`   ‚ùå Callback ${callback} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ telegramBot.js`);
    }
  }
} catch (error) {
  console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ telegram bot callbacks:', error.message);
  process.exit(1);
}

console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –º–Ω–æ–≥–æ—Ç–æ–∫–µ–Ω–Ω–æ–π P2P —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

console.log('\nüìã –†–µ–∑—é–º–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
console.log('   ‚úÖ P2P –º–µ–Ω—é —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏');
console.log('   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã handleP2PBuyToken –∏ handleP2PSellToken –¥–ª—è –ª—é–±—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤');
console.log('   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–∫–ª—é—á–∞–µ—Ç –¥–æ—Ä–æ–≥–∏–µ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã');
console.log('   ‚úÖ Telegram bot callbacks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –º–Ω–æ–≥–æ—Ç–æ–∫–µ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏');

console.log('\nüöÄ –ú–Ω–æ–≥–æ—Ç–æ–∫–µ–Ω–Ω–∞—è P2P —Ç–æ—Ä–≥–æ–≤–ª—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
process.exit(0);