/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' –∏ 'üîÑ P2P –ë–∏—Ä–∂–∞'
 */

const { Markup } = require('telegraf');

// –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const mockLanguageService = {
  getText: async (chatId, key) => {
    const translations = {
      'ru': {
        'personal_cabinet': '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        'p2p': 'üîÑ P2P –ë–∏—Ä–∂–∞'
      }
    };
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    return translations['ru'][key] || key;
  }
};

// –ú–æ–∫–∞–µ–º LocalizationHelper
const mockLocalizationHelper = {
  getText: mockLanguageService.getText,
  getLocalizedMainMenu: async (chatId) => {
    // –°–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏:
    // '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' –∏ 'üîÑ P2P –ë–∏—Ä–∂–∞'
    const personalCabinet = await mockLanguageService.getText(chatId, 'personal_cabinet');
    const p2p = await mockLanguageService.getText(chatId, 'p2p');
    
    return [
      [personalCabinet, p2p]
    ];
  }
};

// –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockCtx = {
  chat: {
    id: 'test_user_menu'
  },
  reply: async (message, keyboard) => {
    console.log('\nü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:');
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
    
    if (keyboard && keyboard.reply_markup && keyboard.reply_markup.keyboard) {
      console.log('   –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:');
      keyboard.reply_markup.keyboard.forEach((row, index) => {
        console.log(`     –†—è–¥ ${index + 1}: [${row.map(btn => `"${btn}"`).join(', ')}]`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
      const totalButtons = keyboard.reply_markup.keyboard.reduce((acc, row) => acc + row.length, 0);
      console.log(`   –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: ${totalButtons}`);
    } else if (keyboard) {
      console.log(`   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:`, JSON.stringify(keyboard, null, 2));
    }
    
    return { message_id: 1001 };
  }
};

async function testMainMenuSpecification() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞...\n');
  
  try {
    const chatId = mockCtx.chat.id.toString();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    console.log('--- –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---');
    const mainMenuButtons = await mockLocalizationHelper.getLocalizedMainMenu(chatId);
    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', JSON.stringify(mainMenuButtons, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä—è–¥
    if (mainMenuButtons.length === 1) {
      console.log('‚úÖ –ú–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä—è–¥ –∫–Ω–æ–ø–æ–∫');
    } else {
      console.log(`‚ùå –ú–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç ${mainMenuButtons.length} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫, –æ–∂–∏–¥–∞–ª—Å—è 1`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ä—è–¥—É —Ä–æ–≤–Ω–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    const row = mainMenuButtons[0];
    if (row.length === 2) {
      console.log('‚úÖ –†—è–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ–≤–Ω–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏');
    } else {
      console.log(`‚ùå –†—è–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç ${row.length} –∫–Ω–æ–ø–æ–∫, –æ–∂–∏–¥–∞–ª–æ—Å—å 2`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–æ–ø–æ–∫
    const [firstButton, secondButton] = row;
    if (firstButton === '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç') {
      console.log('‚úÖ –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"');
    } else {
      console.log(`‚ùå –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞: "${firstButton}", –æ–∂–∏–¥–∞–ª–æ—Å—å "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"`);
      return false;
    }
    
    if (secondButton === 'üîÑ P2P –ë–∏—Ä–∂–∞') {
      console.log('‚úÖ –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞: "üîÑ P2P –ë–∏—Ä–∂–∞"');
    } else {
      console.log(`‚ùå –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞: "${secondButton}", –æ–∂–∏–¥–∞–ª–æ—Å—å "üîÑ P2P –ë–∏—Ä–∂–∞"`);
      return false;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    console.log('\n--- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---');
    const mainMenu = Markup.keyboard(mainMenuButtons).resize();
    const menuMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !';
    await mockCtx.reply(menuMessage, mainMenu);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞...\n');
  
  console.log('–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:');
  console.log('- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
  console.log('- –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"');
  console.log('- –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞: "üîÑ P2P –ë–∏—Ä–∂–∞"');
  console.log('- –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n');
  
  try {
    const result = await testMainMenuSpecification();
    
    console.log(`\n${'='.repeat(60)}`);
    if (result) {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞.');
      console.log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" –∏ "üîÑ P2P –ë–∏—Ä–∂–∞"');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞.');
    }
    console.log(`${'='.repeat(60)}`);
    
  } catch (error) {
    console.error('üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  runTest().then(() => {
    console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  }).catch((error) => {
    console.error('üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
  });
}

module.exports = { testMainMenuSpecification };