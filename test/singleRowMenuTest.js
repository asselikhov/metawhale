/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ 4 –∫–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
 */

const { Markup } = require('telegraf');
const LocalizationHelper = require('../src/utils/localizationHelper');

// –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —è–∑—ã–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockLanguageService = {
  getText: async (chatId, key) => {
    const translations = {
      'ru': {
        'main_menu': 'üåæ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'personal_cabinet': 'üë§ –õ–ö',
        'p2p': 'üîÑ P2P',
        'matrix': 'üí† Matrix',
        'settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
      }
    };
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    return translations['ru'][key] || key;
  }
};

// –ú–æ–∫–∞–µ–º LocalizationHelper —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
const mockLocalizationHelper = {
  getText: mockLanguageService.getText,
  getLocalizedMainMenu: async (chatId) => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 4 –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    const personalCabinet = await mockLanguageService.getText(chatId, 'personal_cabinet');
    const p2p = await mockLanguageService.getText(chatId, 'p2p');
    const matrix = await mockLanguageService.getText(chatId, 'matrix');
    const settings = await mockLanguageService.getText(chatId, 'settings');
    
    return [
      [personalCabinet, p2p, matrix, settings]
    ];
  }
};

// –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockCtx = {
  chat: {
    id: 'test_user_single_row'
  },
  reply: async (message, keyboard) => {
    console.log('\nü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:');
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
    
    if (keyboard && keyboard.reply_markup && keyboard.reply_markup.keyboard) {
      console.log('   –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:');
      keyboard.reply_markup.keyboard.forEach((row, index) => {
        console.log(`     –†—è–¥ ${index + 1}: [${row.map(btn => `"${btn}"`).join(', ')}]`);
      });
    } else if (keyboard) {
      console.log(`   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:`, JSON.stringify(keyboard, null, 2));
    }
    
    return { message_id: 1001 };
  }
};

async function testSingleRowMenu() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ...');
  
  try {
    const chatId = mockCtx.chat.id.toString();
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
    console.log('\n--- –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é ---');
    const mainMenuButtons = await mockLocalizationHelper.getLocalizedMainMenu(chatId);
    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é:', JSON.stringify(mainMenuButtons, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä—è–¥
    if (mainMenuButtons.length !== 1) {
      console.log(`‚ùå –ú–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç ${mainMenuButtons.length} —Ä—è–¥–æ–≤, –æ–∂–∏–¥–∞–ª—Å—è 1`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä—è–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ–≤–Ω–æ 4 –∫–Ω–æ–ø–∫–∏
    const row = mainMenuButtons[0];
    if (row.length !== 4) {
      console.log(`‚ùå –†—è–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç ${row.length} –∫–Ω–æ–ø–æ–∫, –æ–∂–∏–¥–∞–ª–æ—Å—å 4`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–æ–ø–æ–∫
    const [firstButton, secondButton, thirdButton, fourthButton] = row;
    
    console.log('\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–Ω–æ–ø–æ–∫ ---');
    console.log(`–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞: "${firstButton}"`);
    console.log(`–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞: "${secondButton}"`);
    console.log(`–¢—Ä–µ—Ç—å—è –∫–Ω–æ–ø–∫–∞: "${thirdButton}"`);
    console.log(`–ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞: "${fourthButton}"`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    console.log('\n--- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---');
    const mainMenu = Markup.keyboard(mainMenuButtons).resize();
    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', JSON.stringify(mainMenu, null, 2));
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
    console.log('\n--- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é ---');
    const menuMessage = await mockLanguageService.getText(chatId, 'main_menu');
    await mockCtx.reply(menuMessage, mainMenu);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –º–µ–Ω—é –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω');
    return true;
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –º–µ–Ω—é –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ...\n');
  
  try {
    const result = await testSingleRowMenu();
    
    console.log(`\n${'='.repeat(50)}`);
    if (result) {
      console.log('üéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ú–µ–Ω—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å 4 –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.');
      console.log('‚úÖ –í—Å–µ 4 –∫–Ω–æ–ø–∫–∏: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "P2P", "Matrix", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"');
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.');
    }
    console.log(`${'='.repeat(50)}`);
    
    return result;
  } catch (error) {
    console.error('üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  runTest().then((success) => {
    console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(success ? 0 : 1);
  }).catch((error) => {
    console.error('üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
}

module.exports = { testSingleRowMenu };