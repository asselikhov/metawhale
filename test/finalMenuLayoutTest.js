/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫, –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–∞–∫:
 * Row 1: ["üë§ –õ–ö","üîÑ P2P","üí† Matrix"," ‚öôÔ∏è "]
 */

const { Markup } = require('telegraf');
const LocalizationHelper = require('../src/utils/localizationHelper');

// –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockCtx = {
  chat: {
    id: 'final_demo_user'
  },
  reply: async (message, keyboard) => {
    console.log('\nü§ñ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
    
    if (keyboard && keyboard.reply_markup && keyboard.reply_markup.keyboard) {
      console.log('   –ö–Ω–æ–ø–∫–∏:');
      keyboard.reply_markup.keyboard.forEach((row, index) => {
        console.log(`     Row ${index + 1}: ${JSON.stringify(row)}`);
      });
    }
    
    return { message_id: 9999 };
  }
};

async function demonstrateExactLayout() {
  console.log('üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –¢–û–ß–ù–û–ì–û –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–Ø –ö–ù–û–ü–û–ö');
  console.log('===========================================');
  console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:');
  console.log('Buttons:');
  console.log('     Row 1: ["üë§ –õ–ö","üîÑ P2P","üí† Matrix"," ‚öôÔ∏è "]');
  console.log('');
  
  try {
    const chatId = mockCtx.chat.id.toString();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    const menuButtons = await LocalizationHelper.getLocalizedMainMenu(chatId);
    
    console.log('–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:');
    console.log('Buttons:');
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –∑–∞–ø—Ä–æ—Å–µ
    menuButtons.forEach((row, index) => {
      console.log(`     Row ${index + 1}: ${JSON.stringify(row)}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    const firstRow = menuButtons[0];
    const isCorrectLayout = 
      menuButtons.length === 1 &&  // –û–¥–∏–Ω —Ä—è–¥
      firstRow.length === 4 &&     // –ß–µ—Ç—ã—Ä–µ –∫–Ω–æ–ø–∫–∏
      firstRow[0] === 'üë§ –õ–ö' &&    // –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞
      firstRow[1] === 'üîÑ P2P' &&   // –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞
      firstRow[2] === 'üí† Matrix' && // –¢—Ä–µ—Ç—å—è –∫–Ω–æ–ø–∫–∞
      firstRow[3] === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'; // –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞
    
    if (isCorrectLayout) {
      console.log('\n‚úÖ –¢–û–ß–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ó–ê–ü–†–û–°–£!');
      console.log('‚úÖ –í—Å–µ 4 –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É');
      console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–Ω–æ–ø–æ–∫');
      console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫');
      
      // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard = Markup.keyboard(menuButtons).resize();
      const message = 'üåæ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
      await mockCtx.reply(message, keyboard);
      
      return true;
    } else {
      console.log('\n‚ùå –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function runFinalDemo() {
  console.log('üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ï–ù–Æ –ë–û–¢–ê');
  console.log('–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ\n');
  
  const success = await demonstrateExactLayout();
  
  console.log(`\n${'='.repeat(50)}`);
  if (success) {
    console.log('üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('‚úÖ –ú–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ —Ç–∞–∫, –∫–∞–∫ –≤—ã —Ö–æ—Ç–µ–ª–∏:');
    console.log('   Row 1: ["üë§ –õ–ö","üîÑ P2P","üí† Matrix","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]');
    console.log('‚úÖ –í—Å–µ 4 –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É');
    console.log('‚úÖ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è');
  } else {
    console.log('‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
  }
  console.log(`${'='.repeat(50)}`);
  
  return success;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
if (require.main === module) {
  runFinalDemo().then((success) => {
    console.log('\nüèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(success ? 0 : 1);
  }).catch((error) => {
    console.error('üí• –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  });
}

module.exports = { demonstrateExactLayout };