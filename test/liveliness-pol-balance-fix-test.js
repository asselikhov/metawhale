/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º POL —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è liveliness1
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–∞–ª–∞–Ω—Å POL
 */

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ POL –¥–ª—è liveliness1...\n');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è liveliness1
const TEST_USER = {
  chatId: '2131340103',
  username: 'liveliness1',
  address: '0xA055F762EFa0a0499f48cFD74AFA13e66D8FF7a4',
  expectedPOLBalance: 0.19243892,
  network: 'polygon'
};

async function testPOLBalanceFix() {
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ multiChainService –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
  
  try {
    const multiChainService = require('../src/services/multiChainService');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ POL —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ Polygon
    const polygonTokens = multiChainService.getNetworkTokens('polygon');
    console.log('   üü£ Polygon —Ç–æ–∫–µ–Ω—ã:', Object.keys(polygonTokens));
    
    if (polygonTokens.POL) {
      console.log('   ‚úÖ POL —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Polygon');
      console.log('   üìã POL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', polygonTokens.POL);
    } else {
      console.log('   ‚ùå POL —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Polygon');
      return false;
    }
    
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ multiChainService:', error.message);
    return false;
  }

  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω...');
  
  try {
    const priceService = require('../src/services/priceService');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã POL
    const polPrice = await priceService.getPOLPrice();
    console.log(`   üü£ POL —Ü–µ–Ω–∞: $${polPrice.price.toFixed(4)} (‚ÇΩ${polPrice.priceRub.toFixed(2)})`);
    console.log(`   üìä –ò—Å—Ç–æ—á–Ω–∏–∫: ${polPrice.source}`);
    
    if (polPrice.price > 0) {
      console.log('   ‚úÖ –¶–µ–Ω–∞ POL –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('   ‚ö†Ô∏è –¶–µ–Ω–∞ POL —Ä–∞–≤–Ω–∞ –Ω—É–ª—é');
    }
    
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã POL:', error.message);
    return false;
  }

  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ multiChainWalletService...');
  
  try {
    const multiChainWalletService = require('../src/services/multiChainWalletService');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`   üíº –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è ${TEST_USER.address}...`);
    
    const balances = await multiChainWalletService.getNetworkBalances(TEST_USER.address, TEST_USER.network);
    console.log('   üí∞ –°—ã—Ä—ã–µ –±–∞–ª–∞–Ω—Å—ã:', balances);
    
    if (balances.POL !== undefined) {
      console.log(`   ‚úÖ POL –±–∞–ª–∞–Ω—Å: ${balances.POL} POL`);
      if (balances.POL === TEST_USER.expectedPOLBalance) {
        console.log('   üéØ POL –±–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É');
      } else {
        console.log(`   ‚ö†Ô∏è POL –±–∞–ª–∞–Ω—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ (${TEST_USER.expectedPOLBalance})`);
      }
    } else {
      console.log('   ‚ùå POL –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è —Å–µ—Ç–∏
    const prices = await multiChainWalletService.getTokenPrices(TEST_USER.network);
    console.log('   üí± –¶–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤:', Object.keys(prices));
    
    if (prices.POL) {
      console.log(`   ‚úÖ –¶–µ–Ω–∞ POL –≤ —Å–µ—Ç–∏: $${prices.POL.price.toFixed(4)}`);
    } else {
      console.log('   ‚ùå –¶–µ–Ω–∞ POL –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è —Å–µ—Ç–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
    const formattedBalances = multiChainWalletService.formatBalances(TEST_USER.network, balances, prices);
    console.log('   üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:');
    
    if (formattedBalances.POL) {
      const polFormatted = formattedBalances.POL;
      console.log(`       POL: ${polFormatted.balance} ‚Üí $${polFormatted.usdValue} ‚Ä¢ ‚ÇΩ${polFormatted.rubValue}`);
      console.log(`       –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${polFormatted.displayText}`);
      
      if (parseFloat(polFormatted.usdValue) > 0) {
        console.log('   ‚úÖ USD –∑–Ω–∞—á–µ–Ω–∏–µ POL –±–∞–ª–∞–Ω—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        console.log('   ‚ùå USD –∑–Ω–∞—á–µ–Ω–∏–µ POL –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–≤–Ω–æ –Ω—É–ª—é');
      }
    } else {
      console.log('   ‚ùå POL –±–∞–ª–∞–Ω—Å –Ω–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω');
    }
    
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ multiChainWalletService:', error.message);
    return false;
  }

  console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ backgroundProcessingService...');
  
  try {
    const backgroundService = require('../src/services/backgroundProcessingService');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞
    console.log(`   üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è ${TEST_USER.chatId}...`);
    
    const walletData = await backgroundService.processWalletData(TEST_USER.chatId);
    console.log('   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
      hasWallet: walletData.hasWallet,
      polBalance: walletData.polBalance,
      polTotalUsd: walletData.polTotalUsd,
      polTotalRub: walletData.polTotalRub
    });
    
    if (walletData.hasWallet && walletData.polBalance > 0) {
      console.log('   ‚úÖ –ë–∞–ª–∞–Ω—Å POL –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ background service');
      
      if (walletData.polTotalUsd !== undefined && parseFloat(walletData.polTotalUsd) > 0) {
        console.log('   ‚úÖ USD –∑–Ω–∞—á–µ–Ω–∏–µ POL –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        console.log('   ‚ùå USD –∑–Ω–∞—á–µ–Ω–∏–µ POL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }
    } else {
      console.log('   ‚ùå –ë–∞–ª–∞–Ω—Å POL –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ background service');
    }
    
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ backgroundProcessingService:', error.message);
    return false;
  }

  return true;
}

async function runTest() {
  try {
    console.log('üéØ –¶–µ–ª—å: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ POL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è liveliness1');
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${TEST_USER.username} (${TEST_USER.chatId})`);
    console.log(`üè† –ê–¥—Ä–µ—Å: ${TEST_USER.address}`);
    console.log(`üü£ –°–µ—Ç—å: ${TEST_USER.network}`);
    console.log(`üí∞ –û–∂–∏–¥–∞–µ–º—ã–π POL –±–∞–ª–∞–Ω—Å: ${TEST_USER.expectedPOLBalance}\n`);
    
    const success = await testPOLBalanceFix();
    
    if (success) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
      console.log('====================');
      console.log('‚úÖ POL —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Polygon');
      console.log('‚úÖ –¶–µ–Ω–∞ POL –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å POL –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('‚úÖ USD/RUB –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ backgroundProcessingService –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
      
      console.log('\nüöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –¥–µ–ø–ª–æ—é!');
      console.log('üéØ liveliness1 —Ç–µ–ø–µ—Ä—å —É–≤–∏–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å POL');
    } else {
      console.log('\n‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!');
      console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('\nüí• –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error);
  }
}

if (require.main === module) {
  runTest()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
      process.exit(1);
    });
}

module.exports = { runTest };