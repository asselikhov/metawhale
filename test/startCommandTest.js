/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
 */

const { Markup } = require('telegraf');
const LocalizationHelper = require('../src/utils/localizationHelper');

// –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start
const mockCtx = {
  chat: {
    id: 'test_start_command',
    username: 'testuser'
  },
  from: {
    language_code: 'ru'
  },
  reply: async (message, keyboard) => {
    console.log('\nü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start:');
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
    
    if (keyboard && keyboard.reply_markup && keyboard.reply_markup.keyboard) {
      console.log('   –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:');
      keyboard.reply_markup.keyboard.forEach((row, index) => {
        console.log(`     –†—è–¥ ${index + 1}: [${row.map(btn => `"${btn}"`).join(', ')}]`);
      });
    }
    
    return { message_id: 1001 };
  }
};

async function testStartCommand() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start');
  console.log('================================');
  
  try {
    const chatId = mockCtx.chat.id.toString();
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start
    console.log('\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---');
    
    const welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !';
    console.log(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${welcomeMessage}`);
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const mainMenuButtons = await LocalizationHelper.getLocalizedMainMenu(chatId);
    const mainMenu = Markup.keyboard(mainMenuButtons).resize();
    
    console.log('\n--- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é ---');
    console.log('–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', JSON.stringify(mainMenuButtons, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é
    if (mainMenuButtons.length !== 1) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è 1 —Ä—è–¥ –∫–Ω–æ–ø–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ: ${mainMenuButtons.length}`);
    }
    
    if (mainMenuButtons[0].length !== 4) {
      throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É, –ø–æ–ª—É—á–µ–Ω–æ: ${mainMenuButtons[0].length}`);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await mockCtx.reply(welcomeMessage, mainMenu);
    
    console.log('\n‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('‚úÖ –í—Å–µ 4 –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runStartCommandTest() {
  console.log('üß™ –¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ /START');
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n');
  
  try {
    const result = await testStartCommand();
    
    console.log(`\n${'='.repeat(50)}`);
    if (result) {
      console.log('üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å 4 –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É');
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º');
    } else {
      console.log('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù');
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start');
    }
    console.log(`${'='.repeat(50)}`);
    
    return result;
  } catch (error) {
    console.error('üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  runStartCommandTest().then((success) => {
    console.log('\nüèÅ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(success ? 0 : 1);
  }).catch((error) => {
    console.error('üí• –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
}

module.exports = { testStartCommand };