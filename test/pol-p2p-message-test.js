/**
 * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /pol - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /pol –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ P2P —Ç–æ—Ä–≥–æ–≤–ª–µ POL —Ç–æ–∫–µ–Ω–æ–º
 */

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /pol —Å P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π...\n');

async function testPOLCommand() {
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ BaseCommandHandler...');
  
  try {
    const BaseCommandHandler = require('../src/handlers/BaseCommandHandler');
    const handler = new BaseCommandHandler();
    
    console.log('   ‚úÖ BaseCommandHandler –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ getTokenDisplayConfig –¥–ª—è POL
    const polConfig = handler.getTokenDisplayConfig('POL');
    console.log('   üü£ POL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', polConfig);
    
    if (polConfig.emoji === 'üü£') {
      console.log('   ‚úÖ POL emoji –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
    } else {
      console.log('   ‚ùå POL emoji –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
    }
    
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ BaseCommandHandler:', error.message);
    return false;
  }

  console.log('\n2Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã /pol...');
  
  try {
    const priceService = require('../src/services/priceService');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö POL
    console.log('   üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã POL...');
    const polPrice = await priceService.getPOLPrice();
    console.log(`   üí∞ –¶–µ–Ω–∞ POL: $${polPrice.price.toFixed(4)} (‚ÇΩ${polPrice.priceRub.toFixed(2)})`);
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const BaseCommandHandler = require('../src/handlers/BaseCommandHandler');
    const handler = new BaseCommandHandler();
    const tokenConfig = handler.getTokenDisplayConfig('POL');
    
    const changeEmoji = polPrice.change24h >= 0 ? 'üî∫' : 'üîª';
    const changeSign = polPrice.change24h >= 0 ? '+' : '';
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è POL (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ processPriceData)
    const expectedMessage = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${tokenConfig.emoji} –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ POL: $ ${polPrice.price.toFixed(tokenConfig.priceDecimals)} | ‚ÇΩ ${polPrice.priceRub.toFixed(2)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${polPrice.change24h.toFixed(1)}%

–¢–æ—Ä–≥—É–π POL —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ  
P2P –ë–∏—Ä–∂–∞ (https://t.me/rogassistant_bot): –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ ‚ÇΩ`;
    
    console.log('\n   üìù –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /pol:');
    console.log('   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    expectedMessage.split('\n').forEach(line => {
      console.log(`   ‚îÇ ${line.padEnd(47)} ‚îÇ`);
    });
    console.log('   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const checks = [
      { name: '–°–æ–¥–µ—Ä–∂–∏—Ç emoji POL', test: expectedMessage.includes('üü£') },
      { name: '–°–æ–¥–µ—Ä–∂–∏—Ç "–¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ POL"', test: expectedMessage.includes('–¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ POL') },
      { name: '–°–æ–¥–µ—Ä–∂–∏—Ç "–¢–æ—Ä–≥—É–π POL"', test: expectedMessage.includes('–¢–æ—Ä–≥—É–π POL') },
      { name: '–°–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ P2P', test: expectedMessage.includes('https://t.me/rogassistant_bot') },
      { name: '–°–æ–¥–µ—Ä–∂–∏—Ç "–ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞"', test: expectedMessage.includes('–ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ ‚ÇΩ') }
    ];
    
    console.log('\n   üß™ –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:');
    let allPassed = true;
    checks.forEach(check => {
      if (check.test) {
        console.log(`   ‚úÖ ${check.name}`);
      } else {
        console.log(`   ‚ùå ${check.name}`);
        allPassed = false;
      }
    });
    
    if (allPassed) {
      console.log('\n   üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã!');
    } else {
      console.log('\n   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã');
      return false;
    }
    
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error.message);
    return false;
  }

  console.log('\n3Ô∏è‚É£ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏...');
  
  try {
    const BaseCommandHandler = require('../src/handlers/BaseCommandHandler');
    const handler = new BaseCommandHandler();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const trxConfig = handler.getTokenDisplayConfig('TRX');
    console.log(`   üî¥ TRX –æ–ø–∏—Å–∞–Ω–∏–µ: "${trxConfig.description}"`);
    
    if (trxConfig.description.includes('TRON –±–ª–æ–∫—á–µ–π–Ω')) {
      console.log('   ‚úÖ TRX —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ');
    } else {
      console.log('   ‚ùå TRX –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å');
    }
    
    const ethConfig = handler.getTokenDisplayConfig('ETH');
    console.log(`   üîµ ETH –æ–ø–∏—Å–∞–Ω–∏–µ: "${ethConfig.description}"`);
    
    if (ethConfig.description.includes('Ethereum')) {
      console.log('   ‚úÖ ETH —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ');
    } else {
      console.log('   ‚ùå ETH –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å');
    }
    
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
    return false;
  }

  return true;
}

async function runTest() {
  try {
    console.log('üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /pol –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    console.log('üìù –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–¢–æ—Ä–≥—É–π POL —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ"\n');
    
    const success = await testPOLCommand();
    
    if (success) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
      console.log('====================');
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /pol —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–¢–æ—Ä–≥—É–π POL —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ"');
      console.log('‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ P2P –±–∏—Ä–∂—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      console.log('‚úÖ –î—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è');
      
      console.log('\nüöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –¥–µ–ø–ª–æ—é!');
      console.log('üì± –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç P2P –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è POL —Ç–æ–∫–µ–Ω–∞');
    } else {
      console.log('\n‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!');
      console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('\nüí• –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error);
  }
}

if (require.main === module) {
  runTest()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
      process.exit(1);
    });
}

module.exports = { runTest };