/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç–µ–π
 * –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

const multiChainService = require('../src/services/multiChainService');
const userNetworkService = require('../src/services/userNetworkService');
const multiChainWalletService = require('../src/services/multiChainWalletService');
const priceService = require('../src/services/priceService');

async function testMultiChainFunctionality() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç–µ–π...\n');
  
  try {
    // 1. –¢–µ—Å—Ç MultiChainService
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MultiChainService...');
    const networks = multiChainService.getNetworks();
    console.log('   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏:', networks.map(n => `${n.name} (${n.id})`).join(', '));
    
    const polygonConfig = multiChainService.getNetworkConfig('polygon');
    console.log('   üü£ Polygon —Ç–æ–∫–µ–Ω—ã:', Object.keys(polygonConfig.tokens).join(', '));
    
    const tronConfig = multiChainService.getNetworkConfig('tron');
    console.log('   üî¥ Tron —Ç–æ–∫–µ–Ω—ã:', Object.keys(tronConfig.tokens).join(', '));
    
    const networkButtons = multiChainService.getNetworkSelectorButtons('polygon');
    console.log('   üîò –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏:', networkButtons.length, '—Å—Ç—Ä–æ–∫');
    
    // 2. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤...');
    const testAddresses = {
      polygon: '0x1234567890123456789012345678901234567890',
      tron: 'TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE',
      bsc: '0x1234567890123456789012345678901234567890',
      solana: '11111111111111111111111111111112',
      arbitrum: '0x1234567890123456789012345678901234567890',
      avalanche: '0x1234567890123456789012345678901234567890',
      invalid: 'invalid_address'
    };
    
    const networkEmojis = {
      polygon: 'üü£',
      tron: 'üî¥',
      bsc: 'üü°',
      solana: 'üü¢',
      arbitrum: 'üîµ',
      avalanche: 'üî∂'
    };
    
    for (const [network, address] of Object.entries(testAddresses)) {
      if (network !== 'invalid') {
        const isValid = multiChainService.validateAddress(network, address);
        console.log(`   ${networkEmojis[network]} ${network}: ${address.slice(0, 20)}... - ${isValid ? '‚úÖ' : '‚ùå'}`);
      }
    }
    
    // 3. –¢–µ—Å—Ç UserNetworkService
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UserNetworkService...');
    const testChatId = 'test_user_123';
    const defaultNetwork = await userNetworkService.getUserNetwork(testChatId);
    console.log('   üåê –°–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultNetwork);
    
    // 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤...');
    
    try {
      const cesPrice = await priceService.getCESPrice();
      console.log(`   üíé CES: $${cesPrice.price.toFixed(6)} (‚ÇΩ${cesPrice.priceRub.toFixed(2)})`);
    } catch (error) {
      console.log('   üíé CES: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
    
    try {
      const polPrice = await priceService.getPOLPrice();
      console.log(`   üü£ POL: $${polPrice.price.toFixed(4)} (‚ÇΩ${polPrice.priceRub.toFixed(2)})`);
    } catch (error) {
      console.log('   üü£ POL: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
    
    try {
      const trxPrice = await priceService.getTRXPrice();
      console.log(`   üî¥ TRX: $${trxPrice.price.toFixed(4)} (‚ÇΩ${trxPrice.priceRub.toFixed(2)})`);
    } catch (error) {
      console.log('   üî¥ TRX: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
    
    try {
      const usdtPrice = await priceService.getUSDTPrice();
      console.log(`   üíµ USDT: $${usdtPrice.price.toFixed(4)} (‚ÇΩ${usdtPrice.priceRub.toFixed(2)})`);
    } catch (error) {
      console.log('   üíµ USDT: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    try {
      const bnbPrice = await priceService.getBNBPrice();
      console.log(`   üü° BNB: $${bnbPrice.price.toFixed(4)} (‚ÇΩ${bnbPrice.priceRub.toFixed(2)})`);
    } catch (error) {
      console.log('   üü° BNB: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
    
    try {
      const solPrice = await priceService.getSOLPrice();
      console.log(`   üü¢ SOL: $${solPrice.price.toFixed(4)} (‚ÇΩ${solPrice.priceRub.toFixed(2)})`);
    } catch (error) {
      console.log('   üü¢ SOL: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
    
    try {
      const ethPrice = await priceService.getETHPrice();
      console.log(`   üîµ ETH: $${ethPrice.price.toFixed(2)} (‚ÇΩ${ethPrice.priceRub.toFixed(2)})`);
    } catch (error) {
      console.log('   üîµ ETH: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
    
    try {
      const arbPrice = await priceService.getARBPrice();
      console.log(`   üîµ ARB: $${arbPrice.price.toFixed(4)} (‚ÇΩ${arbPrice.priceRub.toFixed(2)})`);
    } catch (error) {
      console.log('   üîµ ARB: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
    
    try {
      const avaxPrice = await priceService.getAVAXPrice();
      console.log(`   üî∂ AVAX: $${avaxPrice.price.toFixed(4)} (‚ÇΩ${avaxPrice.priceRub.toFixed(2)})`);
    } catch (error) {
      console.log('   üî∂ AVAX: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error('   –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testMultiChainFunctionality()
    .then(() => {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testMultiChainFunctionality };