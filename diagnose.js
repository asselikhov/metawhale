// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
require('dotenv').config();
const axios = require('axios');

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CES Price Bot...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('TELEGRAM_BOT_TOKEN:', process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('MONGODB_URI:', process.env.MONGODB_URI ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('CMC_API_KEY:', process.env.CMC_API_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('WEBHOOK_URL:', process.env.WEBHOOK_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('PORT:', process.env.PORT || '3000 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
console.log('API_CALL_INTERVAL:', process.env.API_CALL_INTERVAL || '10000 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');

if (!process.env.CMC_API_KEY || process.env.CMC_API_KEY === 'your_coinmarketcap_api_key_here') {
  console.log('\nüîë –í–ù–ò–ú–ê–ù–ò–ï: CMC_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
  console.log('üìù –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞:');
  console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://coinmarketcap.com/api/');
  console.log('2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á');
  console.log('3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CMC_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render');
  console.log('4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å\n');
  return;
}

// –¢–µ—Å—Ç CoinMarketCap API
async function testCMCAPI() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoinMarketCap API...');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞...');
    const testResponse = await axios.get(
      'https://pro-api.coinmarketcap.com/v1/key/info',
      {
        headers: {
          'X-CMC_PRO_API_KEY': process.env.CMC_API_KEY,
          'Accept': 'application/json'
        },
        timeout: 10000
      }
    );
    
    if (testResponse.data && testResponse.data.data) {
      const keyInfo = testResponse.data.data;
      console.log('‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω');
      console.log(`üìä –ü–ª–∞–Ω: ${keyInfo.plan?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.log(`üìà –ö—Ä–µ–¥–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${keyInfo.usage?.current_day?.credits_used || 0}`);
      console.log(`üìâ –õ–∏–º–∏—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –¥–µ–Ω—å: ${keyInfo.usage?.current_day?.credits_left + keyInfo.usage?.current_day?.credits_used || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    }
    
    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ CES
    console.log('\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ CES...');
    const cesResponse = await axios.get(
      'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest',
      {
        headers: {
          'X-CMC_PRO_API_KEY': process.env.CMC_API_KEY,
          'Accept': 'application/json'
        },
        params: {
          symbol: 'CES',
          convert: 'USD' // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 –≤–∞–ª—é—Ç—É
        },
        timeout: 10000
      }
    );
    
    if (cesResponse.data && cesResponse.data.data && cesResponse.data.data.CES) {
      const cesTokens = cesResponse.data.data.CES;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${cesTokens.length} —Ç–æ–∫–µ–Ω(–æ–≤) —Å —Å–∏–º–≤–æ–ª–æ–º CES`);
      
      cesTokens.forEach((token, index) => {
        console.log(`\n--- –¢–æ–∫–µ–Ω ${index + 1} ---`);
        console.log(`ID: ${token.id}`);
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${token.name}`);
        console.log(`–°–∏–º–≤–æ–ª: ${token.symbol}`);
        console.log(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${token.platform?.name || '–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å'}`);
        console.log(`–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${token.platform?.token_address || 'N/A'}`);
        
        if (token.quote?.USD) {
          console.log(`–¶–µ–Ω–∞: $${token.quote.USD.price?.toFixed(6) || 'N/A'}`);
          console.log(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: ${token.quote.USD.percent_change_24h?.toFixed(2) || 'N/A'}%`);
          console.log(`–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø: $${token.quote.USD.market_cap ? (token.quote.USD.market_cap / 1e6).toFixed(2) + 'M' : 'N/A'}`);
        }
      });
      
      // –ò—â–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ Polygon
      const polygonToken = cesTokens.find(token => 
        token.platform?.name?.toLowerCase().includes('polygon') ||
        token.platform?.token_address?.toLowerCase() === '0x1bdf71ede1a4777db1eebe7232bcda20d6fc1610'
      );
      
      if (polygonToken) {
        console.log('\nüéØ –ù–∞–π–¥–µ–Ω CES —Ç–æ–∫–µ–Ω –Ω–∞ Polygon —Å–µ—Ç–∏!');
        console.log(`ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${polygonToken.id}`);
      } else {
        console.log('\n‚ö†Ô∏è CES —Ç–æ–∫–µ–Ω –Ω–∞ Polygon –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID —Ç–æ–∫–µ–Ω–∞');
      }
      
    } else {
      console.log('‚ùå –¢–æ–∫–µ–Ω CES –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CoinMarketCap');
      console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('‚Ä¢ –¢–æ–∫–µ–Ω –Ω–µ –ª–∏—Å—Ç–∏—Ç—Å—è –Ω–∞ CoinMarketCap');
      console.log('‚Ä¢ –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª');
      console.log('‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ ID –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞');
    }
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ CoinMarketCap API:');
    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    
    if (error.response) {
      console.error('HTTP Status:', error.response.status);
      console.error('Response:', JSON.stringify(error.response.data, null, 2));
      
      if (error.response.status === 401) {
        console.log('\nüîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:');
        console.log('‚Ä¢ API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫');
        console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å CMC_API_KEY');
      } else if (error.response.status === 400) {
        console.log('\nüìù –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å:');
        console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞');
        console.log('‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω CES –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º');
      } else if (error.response.status === 429) {
        console.log('\n‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:');
        console.log('‚Ä¢ –ò—Å—á–µ—Ä–ø–∞–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
        console.log('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω');
      }
    }
  }
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
async function testMongoDB() {
  if (!process.env.MONGODB_URI) {
    console.log('\n‚ùå MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }
  
  console.log('\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');
  
  try {
    const mongoose = require('mongoose');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
    await mongoose.disconnect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runDiagnostics() {
  await testCMCAPI();
  await testMongoDB();
  
  console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CMC_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã API –Ω–∞ https://coinmarketcap.com/api/account/');
  console.log('‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ç–æ–∫–µ–Ω–æ–º CES —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ ID');
  console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
}

runDiagnostics().catch(console.error);