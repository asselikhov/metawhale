// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ATH –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
require('dotenv').config();
const mongoose = require('mongoose');

// –°—Ö–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
const priceHistorySchema = new mongoose.Schema({
  price: { type: Number, required: true },
  timestamp: { type: Date, default: Date.now },
  change24h: Number,
  marketCap: Number,
  volume24h: Number,
  priceRub: Number,
  changeRub24h: Number,
  ath: Number
});

const PriceHistory = mongoose.model('PriceHistory', priceHistorySchema);

async function fixATHData() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ATH –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB\n');
    
    // 1. –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const maxPriceRecord = await PriceHistory.findOne().sort({ price: -1 }).limit(1);
    const correctATH = maxPriceRecord ? maxPriceRecord.price : 0;
    
    console.log(`üèÜ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ATH (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞): $${correctATH.toFixed(2)}\n`);
    
    if (correctATH === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    // 2. –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const recordsToUpdate = await PriceHistory.countDocuments({
      $or: [
        { ath: { $lt: correctATH } }, // ATH –º–µ–Ω—å—à–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ
        { ath: { $exists: false } },   // ATH –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        { ath: null }                  // ATH —Ä–∞–≤–µ–Ω null
      ]
    });
    
    console.log(`üìä –ó–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${recordsToUpdate}`);
    
    if (recordsToUpdate === 0) {
      console.log('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ATH');
      return;
    }
    
    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º ATH
    const updateResult = await PriceHistory.updateMany(
      {\n        $or: [\n          { ath: { $lt: correctATH } },\n          { ath: { $exists: false } },\n          { ath: null }\n        ]\n      },\n      {\n        $set: { ath: correctATH }\n      }\n    );\n    \n    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updateResult.modifiedCount}`);\n    \n    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n    const inconsistentAfter = await PriceHistory.countDocuments({\n      $expr: { $lt: ['$ath', '$price'] }\n    });\n    \n    if (inconsistentAfter === 0) {\n      console.log('üéâ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ATH!');\n    } else {\n      console.log(`‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏: ${inconsistentAfter}`);\n    }\n    \n    // 5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n    const totalAfter = await PriceHistory.countDocuments();\n    const withCorrectATH = await PriceHistory.countDocuments({ ath: correctATH });\n    \n    console.log('\\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');\n    console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalAfter}`);\n    console.log(`–° –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ATH ($${correctATH.toFixed(2)}): ${withCorrectATH}`);\n    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: ${((withCorrectATH / totalAfter) * 100).toFixed(1)}%`);\n    \n  } catch (error) {\n    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);\n  } finally {\n    await mongoose.connection.close();\n    console.log('\\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');\n  }\n}\n\n// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\nfixATHData();