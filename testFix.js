console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤ telegramBot.js...');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const { exec } = require('child_process');

const files = [
  'c:\\Projects\\Metawhale\\src\\bot\\telegramBot.js',
  'c:\\Projects\\Metawhale\\src\\handlers\\P2PHandler.js',
  'c:\\Projects\\Metawhale\\src\\handlers\\OptimizedCallbackHandler.js'
];

let success = true;

files.forEach(file => {
  try {
    exec(`node -c "${file}"`, (error, stdout, stderr) => {
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ ${file}:`, error);
        success = false;
      } else {
        console.log(`‚úÖ –§–∞–π–ª ${file} —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
      if (files.indexOf(file) === files.length - 1) {
        if (success) {
          console.log('\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
          console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        } else {
          console.log('\n‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–∞—Ö');
        }
      }
    });
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, e);
    success = false;
  }
});