// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /price —Å –Ω–æ–≤—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
require('dotenv').config();
const axios = require('axios');
const mongoose = require('mongoose');

// –°—Ö–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
const priceHistorySchema = new mongoose.Schema({
  price: { type: Number, required: true },
  timestamp: { type: Date, default: Date.now },
  change24h: Number,
  marketCap: Number,
  volume24h: Number,
  priceRub: Number,
  changeRub24h: Number,
  ath: Number
});

const PriceHistory = mongoose.model('PriceHistory', priceHistorySchema);

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB (–∫–æ–ø–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
async function getUSDToRUBRate() {
  try {
    const response = await axios.get('https://api.exchangerate-api.com/v4/latest/USD', {
      timeout: 5000
    });
    
    if (response.data && response.data.rates && response.data.rates.RUB) {
      const rate = response.data.rates.RUB;
      console.log(`üí± –ö—É—Ä—Å USD/RUB: ${rate}`);
      return rate;
    }
    
    return 100; // Fallback –∫—É—Ä—Å
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB:', error.message);
    return 100;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ATH –∏–∑ CoinMarketCap (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function getCMCPrice() {
  try {
    if (!process.env.CMC_API_KEY) {
      return null;
    }

    const response = await axios.get(
      'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest',
      {
        headers: {
          'X-CMC_PRO_API_KEY': process.env.CMC_API_KEY,
          'Accept': 'application/json'
        },
        params: {
          id: '36465',
          convert: 'USD'
        },
        timeout: 10000
      }
    );

    if (response.data && response.data.data && response.data.data['36465']) {
      const cesData = response.data.data['36465'];
      const quote = cesData.quote;
      
      if (quote.USD) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ CoinMarketCap');
        console.log(`üí∞ –¶–µ–Ω–∞: $${quote.USD.price?.toFixed(6)}`);
        
        const usdToRubRate = await getUSDToRUBRate();
        const priceRub = quote.USD.price * usdToRubRate;
        
        return {
          price: quote.USD.price,
          priceRub: priceRub,
          change24h: quote.USD.percent_change_24h,
          marketCap: quote.USD.market_cap,
          volume24h: quote.USD.volume_24h,
          ath: null, // ATH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ CMC
          source: 'coinmarketcap'
        };
      }
    }
    
    return null;
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ CoinMarketCap API:', error.message);
    return null;
  }
}

async function simulatePriceCommand() {
  console.log('ü§ñ –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /price...\n');
  
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CoinMarketCap
    const cmcData = await getCMCPrice();
    if (cmcData) {
      // –ü–æ–ª—É—á–∞–µ–º ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      const maxPriceRecord = await PriceHistory.findOne().sort({ price: -1 });
      const databaseATH = maxPriceRecord ? maxPriceRecord.price : cmcData.price;
      
      const finalATH = Math.max(databaseATH, cmcData.price);
      
      const priceData = {
        price: cmcData.price,
        priceRub: cmcData.priceRub,
        change24h: cmcData.change24h,
        marketCap: cmcData.marketCap,
        volume24h: cmcData.volume24h,
        ath: finalATH,
        source: 'coinmarketcap'
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await new PriceHistory(priceData).save();
      console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $${priceData.price.toFixed(2)} | ATH: $${priceData.ath.toFixed(2)}\n`);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const changeEmoji = priceData.change24h >= 0 ? 'üî∫' : 'üîª';
      const changeSign = priceData.change24h >= 0 ? '+' : '';
      const isNewATH = priceData.price >= priceData.ath;
      const athDisplay = isNewATH ? `üèÜ $ ${priceData.ath.toFixed(2)}` : `$ ${priceData.ath.toFixed(2)}`;
      const sourceEmoji = 'üÑ≤üÑºüÑ≤';
      
      function formatNumber(num) {
        if (num >= 1e9) return (num / 1e9).toFixed(2) + 'B';
        if (num >= 1e6) return (num / 1e6).toFixed(2) + 'M';
        if (num >= 1e3) return (num / 1e3).toFixed(2) + 'K';
        return num.toFixed(2);
      }
      
      const message = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ CES: $ ${priceData.price.toFixed(2)}${priceData.priceRub > 0 ? ` | ‚ÇΩ ${priceData.priceRub.toFixed(2)}` : ' | ‚ÇΩ 0.00'} ${sourceEmoji}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${priceData.change24h.toFixed(2)}% ‚Ä¢ üÖ• $ ${formatNumber(priceData.volume24h)} ‚Ä¢ üÖêüÖ£üÖó ${athDisplay}`;
      
      console.log('üì± –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
      console.log(message);
      console.log('\n‚úÖ –ö–æ–º–∞–Ω–¥–∞ /price –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
      console.log(`‚úÖ –†—É–±–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è: ${priceData.priceRub > 0 ? '–î–ê' : '–ù–ï–¢'} (‚ÇΩ${priceData.priceRub.toFixed(2)})`);
      console.log(`‚úÖ ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${databaseATH.toFixed(2)} ‚Üí –§–∏–Ω–∞–ª—å–Ω—ã–π ATH: ${finalATH.toFixed(2)}`);
      
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CoinMarketCap');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
simulatePriceCommand().catch(console.error);