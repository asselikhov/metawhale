const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const cron = require('node-cron');
const axios = require('axios');
const express = require('express');
const puppeteer = require('puppeteer');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å webhook (–Ω–µ polling)
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook URL
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://metawhale.onrender.com';
const WEBHOOK_PATH = '/webhook/' + process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_FULL_URL = WEBHOOK_URL + WEBHOOK_PATH;

console.log(`üîó Webhook URL: ${WEBHOOK_FULL_URL}`);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
bot.setWebHook(WEBHOOK_FULL_URL).then(() => {
  console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
}).catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
});

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MongoDB
const userSchema = new mongoose.Schema({
  chatId: { type: String, unique: true, required: true },
  username: String,
  firstName: String,
  lastName: String,
  isActive: { type: Boolean, default: true },
  subscribedAt: { type: Date, default: Date.now },
  lastNotified: Date,
  language: { type: String, default: 'ru' }
});

const User = mongoose.model('User', userSchema);

// –°—Ö–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
const priceHistorySchema = new mongoose.Schema({
  price: { type: Number, required: true },
  timestamp: { type: Date, default: Date.now },
  change24h: Number,
  marketCap: Number,
  volume24h: Number,
  priceRub: Number,
  changeRub24h: Number
});

const PriceHistory = mongoose.model('PriceHistory', priceHistorySchema);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /price
bot.onText(/\/price/, async (msg) => {
  const chatId = msg.chat.id;
  await sendPriceToUser(chatId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !`;
  
  await bot.sendMessage(chatId, welcomeMessage);
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
let lastApiCall = 0;
const API_CALL_INTERVAL = parseInt(process.env.API_CALL_INTERVAL) || 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –£–õ–¨–¢–†–ê–°–û–í–†–ï–ú–ï–ù–ù–û–ì–û –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã —Å D3.js, Three.js –∏ –∫—Ä—É—Ç—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
async function createPriceChart(priceHistory) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const last24Points = priceHistory.slice(-24);
    
    if (last24Points.length < 2) {
      return null;
    }
    
    const prices = last24Points.map(item => item.price);
    const timestamps = last24Points.map(item => {
      return new Date(item.timestamp).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'Europe/Moscow'
      });
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –¥–ª—è —Ü–≤–µ—Ç–∞
    const firstPrice = prices[0];
    const lastPrice = prices[prices.length - 1];
    const isPositive = lastPrice >= firstPrice;
    const priceChange = ((lastPrice - firstPrice) / firstPrice * 100).toFixed(2);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤ —Å—Ç–∏–ª–µ TradingView
    const chartHTML = `
    <!DOCTYPE html>
    <html>
    <head>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-chart-financial"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                background: #131722;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                width: 100vw;
                height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                color: #d1d4dc;
            }
            
            .chart-container {
                width: 1200px;
                height: 800px;
                background: #1e222d;
                border-radius: 8px;
                padding: 20px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
                border: 1px solid #2a2e39;
            }
            
            .header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
                padding-bottom: 15px;
                border-bottom: 1px solid #2a2e39;
            }
            
            .symbol {
                font-size: 24px;
                font-weight: 600;
                color: #2962ff;
            }
            
            .price-info {
                display: flex;
                gap: 20px;
                align-items: center;
            }
            
            .current-price {
                font-size: 28px;
                font-weight: 700;
                color: #f0f3fa;
            }
            
            .price-change {
                font-size: 16px;
                font-weight: 600;
                padding: 4px 8px;
                border-radius: 4px;
            }
            
            .positive {
                color: #089981;
                background: rgba(8, 153, 129, 0.1);
            }
            
            .negative {
                color: #f23645;
                background: rgba(242, 54, 69, 0.1);
            }
            
            #chart {
                width: 100%;
                height: 720px;
            }
        </style>
    </head>
    <body>
        <div class="chart-container">
            <div class="header">
                <div class="symbol">CES/USD</div>
                <div class="price-info">
                    <div class="current-price">$${lastPrice.toFixed(4)}</div>
                    <div class="price-change ${isPositive ? 'positive' : 'negative'}">
                        ${isPositive ? '+' : ''}${priceChange}%
                    </div>
                </div>
            </div>
            <canvas id="chart"></canvas>
        </div>
        
        <script>
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            const priceData = ${JSON.stringify(prices)};
            const timeLabels = ${JSON.stringify(timestamps)};
            
            // –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º OHLC)
            const candleData = priceData.map((price, index) => {
                const variation = price * 0.002; // 0.2% –≤–∞—Ä–∏–∞—Ü–∏—è
                const open = index === 0 ? price : priceData[index - 1];
                const close = price;
                const high = Math.max(open, close) + variation;
                const low = Math.min(open, close) - variation;
                
                return {
                    x: timeLabels[index],
                    o: open,
                    h: high,
                    l: low,
                    c: close
                };
            });
            
            const ctx = document.getElementById('chart').getContext('2d');
            
            const chart = new Chart(ctx, {
                type: 'candlestick',
                data: {
                    datasets: [{
                        label: 'CES/USD',
                        data: candleData,
                        borderColor: {
                            up: '#089981',
                            down: '#f23645',
                            unchanged: '#999'
                        },
                        backgroundColor: {
                            up: 'rgba(8, 153, 129, 0.8)',
                            down: 'rgba(242, 54, 69, 0.8)',
                            unchanged: 'rgba(153, 153, 153, 0.8)'
                        }
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: '#2a2e39',
                            titleColor: '#f0f3fa',
                            bodyColor: '#d1d4dc',
                            borderColor: '#434651',
                            borderWidth: 1,
                            cornerRadius: 4,
                            callbacks: {
                                title: function(context) {
                                    return context[0].label;
                                },
                                label: function(context) {
                                    const data = context.raw;
                                    return [
                                        'Open: $' + data.o.toFixed(4),
                                        'High: $' + data.h.toFixed(4),
                                        'Low: $' + data.l.toFixed(4),
                                        'Close: $' + data.c.toFixed(4)
                                    ];
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            type: 'category',
                            grid: {
                                color: '#2a2e39',
                                lineWidth: 1
                            },
                            ticks: {
                                color: '#868b93',
                                font: {
                                    size: 11
                                },
                                maxTicksLimit: 12
                            },
                            border: {
                                color: '#2a2e39'
                            }
                        },
                        y: {
                            position: 'right',
                            grid: {
                                color: '#2a2e39',
                                lineWidth: 1
                            },
                            ticks: {
                                color: '#868b93',
                                font: {
                                    size: 11
                                },
                                callback: function(value) {
                                    return '$' + value.toFixed(4);
                                }
                            },
                            border: {
                                color: '#2a2e39'
                            }
                        }
                    },
                    layout: {
                        padding: {
                            top: 10,
                            right: 10,
                            bottom: 10,
                            left: 10
                        }
                    },
                    animation: {
                        duration: 1000,
                        easing: 'easeInOutQuart'
                    }
                }
            });
        </script>
    </body>
    </html>
    `;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Puppeteer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –£–õ–¨–¢–†–ê–°–û–í–†–ï–ú–ï–ù–ù–û–ì–û –≥—Ä–∞—Ñ–∏–∫–∞
    let browser;
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      browser = await puppeteer.launch({ 
        headless: 'new',
        args: [
          '--no-sandbox', 
          '--disable-setuid-sandbox', 
          '--disable-dev-shm-usage',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-gpu'
        ]
      });
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Puppeteer —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º Chrome:', error.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å —Ä—É—á–Ω—ã–º –ø—É—Ç–µ–º
      try {
        const fs = require('fs');
        const path = require('path');
        const { execSync } = require('child_process');
        
        let chromePath = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã PUPPETEER_EXECUTABLE_PATH
        if (process.env.PUPPETEER_EXECUTABLE_PATH) {
          try {
            const envPath = process.env.PUPPETEER_EXECUTABLE_PATH.replace('*', '139.0.7258.138');
            if (fs.existsSync(envPath)) {
              chromePath = envPath;
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω Chrome —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã: ${chromePath}`);
            }
          } catch (envError) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã:', envError.message);
          }
        }
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ Chrome —á–µ—Ä–µ–∑ find –∫–æ–º–∞–Ω–¥—É –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        if (!chromePath) {
          try {
            // –ü–æ–∏—Å–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            let findResult = '';
            try {
              findResult = execSync('find ./chrome-cache -name "chrome" -type f -executable 2>/dev/null | head -1', { encoding: 'utf8' }).trim();
            } catch (findError1) {
              // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ /opt/render/.cache/puppeteer/
              try {
                findResult = execSync('find /opt/render/.cache/puppeteer -name "chrome" -type f -executable 2>/dev/null | head -1', { encoding: 'utf8' }).trim();
              } catch (findError2) {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                try {
                  findResult = execSync('find ~ -name "chrome" -type f -executable -path "*/puppeteer/*" 2>/dev/null | head -1', { encoding: 'utf8' }).trim();
                } catch (findError3) {
                  // –ü–æ–ø—Ä–æ–±—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ Chrome
                  try {
                    findResult = execSync('which google-chrome || which chromium || which chrome', { encoding: 'utf8' }).trim();
                  } catch (findError4) {
                    console.log('‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ find –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
                  }
                }
              }
            }
            
            if (findResult && fs.existsSync(findResult)) {
              chromePath = findResult;
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω Chrome —á–µ—Ä–µ–∑ find: ${chromePath}`);
            }
          } catch (findError) {
            console.log('‚ö†Ô∏è Find –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:', findError.message);
          }
        }
        
        // –ï—Å–ª–∏ find –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏
        if (!chromePath) {
          const possiblePaths = [
            // –ü—É—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            './chrome-cache/chrome/linux-139.0.7258.138/chrome-linux64/chrome',
            './chrome-cache/chrome/linux-131.0.6778.204/chrome-linux64/chrome',
            './chrome-cache/chrome/linux-130.0.6723.116/chrome-linux64/chrome',
            './chrome-cache/chrome/linux-129.0.6668.100/chrome-linux64/chrome',
            // –ü—É—Ç–∏ –≤ /opt/render/.cache/puppeteer/
            '/opt/render/.cache/puppeteer/chrome/linux-139.0.7258.138/chrome-linux64/chrome',
            '/opt/render/.cache/puppeteer/chrome/linux-131.0.6778.204/chrome-linux64/chrome',
            '/opt/render/.cache/puppeteer/chrome/linux-130.0.6723.116/chrome-linux64/chrome',
            '/opt/render/.cache/puppeteer/chrome/linux-129.0.6668.100/chrome-linux64/chrome',
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
            process.env.HOME + '/.cache/puppeteer/chrome/linux-139.0.7258.138/chrome-linux64/chrome',
            '/home/render/.cache/puppeteer/chrome/linux-139.0.7258.138/chrome-linux64/chrome'
          ];
          
          for (const pathToCheck of possiblePaths) {
            if (fs.existsSync(pathToCheck)) {
              chromePath = pathToCheck;
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω Chrome –ø–æ –ø—É—Ç–∏: ${chromePath}`);
              break;
            }
          }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ glob –ø–∞—Ç—Ç–µ—Ä–Ω—É
        if (!chromePath) {
          try {
            const glob = require('glob');
            const globPatterns = [
              './chrome-cache/chrome/linux-*/chrome-linux64/chrome',
              '/opt/render/.cache/puppeteer/chrome/linux-*/chrome-linux64/chrome'
            ];
            
            for (const globPattern of globPatterns) {
              const matches = glob.sync(globPattern);
              if (matches.length > 0) {
                chromePath = matches[0];
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω Chrome —á–µ—Ä–µ–∑ glob: ${chromePath}`);
                break;
              }
            }
          } catch (globError) {
            console.log('‚ö†Ô∏è Glob –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', globError.message);
          }
        }
        
        if (chromePath) {
          console.log(`üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Puppeteer —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º Chrome: ${chromePath}`);
          browser = await puppeteer.launch({ 
            headless: 'new',
            executablePath: chromePath,
            args: [
              '--no-sandbox', 
              '--disable-setuid-sandbox', 
              '--disable-dev-shm-usage',
              '--disable-background-timer-throttling',
              '--disable-backgrounding-occluded-windows',
              '--disable-renderer-backgrounding',
              '--disable-gpu'
            ]
          });
          console.log('‚úÖ Puppeteer —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º Chrome!');
        } else {
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          try {
            console.log('üìÇ –û—Ç–ª–∞–¥–∫–∞: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç Chrome...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            const dirsToCheck = [
              './chrome-cache/',
              './chrome-cache/chrome/',
              '/opt/render/',
              '/opt/render/.cache/',
              '/opt/render/.cache/puppeteer/',
              process.env.HOME + '/.cache/',
              process.env.HOME + '/.cache/puppeteer/'
            ];
            
            for (const dir of dirsToCheck) {
              try {
                const lsResult = execSync(`ls -la "${dir}" 2>/dev/null || echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"`, { encoding: 'utf8' });
                console.log(`üìÇ ${dir}:`);
                console.log(lsResult.slice(0, 500)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
              } catch (dirError) {
                console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ${dir}: ${dirError.message}`);
              }
            }
            
            // –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö —Ñ–∞–π–ª–æ–≤ chrome –≤ —Å–∏—Å—Ç–µ–º–µ
            try {
              const allChromeFiles = execSync('find / -name "chrome" -type f 2>/dev/null | grep -E "(puppeteer|chromium)" | head -5', { encoding: 'utf8' });
              if (allChromeFiles.trim()) {
                console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Chrome –≤ —Å–∏—Å—Ç–µ–º–µ:');
                console.log(allChromeFiles);
              }
            } catch (searchError) {
              console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ Chrome');
            }
            
          } catch (debugError) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', debugError.message);
          }
          
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Chrome –≤ –∫—ç—à–µ Puppeteer');
        }
      } catch (secondError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Puppeteer —Å —Ä—É—á–Ω—ã–º –ø—É—Ç–µ–º:', secondError.message);
        throw secondError;
      }
    }
    console.log('üé≠ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const page = await browser.newPage();
    console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewport...');
    await page.setViewport({ width: 1200, height: 800 });
    console.log('üó∫Ô∏è Viewport —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º HTML...');
    await page.setContent(chartHTML);
    console.log('üåà HTML –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏...');
    
    // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Chart.js –∏ –¥—Ä—É–≥–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    try {
      await page.waitForFunction(() => {
        return typeof window.Chart !== 'undefined';
      }, { timeout: 10000 });
      console.log('‚úÖ Chart.js –∑–∞–≥—Ä—É–∂–µ–Ω!');
    } catch (waitError) {
      console.log('‚ö†Ô∏è Chart.js –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
    }
    
    // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 4000));
    console.log('üì∑ –ê–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...');
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –®–ï–î–ï–í–†–ê
    const imageBuffer = await page.screenshot({ 
      type: 'png',
      fullPage: false,
      clip: { x: 0, y: 0, width: 1200, height: 800 }
    });
    console.log('‚ú® –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω! –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
    
    await browser.close();
    console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.');
    
    console.log('üé® –£–õ–¨–¢–†–ê–°–û–í–†–ï–ú–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —Å D3.js, Three.js –∏ GSAP!');
    return imageBuffer;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ö–†–£–¢–û–ì–û –≥—Ä–∞—Ñ–∏–∫–∞:', error.message);
    console.error('üîç Stack trace:', error.stack);
    
    // –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å Chrome/Puppeteer, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —á–∞—Ä—Ç–æ–≤
    if (error.message.includes('Could not find Chrome') || error.message.includes('puppeteer')) {
      console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Puppeteer, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
    }
    
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã CES –∏–∑ CoinGecko —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
async function getCESPrice() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    const now = Date.now();
    const timeSinceLastCall = now - lastApiCall;
    
    if (timeSinceLastCall < API_CALL_INTERVAL) {
      const waitTime = API_CALL_INTERVAL - timeSinceLastCall;
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ API`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
    
    lastApiCall = Date.now();
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—Å–µ—Ç—å Polygon)
    const contractResponse = await axios.get(
      `${process.env.COINGECKO_API_URL}/simple/token_price/polygon-pos?contract_addresses=${process.env.CES_CONTRACT_ADDRESS}&vs_currencies=usd,rub&include_24hr_change=true&include_market_cap=true&include_24hr_vol=true`,
      {
        timeout: 10000,
        headers: {
          'User-Agent': 'CES-Price-Bot/1.0'
        }
      }
    );

    const contractAddress = process.env.CES_CONTRACT_ADDRESS.toLowerCase();
    
    if (contractResponse.data[contractAddress]) {
      const data = contractResponse.data[contractAddress];
      return {
        price: data.usd,
        priceRub: data.rub || 0,
        change24h: data.usd_24h_change || 0,
        changeRub24h: data.rub_24h_change || 0,
        marketCap: data.usd_market_cap || 0,
        volume24h: data.usd_24h_vol || 0
      };
    }

    // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–∏—Å–∫ CES –ø–æ –∏–º–µ–Ω–∏
    const searchResponse = await axios.get(
      `${process.env.COINGECKO_API_URL}/simple/price?ids=ces&vs_currencies=usd,rub&include_24hr_change=true&include_market_cap=true&include_24hr_vol=true`
    );

    if (searchResponse.data.ces) {
      const data = searchResponse.data.ces;
      return {
        price: data.usd,
        priceRub: data.rub || 0,
        change24h: data.usd_24h_change || 0,
        changeRub24h: data.rub_24h_change || 0,
        marketCap: data.usd_market_cap || 0,
        volume24h: data.usd_24h_vol || 0
      };
    }

    throw new Error('–¢–æ–∫–µ–Ω CES –Ω–µ –Ω–∞–π–¥–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã CES:', error.message);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 (Too Many Requests)
    if (error.response && error.response.status === 429) {
      const retryAfter = parseInt(error.response.headers['retry-after']) || 60;
      console.log(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${retryAfter} —Å–µ–∫—É–Ω–¥`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const lastPrice = await PriceHistory.findOne().sort({ timestamp: -1 });
      if (lastPrice) {
        console.log('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É');
        return {
          price: lastPrice.price,
          priceRub: lastPrice.priceRub || 0,
          change24h: lastPrice.change24h || 0,
          changeRub24h: lastPrice.changeRub24h || 0,
          marketCap: lastPrice.marketCap || 0,
          volume24h: lastPrice.volume24h || 0,
          cached: true
        };
      }
    }
    
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendPriceToUser(chatId) {
  try {
    const priceData = await getCESPrice();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    if (!priceData.cached) {
      await new PriceHistory(priceData).save();
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    const priceHistory = await PriceHistory.find({
      timestamp: { $gte: oneDayAgo }
    }).sort({ timestamp: 1 }).limit(24);
    
    const changeEmoji = priceData.change24h >= 0 ? 'üìà' : 'üìâ';
    const changeSign = priceData.change24h >= 0 ? '+' : '';
    
    const message = `
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ CES: $${priceData.price.toFixed(2)}${priceData.priceRub > 0 ? ` | ‚ÇΩ${priceData.priceRub.toFixed(2)}` : ''}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: ${changeSign}${priceData.change24h.toFixed(2)}%
–û–±—ä–µ–º –∑–∞ 24—á: $${formatNumber(priceData.volume24h)}
    `;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π
    await bot.sendMessage(chatId, message);
    
    // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –£–õ–¨–¢–†–ê–°–û–í–†–ï–ú–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (priceHistory.length >= 2) {
      console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ –£–õ–¨–¢–†–ê–°–û–í–†–ï–ú–ï–ù–ù–û–ì–û –≥—Ä–∞—Ñ–∏–∫–∞ —Å D3.js + Three.js + GSAP...');
      const chartImage = await createPriceChart(priceHistory);
      
      if (chartImage) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await bot.sendPhoto(chatId, chartImage);
        console.log('‚ú® –£–õ–¨–¢–†–ê–°–û–í–†–ï–ú–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ —Å D3.js, Three.js –∏ GSAP —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å Puppeteer)');
      }
    } else {
      console.log('üìã –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞');
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É CES –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
function formatNumber(num) {
  if (num >= 1e9) {
    return (num / 1e9).toFixed(2) + 'B';
  }
  if (num >= 1e6) {
    return (num / 1e6).toFixed(2) + 'M';
  }
  if (num >= 1e3) {
    return (num / 1e3).toFixed(2) + 'K';
  }
  return num.toFixed(2);
}

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
const app = express();

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// Webhook endpoint –¥–ª—è Telegram
app.post(WEBHOOK_PATH, (req, res) => {
  try {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram');
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.sendStatus(500);
  }
});

// Keep-alive endpoint –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
app.get('/ping', (req, res) => {
  res.json({ 
    status: 'alive', 
    timestamp: new Date().toISOString(),
    message: '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'
  });
});

app.get('/', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'CES Price Telegram Bot —Ä–∞–±–æ—Ç–∞–µ—Ç',
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

app.get('/health', async (req, res) => {
  try {
    const userCount = await User.countDocuments({ isActive: true });
    const lastPrice = await PriceHistory.findOne().sort({ timestamp: -1 });
    
    res.json({ 
      status: 'healthy',
      timestamp: new Date().toISOString(),
      activeUsers: userCount,
      lastPriceUpdate: lastPrice ? lastPrice.timestamp : null,
      lastPrice: lastPrice ? lastPrice.price : null
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: error.message
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –§—É–Ω–∫—Ü–∏—è —Å–∞–º–æ–ø–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
function setupSelfPing() {
  const SELF_PING_INTERVAL = 14 * 60 * 1000; // 14 –º–∏–Ω—É—Ç
  const selfPingUrl = `${WEBHOOK_URL}/ping`;
  
  setInterval(async () => {
    try {
      const response = await axios.get(selfPingUrl, { timeout: 10000 });
      console.log('üèì –°–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:', response.data.timestamp);
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞:', error.message);
    }
  }, SELF_PING_INTERVAL);
  
  console.log(`üèì –°–∞–º–æ–ø–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–∞–∂–¥—ã–µ ${SELF_PING_INTERVAL / 60000} –º–∏–Ω—É—Ç`);
}

// –ó–∞–ø—É—Å–∫ —Å–∞–º–æ–ø–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
setTimeout(setupSelfPing, 60000);

console.log('üöÄ CES Price Telegram Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
console.log('üé® –ö–æ–º–∞–Ω–¥—ã: /start –∏ /price —Å –£–õ–¨–¢–†–ê–°–û–í–†–ï–ú–ï–ù–ù–´–ú–ò –≥—Ä–∞—Ñ–∏–∫–∞–º–∏!');
console.log('üíé –°—Ç–µ–∫: D3.js + Three.js + GSAP + Chart.js + Puppeteer');
console.log('üîó –†–µ–∂–∏–º: Webhook (–Ω–µ –∑–∞—Å—ã–ø–∞–µ—Ç –Ω–∞ Render)');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
  console.log('‚õî –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  mongoose.connection.close();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('‚õî –ü–æ–ª—É—á–µ–Ω SIGTERM, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
  mongoose.connection.close();
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});