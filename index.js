const { Telegraf } = require('telegraf');
const mongoose = require('mongoose');
const cron = require('node-cron');
const axios = require('axios');
const express = require('express');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook URL
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://metawhale.onrender.com';
const WEBHOOK_PATH = '/webhook';
const WEBHOOK_FULL_URL = WEBHOOK_URL + WEBHOOK_PATH;

console.log(`üîó Webhook URL: ${WEBHOOK_FULL_URL}`);

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MongoDB
const userSchema = new mongoose.Schema({
  chatId: { type: String, unique: true, required: true },
  username: String,
  firstName: String,
  lastName: String,
  isActive: { type: Boolean, default: true },
  subscribedAt: { type: Date, default: Date.now },
  lastNotified: Date,
  language: { type: String, default: 'ru' }
});

const User = mongoose.model('User', userSchema);

// –°—Ö–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
const priceHistorySchema = new mongoose.Schema({
  price: { type: Number, required: true },
  timestamp: { type: Date, default: Date.now },
  change24h: Number,
  marketCap: Number,
  volume24h: Number,
  priceRub: Number,
  changeRub24h: Number,
  ath: Number // ATH (All Time High) –≤ USD
});

const PriceHistory = mongoose.model('PriceHistory', priceHistorySchema);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
    bot.telegram.setWebhook(WEBHOOK_FULL_URL)
      .then(() => console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', WEBHOOK_FULL_URL))
      .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err));
  })
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !';
  await ctx.reply(welcomeMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /price
bot.command('price', async (ctx) => {
  await sendPriceToUser(ctx);
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
let lastApiCall = 0;
const API_CALL_INTERVAL = parseInt(process.env.API_CALL_INTERVAL) || 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞



// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB
async function getUSDToRUBRate() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
    const response = await axios.get('https://api.exchangerate-api.com/v4/latest/USD', {
      timeout: 5000
    });
    
    if (response.data && response.data.rates && response.data.rates.RUB) {
      const rate = response.data.rates.RUB;
      console.log(`üí± –ö—É—Ä—Å USD/RUB: ${rate}`);
      return rate;
    }
    
    console.log('‚ö†Ô∏è –ö—É—Ä—Å RUB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API');
    return 100; // Fallback –∫—É—Ä—Å
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB:', error.message);
    return 100; // Fallback –∫—É—Ä—Å ~100 —Ä—É–±–ª–µ–π –∑–∞ –¥–æ–ª–ª–∞—Ä
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ATH –∏–∑ CoinMarketCap
async function getCMCPrice() {
  try {
    if (!process.env.CMC_API_KEY) {
      console.log('‚ö†Ô∏è CMC API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º CoinMarketCap');
      return null;
    }

    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ CES —Ç–æ–∫–µ–Ω–∞ —Å Polygon...');
    
    // –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ ID 36465 (Whalebit CES –Ω–∞ Polygon)
    try {
      const response = await axios.get(
        'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest',
        {
          headers: {
            'X-CMC_PRO_API_KEY': process.env.CMC_API_KEY,
            'Accept': 'application/json'
          },
          params: {
            id: '36465', // ID –¥–ª—è Whalebit (CES) –Ω–∞ Polygon
            convert: 'USD' // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 –≤–∞–ª—é—Ç—É
          },
          timeout: 10000
        }
      );

      console.log('üìä CMC API Response status:', response.status);
      
      if (response.data && response.data.data && response.data.data['36465']) {
        const cesData = response.data.data['36465'];
        const quote = cesData.quote;
        
        if (quote.USD) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ CoinMarketCap (Whalebit)');
          console.log(`üí∞ –¶–µ–Ω–∞: $${quote.USD.price?.toFixed(6)}`);
          console.log(`üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: ${quote.USD.percent_change_24h?.toFixed(2)}%`);
          
          // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD/RUB –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
          const usdToRubRate = await getUSDToRUBRate();
          const priceRub = quote.USD.price * usdToRubRate;
          
          return {
            price: quote.USD.price,
            priceRub: priceRub,
            change24h: quote.USD.percent_change_24h,
            marketCap: quote.USD.market_cap,
            volume24h: quote.USD.volume_24h,
            ath: null, // ATH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ CMC
            source: 'coinmarketcap'
          };
        }
      }
    } catch (idError) {
      console.log('‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ ID 36465 –Ω–µ—É–¥–∞—á–µ–Ω:', idError.message);
      
      if (idError.response) {
        console.log('‚ùå CMC API Error (ID):', idError.response.status, idError.response.data);
      }
    }
    
    // –ú–µ—Ç–æ–¥ 2: Fallback - –ø–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    console.log('üîÑ Fallback: –ø–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É CES...');
    
    try {
      const response = await axios.get(
        'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest',
        {
          headers: {
            'X-CMC_PRO_API_KEY': process.env.CMC_API_KEY,
            'Accept': 'application/json'
          },
          params: {
            symbol: 'CES',
            convert: 'USD' // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 –≤–∞–ª—é—Ç—É
          },
          timeout: 10000
        }
      );
      
      if (response.data && response.data.data && response.data.data.CES) {
        const cesTokens = response.data.data.CES;
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${cesTokens.length} —Ç–æ–∫–µ–Ω(–æ–≤) —Å —Å–∏–º–≤–æ–ª–æ–º CES`);
        
        // –ò—â–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ Polygon —Å–µ—Ç–∏ –∏–ª–∏ —Å –Ω–∞—à–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
        let cesData = cesTokens.find(token => 
          (token.platform && token.platform.name && token.platform.name.toLowerCase().includes('polygon')) ||
          (token.platform && token.platform.token_address && 
           token.platform.token_address.toLowerCase() === '0x1bdf71ede1a4777db1eebe7232bcda20d6fc1610')
        );
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Polygon, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        if (!cesData && cesTokens.length > 0) {
          cesData = cesTokens[0];
          console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω CES –Ω–∞ Polygon –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
        }
        
        if (cesData && cesData.quote && cesData.quote.USD) {
          const quote = cesData.quote;
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ CoinMarketCap (fallback)');
          
          // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD/RUB –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
          const usdToRubRate = await getUSDToRUBRate();
          const priceRub = quote.USD.price * usdToRubRate;
          
          return {
            price: quote.USD.price,
            priceRub: priceRub,
            change24h: quote.USD.percent_change_24h,
            marketCap: quote.USD.market_cap,
            volume24h: quote.USD.volume_24h,
            ath: null, // ATH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ CMC
            source: 'coinmarketcap'
          };
        }
      }
    } catch (symbolError) {
      console.log('‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É CES –Ω–µ—É–¥–∞—á–µ–Ω:', symbolError.message);
      
      if (symbolError.response) {
        console.log('‚ùå CMC API Error (Symbol):', symbolError.response.status, symbolError.response.data);
      }
    }

    console.log('‚ö†Ô∏è CES —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CoinMarketCap –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏');
    return null;
  } catch (error) {
    console.log('‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ CoinMarketCap API:', error.message);
    if (error.response) {
      console.log('‚ùå HTTP Status:', error.response.status);
      console.log('‚ùå Response data:', error.response.data);
    }
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã CES —á–µ—Ä–µ–∑ CoinMarketCap
async function getCESPrice() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    const now = Date.now();
    const timeSinceLastCall = now - lastApiCall;
    
    if (timeSinceLastCall < API_CALL_INTERVAL) {
      const waitTime = API_CALL_INTERVAL - timeSinceLastCall;
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ API`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
    
    lastApiCall = Date.now();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CoinMarketCap
    const cmcData = await getCMCPrice();
    if (cmcData) {
      // –ü–æ–ª—É—á–∞–µ–º ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ CMC –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç ATH
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      const maxPriceRecord = await PriceHistory.findOne().sort({ price: -1 });
      const databaseATH = maxPriceRecord ? maxPriceRecord.price : cmcData.price;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π ATH (–º–∞–∫—Å–∏–º—É–º –∏–∑ –±–∞–∑—ã –∏–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞)
      const finalATH = Math.max(databaseATH, cmcData.price);
      
      if (cmcData.price >= finalATH) {
        console.log(`üèÜ –ù–æ–≤—ã–π ATH –æ–±–Ω–∞—Ä—É–∂–µ–Ω! $${cmcData.price.toFixed(2)}`);
      }
      
      console.log(`üìä ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $${databaseATH.toFixed(2)}`);
      console.log(`üìä –§–∏–Ω–∞–ª—å–Ω—ã–π ATH: $${finalATH.toFixed(2)}`);
      
      return {
        price: cmcData.price,
        priceRub: cmcData.priceRub,
        change24h: cmcData.change24h,
        changeRub24h: 0, // CMC –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä—É–±–ª—è—Ö
        marketCap: cmcData.marketCap,
        volume24h: cmcData.volume24h,
        ath: finalATH, // ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        source: 'coinmarketcap'
      };
    }

    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ CES –∏–∑ CoinMarketCap');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã CES:', error.message);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const lastPrice = await PriceHistory.findOne().sort({ timestamp: -1 });
    if (lastPrice) {
      console.log('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏
      let priceRub = lastPrice.priceRub || 0;
      if (!priceRub && lastPrice.price) {
        const usdToRubRate = await getUSDToRUBRate();
        priceRub = lastPrice.price * usdToRubRate;
      }
      
      return {
        price: lastPrice.price,
        priceRub: priceRub,
        change24h: lastPrice.change24h || 0,
        changeRub24h: lastPrice.changeRub24h || 0,
        marketCap: lastPrice.marketCap || 0,
        volume24h: lastPrice.volume24h || 0,
        ath: lastPrice.ath || lastPrice.price,
        source: 'database',
        cached: true
      };
    }
    
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendPriceToUser(ctx) {
  try {
    const priceData = await getCESPrice();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /price)
    if (!priceData.cached) {
      await new PriceHistory(priceData).save();
      console.log(`üíæ –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $${priceData.price.toFixed(2)} | ATH: $${priceData.ath.toFixed(2)}`);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    const changeEmoji = priceData.change24h >= 0 ? 'üî∫' : 'üîª'; // üî∫ –¥–ª—è —Ä–æ—Å—Ç–∞, üîª –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
    const changeSign = priceData.change24h >= 0 ? '+' : '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ATH
    const isNewATH = priceData.price >= priceData.ath;
    const athDisplay = isNewATH ? `üèÜ $ ${priceData.ath.toFixed(2)}` : `$ ${priceData.ath.toFixed(2)}`;
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const sourceEmoji = priceData.source === 'database' ? 'üóÑÔ∏è' : 'üÑ≤üÑºüÑ≤';
    
    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    const message = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ CES: $ ${priceData.price.toFixed(2)}${priceData.priceRub > 0 ? ` | ‚ÇΩ ${priceData.priceRub.toFixed(2)}` : ' | ‚ÇΩ 0.00'} ${sourceEmoji}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${priceData.change24h.toFixed(2)}% ‚Ä¢ üÖ• $ ${formatNumber(priceData.volume24h)} ‚Ä¢ üÖêüÖ£üÖó ${athDisplay}`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    await ctx.reply(message);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É CES –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
function formatNumber(num) {
  if (num >= 1e9) {
    return (num / 1e9).toFixed(2) + 'B';
  }
  if (num >= 1e6) {
    return (num / 1e6).toFixed(2) + 'M';
  }
  if (num >= 1e3) {
    return (num / 1e3).toFixed(2) + 'K';
  }
  return num.toFixed(2);
}

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
const app = express();

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// Webhook endpoint –¥–ª—è Telegram
app.use(bot.webhookCallback(WEBHOOK_PATH));

// Keep-alive endpoint –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
app.get('/ping', (req, res) => {
  res.json({ 
    status: 'alive', 
    timestamp: new Date().toISOString(),
    message: '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'
  });
});

app.get('/', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'CES Price Telegram Bot —Ä–∞–±–æ—Ç–∞–µ—Ç',
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

app.get('/health', async (req, res) => {
  try {
    const userCount = await User.countDocuments({ isActive: true });
    const lastPrice = await PriceHistory.findOne().sort({ timestamp: -1 });
    
    res.json({ 
      status: 'healthy',
      timestamp: new Date().toISOString(),
      activeUsers: userCount,
      lastPriceUpdate: lastPrice ? lastPrice.timestamp : null,
      lastPrice: lastPrice ? lastPrice.price : null
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: error.message
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –§—É–Ω–∫—Ü–∏—è —Å–∞–º–æ–ø–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
function setupSelfPing() {
  const SELF_PING_INTERVAL = 14 * 60 * 1000; // 14 –º–∏–Ω—É—Ç
  const selfPingUrl = `${WEBHOOK_URL}/ping`;
  
  setInterval(async () => {
    try {
      const response = await axios.get(selfPingUrl, { timeout: 10000 });
      console.log('üèì –°–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:', response.data.timestamp);
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞:', error.message);
    }
  }, SELF_PING_INTERVAL);
  
  console.log(`üèì –°–∞–º–æ–ø–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–∞–∂–¥—ã–µ ${SELF_PING_INTERVAL / 60000} –º–∏–Ω—É—Ç`);
}

// –ó–∞–ø—É—Å–∫ —Å–∞–º–æ–ø–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
setTimeout(setupSelfPing, 60000);

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –ª–∏–º–∏—Ç–æ–≤
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /price
console.log('üìä –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω–æ - —ç–∫–æ–Ω–æ–º–∏–º API –ª–∏–º–∏—Ç—ã');

console.log('üöÄ CES Price Telegram Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
console.log('üìä –ö–æ–º–∞–Ω–¥—ã: /start –∏ /price');
console.log('üîó –†–µ–∂–∏–º: Webhook (–Ω–µ –∑–∞—Å—ã–ø–∞–µ—Ç –Ω–∞ Render)');
console.log('‚öôÔ∏è ATH: –ù–∞–ø—Ä—è–º—É—é –∏–∑ CoinMarketCap (CMC)');
console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¢–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /price (—ç–∫–æ–Ω–æ–º–∏—è API)');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
  console.log('‚õî –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  mongoose.connection.close();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('‚õî –ü–æ–ª—É—á–µ–Ω SIGTERM, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
  mongoose.connection.close();
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});