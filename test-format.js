// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ ATH
require('dotenv').config();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testCases = [
  {
    name: "–¶–µ–Ω–∞ –Ω–∏–∂–µ ATH",
    currentPrice: 3.18,
    historicalATH: 4.25,
    expectedATH: 4.25,
    expectedEmoji: ""
  },
  {
    name: "–¶–µ–Ω–∞ —Ä–∞–≤–Ω–∞ ATH", 
    currentPrice: 4.25,
    historicalATH: 4.25,
    expectedATH: 4.25,
    expectedEmoji: "üèÜ"
  },
  {
    name: "–ù–æ–≤—ã–π ATH",
    currentPrice: 4.50,
    historicalATH: 4.25, 
    expectedATH: 4.50,
    expectedEmoji: "üèÜ"
  },
  {
    name: "–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å (–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏)",
    currentPrice: 2.80,
    historicalATH: null,
    expectedATH: 2.80,
    expectedEmoji: "üèÜ"
  }
];

// –§—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ ATH
function simulateATHLogic(currentPrice, historicalATH) {
  // –õ–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ
  let athValue = historicalATH || currentPrice;
  let finalATH = Math.max(athValue, currentPrice);
  let isNewATH = currentPrice >= finalATH;
  
  return {
    ath: finalATH,
    isNewATH: isNewATH
  };
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatNumber(num) {
  if (num >= 1e9) {
    return (num / 1e9).toFixed(2) + 'B';
  }
  if (num >= 1e6) {
    return (num / 1e6).toFixed(2) + 'M';
  }
  if (num >= 1e3) {
    return (num / 1e3).toFixed(2) + 'K';
  }
  return num.toFixed(2);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function runATHTests() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ ATH...\n');
  
  let passedTests = 0;
  
  testCases.forEach((testCase, index) => {
    const result = simulateATHLogic(testCase.currentPrice, testCase.historicalATH);
    
    const passed = result.ath === testCase.expectedATH && 
                   result.isNewATH === (testCase.expectedEmoji === "üèÜ");
    
    console.log(`–¢–µ—Å—Ç ${index + 1}: ${testCase.name}`);
    console.log(`  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${testCase.currentPrice.toFixed(2)}`);
    console.log(`  –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π ATH: ${testCase.historicalATH ? '$' + testCase.historicalATH.toFixed(2) : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`  –û–∂–∏–¥–∞–µ–º—ã–π ATH: $${testCase.expectedATH.toFixed(2)}`);
    console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç ATH: $${result.ath.toFixed(2)}`);
    console.log(`  –ù–æ–≤—ã–π ATH: ${result.isNewATH ? '–î–∞ üèÜ' : '–ù–µ—Ç'}`);
    console.log(`  –°—Ç–∞—Ç—É—Å: ${passed ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'}\n`);
    
    if (passed) passedTests++;
  });
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${passedTests}/${testCases.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  
  if (passedTests === testCases.length) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –õ–æ–≥–∏–∫–∞ ATH —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.');
  }
}

// –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function testMessageFormat() {
  console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...\n');
  
  const testData = {
    price: 3.18,
    priceRub: 256.40,
    change24h: -3.58,
    volume24h: 1170000,
    ath: 4.25
  };
  
  const changeEmoji = testData.change24h >= 0 ? 'üî∫' : 'üîª';
  const changeSign = testData.change24h >= 0 ? '+' : '';
  const isNewATH = testData.price >= testData.ath;
  const athDisplay = isNewATH ? `üèÜ $ ${testData.ath.toFixed(2)}` : `$ ${testData.ath.toFixed(2)}`;
  
  const message = `üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ CES: $ ${testData.price.toFixed(2)} | ‚ÇΩ ${testData.priceRub.toFixed(2)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${testData.change24h.toFixed(2)}% ‚Ä¢ üÖ• $ ${formatNumber(testData.volume24h)} ‚Ä¢ üÖêüÖ£üÖó ${athDisplay}`;
  
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(message);
  console.log('\n‚úÖ –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ ATH...\n');
runATHTests();
testMessageFormat();
console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüîß –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–æ–≥–∏–∫–µ:');
console.log('‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ATH');
console.log('‚Ä¢ –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö');
console.log('‚Ä¢ ATH —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –º–∞–∫—Å–∏–º—É–º –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã');
console.log('‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ üèÜ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ ATH');