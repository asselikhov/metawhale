// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CoinMarketCap API
require('dotenv').config();
const axios = require('axios');

async function testCMCIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CoinMarketCap API...\n');
  
  if (!process.env.CMC_API_KEY) {
    console.log('‚ùå CMC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('üìã –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª: CMC_API_KEY=your_api_key_here');
    console.log('üîó –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á: https://coinmarketcap.com/api/');
    return;
  }
  
  console.log('‚úÖ CMC API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω');
  console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ CES –≤ CoinMarketCap...\n');
  
  try {
    // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª—É CES
    const response = await axios.get(
      'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest',
      {
        headers: {
          'X-CMC_PRO_API_KEY': process.env.CMC_API_KEY,
          'Accept': 'application/json'
        },
        params: {
          symbol: 'CES',
          convert: 'USD,RUB'
        },
        timeout: 10000
      }
    );
    
    console.log('üìä –û—Ç–≤–µ—Ç CoinMarketCap API:');
    console.log('Status:', response.status);
    console.log('Credits used:', response.headers['x-cmcpro-api-plan-credit-limit-daily-used'] || 'N/A');
    console.log('Credits remaining:', response.headers['x-cmcpro-api-plan-credit-limit-daily-remaining'] || 'N/A');
    
    if (response.data && response.data.data && response.data.data.CES) {
      const cesTokens = response.data.data.CES;
      console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–æ ${cesTokens.length} —Ç–æ–∫–µ–Ω(–æ–≤) —Å —Å–∏–º–≤–æ–ª–æ–º CES:`);
      
      cesTokens.forEach((token, index) => {
        console.log(`\n--- –¢–æ–∫–µ–Ω ${index + 1} ---`);
        console.log(`ID: ${token.id}`);
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${token.name}`);
        console.log(`–°–∏–º–≤–æ–ª: ${token.symbol}`);
        console.log(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${token.platform?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${token.platform?.token_address || 'N/A'}`);
        
        if (token.quote && token.quote.USD) {
          const quote = token.quote.USD;
          console.log(`\nüí∞ –¶–µ–Ω–∞: $${quote.price?.toFixed(4) || 'N/A'}`);
          console.log(`üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: ${quote.percent_change_24h?.toFixed(2) || 'N/A'}%`);
          console.log(`üíé –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø: $${quote.market_cap ? (quote.market_cap / 1e6).toFixed(2) + 'M' : 'N/A'}`);
          console.log(`üìä –û–±—ä–µ–º 24—á: $${quote.volume_24h ? (quote.volume_24h / 1e6).toFixed(2) + 'M' : 'N/A'}`);
          console.log(`üèÜ ATH: $${quote.ath || '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à —Ç–æ–∫–µ–Ω CES –Ω–∞ Polygon
          if (token.platform?.token_address?.toLowerCase() === '0x1bdf71ede1a4777db1eebe7232bcda20d6fc1610') {
            console.log(`\nüéØ –≠–¢–û –ù–ê–® –¢–û–ö–ï–ù CES –Ω–∞ Polygon!`);
            console.log(`‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ`);
          }
        }
        
        if (token.quote && token.quote.RUB) {
          console.log(`üí∞ –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: ‚ÇΩ${token.quote.RUB.price?.toFixed(2) || 'N/A'}`);
        }
      });
      
      console.log('\nüéâ –¢–µ—Å—Ç CoinMarketCap API —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
      console.log('üí° CoinMarketCap –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ATH');
    } else {
      console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω CES –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CoinMarketCap');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('‚Ä¢ –¢–æ–∫–µ–Ω –Ω–µ –ª–∏—Å—Ç–∏—Ç—Å—è –Ω–∞ CoinMarketCap');
      console.log('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª');
      console.log('‚Ä¢ –¢–æ–∫–µ–Ω –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö CMC');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ CoinMarketCap API:');
    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    
    if (error.response) {
      console.error('HTTP Status:', error.response.status);
      console.error('Response:', error.response.data);
      
      if (error.response.status === 401) {
        console.log('\nüîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:');
        console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
        console.log('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω');
      } else if (error.response.status === 429) {
        console.log('\n‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:');
        console.log('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏');
        console.log('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      }
    }
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID
async function testCMCByID() {
  if (!process.env.CMC_API_KEY) return;
  
  console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º ID —Ç–æ–∫–µ–Ω–∞ CES...\n');
  
  const possibleIds = [1027, 2700, 8916, 7129]; // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ ID –¥–ª—è CES —Ç–æ–∫–µ–Ω–æ–≤
  
  for (const id of possibleIds) {
    try {
      const response = await axios.get(
        'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest',
        {
          headers: {
            'X-CMC_PRO_API_KEY': process.env.CMC_API_KEY,
            'Accept': 'application/json'
          },
          params: {
            id: id,
            convert: 'USD'
          },
          timeout: 5000
        }
      );
      
      if (response.data && response.data.data && response.data.data[id]) {
        const token = response.data.data[id];
        if (token.symbol === 'CES') {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω CES —Ç–æ–∫–µ–Ω –ø–æ ID ${id}: ${token.name}`);
        }
      }
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CoinMarketCap API...\n');
testCMCIntegration().then(() => {
  return testCMCByID();
}).then(() => {
  console.log('\n‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}).catch(console.error);