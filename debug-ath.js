// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ATH
require('dotenv').config();
const mongoose = require('mongoose');

// –°—Ö–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
const priceHistorySchema = new mongoose.Schema({
  price: { type: Number, required: true },
  timestamp: { type: Date, default: Date.now },
  change24h: Number,
  marketCap: Number,
  volume24h: Number,
  priceRub: Number,
  changeRub24h: Number,
  ath: Number // ATH (All Time High) –≤ USD
});

const PriceHistory = mongoose.model('PriceHistory', priceHistorySchema);

async function diagnoseATH() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã ATH...\n');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ\n');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const totalRecords = await PriceHistory.countDocuments();
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: ${totalRecords}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
    const maxPriceRecord = await PriceHistory.findOne().sort({ price: -1 });
    const maxPrice = maxPriceRecord ? maxPriceRecord.price : 0;
    console.log(`üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: $${maxPrice.toFixed(2)}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    const lastRecord = await PriceHistory.findOne().sort({ timestamp: -1 });
    if (lastRecord) {
      console.log(`üìà –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:`);
      console.log(`   –¶–µ–Ω–∞: $${lastRecord.price.toFixed(2)}`);
      console.log(`   ATH –≤ –∑–∞–ø–∏—Å–∏: $${lastRecord.ath?.toFixed(2) || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      console.log(`   –í—Ä–µ–º—è: ${lastRecord.timestamp}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ATH
    const recordsWithWrongATH = await PriceHistory.find({
      $or: [
        { ath: { $lt: maxPrice } },
        { ath: null },
        { ath: { $exists: false } }
      ]
    }).sort({ timestamp: -1 }).limit(10);
    
    if (recordsWithWrongATH.length > 0) {
      console.log(`\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${recordsWithWrongATH.length} –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ATH:`);
      recordsWithWrongATH.forEach((record, i) => {
        console.log(`${i + 1}. –¶–µ–Ω–∞: $${record.price.toFixed(2)}, ATH: $${record.ath?.toFixed(2) || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}, –í—Ä–µ–º—è: ${record.timestamp}`);
      });
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      console.log(`\nüõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ATH –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π...`);
      const result = await PriceHistory.updateMany(
        {},
        { $set: { ath: maxPrice } }
      );
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.modifiedCount} –∑–∞–ø–∏—Å–µ–π`);
    } else {
      console.log('\n‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ATH');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const recentRecords = await PriceHistory.find().sort({ timestamp: -1 }).limit(5);
    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:');
    recentRecords.forEach((record, i) => {
      const isCorrectATH = record.ath === maxPrice;
      console.log(`${i + 1}. $${record.price.toFixed(2)} | ATH: $${record.ath?.toFixed(2) || 'N/A'} ${isCorrectATH ? '‚úÖ' : '‚ùå'} | ${record.timestamp}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ ATH:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîö –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseATH().catch(console.error);