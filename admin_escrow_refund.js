/**
 * –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∞ owner –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —ç—Å–∫—Ä–æ—É
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { User, EscrowTransaction } = require('./src/database/models');
const { ethers } = require('ethers');

const TARGET_USER_CHAT_ID = '942851377';
const TARGET_WALLET = '0x1A1432d6D4eFe75651f2c39DC1Ec6a5D936f401d';
const ESCROW_CONTRACT_ADDRESS = process.env.ESCROW_CONTRACT_ADDRESS;
const ADMIN_PRIVATE_KEY = process.env.ADMIN_PRIVATE_KEY;

async function adminEscrowRefund() {
  try {
    console.log('üîß –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ô –í–û–ó–í–†–ê–¢ –≠–°–ö–†–û–£');
    console.log('=================================');
    console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${TARGET_USER_CHAT_ID}`);
    console.log(`üéØ –ö–æ—à–µ–ª–µ–∫: ${TARGET_WALLET}`);
    console.log(`üèõÔ∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${ESCROW_CONTRACT_ADDRESS}`);
    console.log('');
    
    if (!ADMIN_PRIVATE_KEY) {
      console.log('‚ùå ADMIN_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
      return;
    }
    
    if (!ESCROW_CONTRACT_ADDRESS) {
      console.log('‚ùå ESCROW_CONTRACT_ADDRESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
      return;
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ chatId: TARGET_USER_CHAT_ID });
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
    console.log(`   –ë–∞–ª–∞–Ω—Å CES: ${user.cesBalance || 0} CES`);
    console.log(`   –í —ç—Å–∫—Ä–æ—É: ${user.escrowCESBalance || 0} CES`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const provider = new ethers.providers.JsonRpcProvider('https://polygon-rpc.com');
    const adminWallet = new ethers.Wallet(ADMIN_PRIVATE_KEY, provider);
    
    const escrowABI = [
      "function refundEscrow(uint256 escrowId) external",
      "function getEscrowDetails(uint256 escrowId) external view returns (address, address, uint256, uint256, uint8)",
      "function isEscrowExpired(uint256 escrowId) external view returns (bool)",
      "function owner() external view returns (address)"
    ];
    
    const escrowContract = new ethers.Contract(ESCROW_CONTRACT_ADDRESS, escrowABI, adminWallet);
    
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:`);
    const contractOwner = await escrowContract.owner();
    console.log(`   Owner –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contractOwner}`);
    console.log(`   Admin –∫–æ—à–µ–ª–µ–∫: ${adminWallet.address}`);
    
    if (contractOwner.toLowerCase() !== adminWallet.address.toLowerCase()) {
      console.log('‚ùå Admin –∫–æ—à–µ–ª–µ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞!');
      return;
    }
    console.log('‚úÖ Admin –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã');
    
    // –ù–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç—Å–∫—Ä–æ—É ID
    const lockTxs = await EscrowTransaction.find({
      userId: user._id,
      type: 'lock',
      tokenType: 'CES',
      smartContractEscrowId: { $exists: true, $ne: null },
      createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    }).sort({ createdAt: -1 });
    
    console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ ${lockTxs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:`);
    
    for (const lockTx of lockTxs) {
      const escrowId = lockTx.smartContractEscrowId;
      console.log(`\nüìã –≠—Å–∫—Ä–æ—É ID ${escrowId}:`);
      console.log(`   –°—É–º–º–∞: ${lockTx.amount} CES`);
      console.log(`   –î–∞—Ç–∞: ${lockTx.createdAt.toLocaleString('ru-RU')}`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Å–∫—Ä–æ—É
        const [seller, buyer, amount, timelock, status] = await escrowContract.getEscrowDetails(escrowId);
        const isExpired = await escrowContract.isEscrowExpired(escrowId);
        
        const statusNames = ['Active', 'Released', 'Refunded', 'Disputed'];
        console.log(`   –°—Ç–∞—Ç—É—Å: ${statusNames[status]} (${status})`);
        console.log(`   –ü—Ä–æ–¥–∞–≤–µ—Ü: ${seller}`);
        console.log(`   –ò—Å—Ç—ë–∫: ${isExpired ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   Timelock: ${new Date(timelock * 1000).toLocaleString('ru-RU')}`);
        
        if (status === 0) { // Active
          console.log(`   üîÑ –í—ã–ø–æ–ª–Ω—è—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç...`);
          
          const tx = await escrowContract.refundEscrow(escrowId, {
            gasLimit: 200000,
            gasPrice: ethers.utils.parseUnits('30', 'gwei')
          });
          
          console.log(`   üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);
          console.log(`   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...`);
          
          const receipt = await tx.wait();
          
          if (receipt.status === 1) {
            console.log(`   ‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–µ–Ω! –ë–ª–æ–∫: ${receipt.blockNumber}`);
            console.log(`   ‚õΩ –ì–∞–∑: ${receipt.gasUsed.toString()}`);
            
            // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.escrowCESBalance -= lockTx.amount;
            user.cesBalance += lockTx.amount;
            await user.save();
            
            // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
            const refundTx = new EscrowTransaction({
              userId: user._id,
              tradeId: lockTx.tradeId,
              type: 'refund',
              tokenType: 'CES',
              amount: lockTx.amount,
              status: 'completed',
              txHash: tx.hash,
              smartContractEscrowId: escrowId,
              reason: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ owner –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
              completedAt: new Date()
            });
            
            await refundTx.save();
            console.log(`   üìù –ó–∞–ø–∏—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∞: ${refundTx._id}`);
            
          } else {
            console.log(`   ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å`);
          }
          
        } else if (status === 2) { // Already refunded
          console.log(`   ‚úÖ –£–∂–µ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ`);
          
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
          const refundTx = await EscrowTransaction.findOne({
            userId: user._id,
            tradeId: lockTx.tradeId,
            type: 'refund',
            smartContractEscrowId: escrowId
          });
          
          if (!refundTx) {
            console.log(`   üìù –°–æ–∑–¥–∞—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ...`);
            
            const missingRefundTx = new EscrowTransaction({
              userId: user._id,
              tradeId: lockTx.tradeId,
              type: 'refund',
              tokenType: 'CES',
              amount: lockTx.amount,
              status: 'completed',
              smartContractEscrowId: escrowId,
              reason: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - —Ç–æ–∫–µ–Ω—ã —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ',
              completedAt: new Date()
            });
            
            await missingRefundTx.save();
            console.log(`   ‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: ${missingRefundTx._id}`);
          }
          
        } else {
          console.log(`   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${statusNames[status]}`);
        }
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Å–∫—Ä–æ—É ${escrowId}:`, error.message);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    await user.reload();
    console.log(`\nüìä –ò–¢–û–ì–û–í–´–ô –ë–ê–õ–ê–ù–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:`);
    console.log(`   CES –±–∞–ª–∞–Ω—Å: ${user.cesBalance || 0} CES`);
    console.log(`   –í —ç—Å–∫—Ä–æ—É: ${user.escrowCESBalance || 0} CES`);
    console.log(`   –û–±—â–∏–π: ${(user.cesBalance || 0) + (user.escrowCESBalance || 0)} CES`);
    
    console.log(`\nüéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  adminEscrowRefund().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { adminEscrowRefund };