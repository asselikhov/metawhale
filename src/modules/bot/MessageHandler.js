/**
 * Message Handler
 * Centralized message handling for the Telegram bot
 */

const { Markup } = require('telegraf');

class MessageHandler {
  async handleStart(ctx) {
    try {
      const welcomeMessage = `
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CES Price Bot!

üìà –ü–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞ CES
üìä –ö—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
üîÑ P2P —Ç–æ—Ä–≥–æ–≤–ª—è —Ç–æ–∫–µ–Ω–∞–º–∏

–ö–æ–º–∞–Ω–¥—ã:
/ces - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ CES
/pol - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ POL
/trx - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ TRX
–∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö...

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:
      `;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'personal_cabinet')],
        [Markup.button.callback('üîÑ P2P –ë–∏—Ä–∂–∞', 'p2p_menu')]
      ]);

      await ctx.reply(welcomeMessage, keyboard);
    } catch (error) {
      console.error('Error in handleStart:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handlePrice(ctx, tokenSymbol = 'CES') {
    try {
      // This is a simplified version - in a full implementation,
      // you would include the price fetching and chart generation logic
      const message = `üìà –¶–µ–Ω–∞ ${tokenSymbol}: $0.0000 (ÊöÇÊó†Êï∞ÊçÆ)
      
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /${tokenSymbol.toLowerCase()}`;

      await ctx.reply(message);
    } catch (error) {
      console.error(`Error in handlePrice for ${tokenSymbol}:`, error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}

module.exports = MessageHandler;