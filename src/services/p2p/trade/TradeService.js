/**
 * P2P Trade Management Service
 * Handles creation, execution, and lifecycle of P2P trades
 */

const { P2PTrade, P2POrder, User } = require('../../../database/models');
const walletService = require('../../wallet/walletService');
const escrowService = require('../../escrow/escrowServiceInstance');
const smartNotificationService = require('../../notification/smartNotificationService');
const reputationService = require('../../reputationService');
const PrecisionUtil = require('../../../utils/PrecisionUtil');
const config = require('../../../config/configuration');

class TradeService {
  constructor() {
    this.commissionRate = 0.01; // 1% commission
    this.defaultTradeTimeout = config.escrow.timeoutMinutes;
  }

  /**
   * –¢–µ–π–∫–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ä–¥–µ—Ä –º–µ–π–∫–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É
   * @param {string} takerChatId - Telegram ID —Ç–µ–π–∫–µ—Ä–∞ (–ø—Ä–æ–¥–∞–≤—Ü–∞ CES)
   * @param {string} buyOrderId - ID –æ—Ä–¥–µ—Ä–∞ –º–µ–π–∫–µ—Ä–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
   * @param {number} cesAmount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CES –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
   * @returns {Promise<{success: boolean, tradeId?: string, error?: string}>}
   */
  async createTradeFromOrder(takerChatId, buyOrderId, cesAmount) {
    try {
      console.log(`–¢–µ–π–∫–µ—Ä ${takerChatId} —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É –ø–æ –æ—Ä–¥–µ—Ä—É ${buyOrderId} –Ω–∞ ${cesAmount} CES`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –º–µ–π–∫–µ—Ä–∞
      const buyOrder = await P2POrder.findById(buyOrderId).populate('userId');
      if (!buyOrder || buyOrder.status !== 'active') {
        return { success: false, error: '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
      }
      
      // Add null check for buyOrder.userId
      if (!buyOrder.userId) {
        return { success: false, error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–¥–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–π–∫–µ—Ä–∞
      const taker = await User.findOne({ chatId: takerChatId });
      if (!taker) {
        return { success: false, error: '–¢–µ–π–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–≤–æ–π –æ—Ä–¥–µ—Ä
      if (buyOrder.userId._id.toString() === taker._id.toString()) {
        return { success: false, error: '–ù–µ–ª—å–∑—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –æ—Ä–¥–µ—Ä–æ–º' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      if (cesAmount < buyOrder.minTradeAmount || cesAmount > buyOrder.maxTradeAmount) {
        return { 
          success: false, 
          error: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${buyOrder.minTradeAmount} –¥–æ ${buyOrder.maxTradeAmount} CES` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ–π–∫–µ—Ä–∞
      if (taker.balance < buyOrder.pricePerUnit * cesAmount) {
        return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏' };
      }
      
      if (cesAmount > buyOrder.remainingAmount) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –≤ –æ—Ä–¥–µ—Ä–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${buyOrder.remainingAmount} CES` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å CES —É —Ç–µ–π–∫–µ—Ä–∞ (–∏—Å–∫–ª—é—á–∞—è —ç—Å–∫—Ä–æ—É)
      const walletInfo = await walletService.getUserWallet(taker.chatId);
      
      // üîß FIX BUG: Reserve funds for 1% commission when takers sell their coins
      // Takers need to have enough funds to cover both the sale amount and potential commission
      // The commission will be determined later based on order creation times, but we need to 
      // ensure they have funds in case they become the maker
      const amountWithCommission = cesAmount * (1 + this.commissionRate);
      
      if (walletInfo.cesBalance < amountWithCommission) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CES —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ 1%. –î–æ—Å—Ç—É–ø–Ω–æ: ${walletInfo.cesBalance.toFixed(4)} CES, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amountWithCommission.toFixed(4)} CES (–≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é ${this.commissionRate * 100}%)` 
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ —É –º–µ–π–∫–µ—Ä–∞ (–∏—Å–∫–ª—é—á–∞—è —ç—Å–∫—Ä–æ—É)
      const makerWalletInfo = await walletService.getUserWallet(buyOrder.userId.chatId);
      if (makerWalletInfo[tokenSymbol].balance < tokenAmount) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ ${tokenSymbol}. –î–æ—Å—Ç—É–ø–Ω–æ: ${makerWalletInfo[tokenSymbol].balance.toFixed(4)} ${tokenSymbol}` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–π–∫–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–π–∫–µ—Ä–æ–º
      if (taker.chatId === buyOrder.userId.chatId) {
        return { 
          success: false, 
          error: `–¢–µ–π–∫–µ—Ä –∏ –º–µ–π–∫–µ—Ä –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const token = await tokenService.getTokenBySymbol(tokenSymbol);
      if (!token) {
        return { 
          success: false, 
          error: `–¢–æ–∫–µ–Ω —Å —Å–∏–º–≤–æ–ª–æ–º ${tokenSymbol} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–¥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
      if (buyOrder.status !== 'active') {
        return { 
          success: false, 
          error: '–û—Ä–¥–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
      if (buyOrder.price !== price) {
        return { 
          success: false, 
          error: `–¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ (${buyOrder.price}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ (${price})` 
        };
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      try {
        await walletService.transferCes(taker.chatId, buyOrder.userId.chatId, cesAmount);
        await walletService.transferToken(buyOrder.userId.chatId, taker.chatId, tokenSymbol, tokenAmount);
        buyOrder.remainingAmount = 0;
        buyOrder.status = 'filled';
        await buyOrder.save();
      } catch (error) {
        return { 
          success: false, 
          error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–π–∫–µ—Ä–∞
      if (!taker.p2pProfile || !taker.p2pProfile.isProfileComplete) {
        return { success: false, error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å P2P –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫' };
      }
      
      // üîß FIX BUG #2: Race condition protection - recheck order availability
      const currentBuyOrder = await P2POrder.findById(buyOrderId);
      if (!currentBuyOrder || currentBuyOrder.status !== 'active' || currentBuyOrder.remainingAmount < cesAmount) {
        // Release already locked escrow
        await escrowService.refundTokensFromEscrow(taker._id, null, 'CES', cesAmount, 'Order no longer available');
        return { 
          success: false, 
          error: '–û—Ä–¥–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ CES' 
        };
      }
      
      // Now safely lock tokens in escrow after race condition check
      const escrowResult = await escrowService.lockTokensInEscrow(
        taker._id,
        buyOrder.userId._id,
        'CES',
        cesAmount,
        this.defaultTradeTimeout
      );
      
      if (!escrowResult.success) {
        return { 
          success: false, 
          error: `–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Å–∫—Ä–æ—É: ${escrowResult.error}` 
        };
      }
      
      // Create the trade record
      const trade = new P2PTrade({
        buyerId: buyOrder.userId._id,
        sellerId: taker._id,
        orderId: buyOrder._id,
        amount: cesAmount,
        pricePerToken: buyOrder.pricePerToken,
        totalValue: cesAmount * buyOrder.pricePerToken,
        status: 'escrow_locked',
        escrowId: escrowResult.escrowId,
        paymentMethods: buyOrder.paymentMethods,
        timeoutAt: new Date(Date.now() + this.defaultTradeTimeout * 60 * 1000)
      });
      
      await trade.save();
      
      // Update order remaining amount
      currentBuyOrder.remainingAmount -= cesAmount;
      if (currentBuyOrder.remainingAmount <= 0) {
        currentBuyOrder.status = 'filled';
      } else {
        currentBuyOrder.status = 'partial';
      }
      await currentBuyOrder.save();
      
      // Notify both parties
      await this.notifyTradeParticipants(trade);
      
      console.log(`–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${trade._id}`);
      return { success: true, tradeId: trade._id };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
      return { success: false, error: error.message };
    }
  }

  // Notify trade participants
  async notifyTradeParticipants(trade) {
    try {
      const buyer = await User.findById(trade.buyerId);
      const seller = await User.findById(trade.sellerId);
      
      if (buyer && seller) {
        // Notify buyer
        await smartNotificationService.sendSmartTradeStatusNotification(
          buyer._id,
          trade,
          'escrow_locked'
        );
        
        // Notify seller
        await smartNotificationService.sendSmartTradeStatusNotification(
          seller._id,
          trade,
          'escrow_locked'
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏:', error);
    }
  }

  // Get user trades
  async getUserTrades(chatId, page = 1, limit = 10, status = null) {
    try {
      const user = await User.findOne({ chatId });
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const skip = (page - 1) * limit;
      
      const query = {
        $or: [
          { buyerId: user._id },
          { sellerId: user._id }
        ]
      };
      
      if (status) {
        query.status = status;
      }
      
      const trades = await P2PTrade.find(query)
        .populate('buyerId', 'username trustScore')
        .populate('sellerId', 'username trustScore')
        .populate('orderId')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit);
      
      const total = await P2PTrade.countDocuments(query);
      
      return {
        trades,
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit)
        }
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // Update user trading statistics
  async updateUserStats(buyerId, sellerId, tradeValue, tradeStatus) {
    try {
      const updates = {
        $inc: {
          'tradeAnalytics.totalTrades': 1,
          'tradeAnalytics.successfulTrades': tradeStatus === 'completed' ? 1 : 0,
          'tradingVolumeLast30Days': tradeValue
        }
      };
      
      await Promise.all([
        User.findByIdAndUpdate(buyerId, updates),
        User.findByIdAndUpdate(sellerId, updates)
      ]);
      
      // Update trust scores
      await reputationService.updateRatingAfterTrade(buyerId, tradeStatus);
      await reputationService.updateRatingAfterTrade(sellerId, tradeStatus);
      
      console.log(`Updated trading stats and trust scores for users`);
      
    } catch (error) {
      console.error('Error updating user stats:', error);
    }
  }
}

module.exports = TradeService;