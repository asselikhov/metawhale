/**
 * P2P Order Management Service
 * Handles creation, management, and lifecycle of P2P orders
 */

const { P2POrder, User } = require('../../../database/models');
const walletService = require('../../wallet/walletService');
const rubleReserveService = require('../../rubleReserveService');
const config = require('../../../config/configuration');

class OrderService {
  constructor() {
    this.commissionRate = 0.01; // 1% commission
    this.maxOrderAmount = 10000; // Maximum order amount in CES
    this.minOrderAmount = 1; // Minimum order amount in CES
  }

  // Create a buy order (–º–µ–π–∫–µ—Ä —Å–æ–∑–¥–∞—ë—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É CES –∑–∞ —Ä—É–±–ª–∏)
  async createBuyOrder(chatId, amount, pricePerToken, minTradeAmount = 1, maxTradeAmount = null) {
    try {
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: ${amount} CES –ø–æ ‚ÇΩ${pricePerToken} –∑–∞ —Ç–æ–∫–µ–Ω (chatId: ${chatId})`);
      
      const user = await User.findOne({ chatId });
      if (!user) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chatId: ${chatId}`);
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (!user.walletAddress) {
        console.log(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞`);
        throw new Error('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å P2P
      if (!user.p2pProfile || !user.p2pProfile.isProfileComplete) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å P2P –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç: —Ç–æ–ª—å–∫–æ 1 –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingBuyOrder = await P2POrder.findOne({
        userId: user._id,
        type: 'buy',
        status: { $in: ['active', 'partial'] }
      });
      
      if (existingBuyOrder) {
        throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É. –û—Ç–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (amount <= 0 || pricePerToken <= 0) {
        console.log(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: amount=${amount}, price=${pricePerToken}`);
        throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω/–º–∞–∫—Å —Å—É–º–º
      if (minTradeAmount <= 0) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      if (maxTradeAmount && maxTradeAmount <= 0) {
        throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      if (minTradeAmount > amount) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
      }
      
      if (maxTradeAmount && maxTradeAmount > amount) {
        throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
      }
      
      if (minTradeAmount > (maxTradeAmount || amount)) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
      }
      
      const totalValue = amount * pricePerToken;
      console.log(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞: ‚ÇΩ${totalValue.toFixed(2)}`);
      
      // üîß FIX: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã 1% –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
      const commissionAmount = amount * this.commissionRate; // 1% –∫–æ–º–∏—Å—Å–∏—è –≤ CES
      const walletInfo = await walletService.getUserWallet(user.chatId);
      const availableBalance = walletInfo.cesBalance;
      
      if (availableBalance < commissionAmount) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ 1%. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance.toFixed(4)} CES, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${commissionAmount.toFixed(4)} CES`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä—É–±–ª–µ–π —É –º–µ–π–∫–µ—Ä–∞
      const availableRubleBalance = await rubleReserveService.getAvailableBalance(user._id.toString());
      
      if (availableRubleBalance < totalValue) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±–ª–µ–π. –î–æ—Å—Ç—É–ø–Ω–æ: ‚ÇΩ${availableRubleBalance.toFixed(2)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ‚ÇΩ${totalValue.toFixed(2)}`);
      }
      
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É`);
      const buyOrder = new P2POrder({
        userId: user._id,
        type: 'buy',
        amount: amount,
        pricePerToken: pricePerToken,
        totalValue: totalValue,
        remainingAmount: amount,
        minTradeAmount: minTradeAmount,
        maxTradeAmount: maxTradeAmount || amount,
        paymentMethods: ['bank_transfer'], // –ú–µ–π–∫–µ—Ä –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
        status: 'active'
      });
      
      await buyOrder.save();
      
      // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ä—É–±–ª–∏ —É –º–µ–π–∫–µ—Ä–∞
      const reserveResult = await rubleReserveService.reserveForOrder(
        user._id.toString(),
        buyOrder._id.toString(),
        totalValue
      );
      
      if (!reserveResult.success) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä
        await P2POrder.deleteOne({ _id: buyOrder._id });
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤: ${reserveResult.message}`);
      }
      
      console.log(`–û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–æ–∑–¥–∞–Ω: ${buyOrder._id}`);
      console.log(`–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ ‚ÇΩ${totalValue} —É –º–µ–π–∫–µ—Ä–∞ ${user._id}`);
      
      return buyOrder;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:', error);
      throw error;
    }
  }

  // Cancel an order
  async cancelOrder(orderId, userChatId) {
    try {
      console.log(`–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: ${orderId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userChatId}`);
      
      const order = await P2POrder.findById(orderId).populate('userId');
      if (!order) {
        throw new Error('–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
      if (order.userId.chatId !== userChatId) {
        throw new Error('–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ—Ä–¥–µ—Ä–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
      if (!['active', 'partial'].includes(order.status)) {
        throw new Error('–û—Ä–¥–µ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω');
      }
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
      const rubleReserveService = require('../../utility/rubleReserveService');
      const releaseResult = await rubleReserveService.releaseForOrder(
        order.userId._id.toString(),
        order._id.toString(),
        order.totalValue
      );
      
      if (!releaseResult.success) {
        console.warn(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ ${orderId}: ${releaseResult.message}`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
      order.status = 'cancelled';
      order.cancelledAt = new Date();
      await order.save();
      
      console.log(`–û—Ä–¥–µ—Ä ${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω`);
      return { success: true, message: '–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω' };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞:', error);
      throw error;
    }
  }

  // Get active orders with pagination
  async getActiveOrders(page = 1, limit = 10, filters = {}) {
    try {
      const skip = (page - 1) * limit;
      
      const query = {
        status: 'active',
        ...filters
      };
      
      const orders = await P2POrder.find(query)
        .populate('userId', 'username trustScore p2pProfile')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit);
      
      const total = await P2POrder.countDocuments(query);
      
      return {
        orders,
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit)
        }
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error);
      throw error;
    }
  }
}

module.exports = OrderService;