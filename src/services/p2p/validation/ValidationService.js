/**
 * P2P Validation Service
 * Handles validation of orders, trades, and user data
 */

const { P2POrder, P2PTrade, User } = require('../../../database/models');
const walletService = require('../../wallet/walletService');
const rubleReserveService = require('../../rubleReserveService');

class ValidationService {
  // Validate user rights for P2P operations
  async validateUserForP2POperations(chatId) {
    try {
      const user = await User.findOne({ chatId });
      if (!user) {
        return {
          valid: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          keyboard: null
        };
      }
      
      // Check if user has a wallet
      if (!user.walletAddress) {
        return {
          valid: false,
          message: '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞.\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è P2P —Ñ—É–Ω–∫—Ü–∏–π.',
          keyboard: [[{ text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'personal_cabinet' }]]
        };
      }
      
      // Check if user has completed P2P profile
      if (!user.p2pProfile || !user.p2pProfile.isProfileComplete) {
        return {
          valid: false,
          message: '‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å P2P –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –æ–±–º–µ–Ω–∞.\n\nüí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ P2P –ø—Ä–æ—Ñ–∏–ª—è.',
          keyboard: [[{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ P2P', callback_data: 'p2p_profile_settings' }]]
        };
      }
      
      return {
        valid: true,
        user
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è P2P –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
      return {
        valid: false,
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'p2p_menu' }]]
      };
    }
  }

  // Validate order creation parameters
  validateOrderParameters(amount, pricePerToken, minTradeAmount, maxTradeAmount) {
    const errors = [];
    
    // Validate amount and price
    if (amount <= 0) {
      errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }
    
    if (pricePerToken <= 0) {
      errors.push('–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }
    
    // Validate min/max trade amounts
    if (minTradeAmount <= 0) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }
    
    if (maxTradeAmount && maxTradeAmount <= 0) {
      errors.push('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }
    
    if (minTradeAmount > amount) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
    }
    
    if (maxTradeAmount && maxTradeAmount > amount) {
      errors.push('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
    }
    
    if (minTradeAmount > (maxTradeAmount || amount)) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
    }
    
    return {
      valid: errors.length === 0,
      errors
    };
  }

  // Validate user balance for order creation
  async validateUserBalanceForOrder(user, amount, pricePerToken) {
    try {
      const totalValue = amount * pricePerToken;
      const commissionRate = 0.01; // 1% commission
      const commissionAmount = amount * commissionRate;
      
      // Check CES balance for commission
      const walletInfo = await walletService.getUserWallet(user.chatId);
      const availableBalance = walletInfo.cesBalance;
      
      if (availableBalance < commissionAmount) {
        return {
          valid: false,
          message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ 1%. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance.toFixed(4)} CES, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${commissionAmount.toFixed(4)} CES`
        };
      }
      
      // Check ruble balance
      const availableRubleBalance = await rubleReserveService.getAvailableBalance(user._id.toString());
      
      if (availableRubleBalance < totalValue) {
        return {
          valid: false,
          message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±–ª–µ–π. –î–æ—Å—Ç—É–ø–Ω–æ: ‚ÇΩ${availableRubleBalance.toFixed(2)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ‚ÇΩ${totalValue.toFixed(2)}`
        };
      }
      
      return {
        valid: true
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return {
        valid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      };
    }
  }

  // Validate trade creation
  async validateTradeCreation(takerChatId, buyOrderId, cesAmount) {
    try {
      // Get the buy order
      const buyOrder = await P2POrder.findById(buyOrderId).populate('userId');
      if (!buyOrder || buyOrder.status !== 'active') {
        return {
          valid: false,
          error: '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
        };
      }
      
      // Get the taker
      const taker = await User.findOne({ chatId: takerChatId });
      if (!taker) {
        return {
          valid: false,
          error: '–¢–µ–π–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }
      
      // Check if it's the same user
      if (buyOrder.userId._id.toString() === taker._id.toString()) {
        return {
          valid: false,
          error: '–ù–µ–ª—å–∑—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –æ—Ä–¥–µ—Ä–æ–º'
        };
      }
      
      // Check limits
      if (cesAmount < buyOrder.minTradeAmount || cesAmount > buyOrder.maxTradeAmount) {
        return {
          valid: false,
          error: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${buyOrder.minTradeAmount} –¥–æ ${buyOrder.maxTradeAmount} CES`
        };
      }
      
      // Check taker balance
      if (taker.balance < buyOrder.pricePerUnit * cesAmount) {
        return {
          valid: false,
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏'
        };
      }
      
      if (cesAmount > buyOrder.remainingAmount) {
        return {
          valid: false,
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –≤ –æ—Ä–¥–µ—Ä–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${buyOrder.remainingAmount} CES`
        };
      }
      
      // Check available CES balance for taker (including potential commission)
      const walletInfo = await walletService.getUserWallet(taker.chatId);
      const commissionRate = 0.01;
      const amountWithCommission = cesAmount * (1 + commissionRate);
      
      if (walletInfo.cesBalance < amountWithCommission) {
        return {
          valid: false,
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CES —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ 1%. –î–æ—Å—Ç—É–ø–Ω–æ: ${walletInfo.cesBalance.toFixed(4)} CES, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amountWithCommission.toFixed(4)} CES (–≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é ${commissionRate * 100}%)`
        };
      }
      
      return {
        valid: true,
        buyOrder,
        taker
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
      return {
        valid: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      };
    }
  }
}

module.exports = ValidationService;