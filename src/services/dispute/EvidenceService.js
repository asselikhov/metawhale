/**
 * Evidence Service
 * Handles evidence submission and management for P2P trade disputes
 */

const { P2PTrade, User } = require('../../database/models');

class EvidenceService {
  constructor(parentService) {
    this.parentService = parentService;
  }

  /**
   * üìù –ü–û–î–ê–ß–ê –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í
   * –ü–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–ø–æ—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
   */
  async submitEvidence(tradeId, userChatId, evidenceType, content, description) {
    try {
      console.log(`üìù [DISPUTE] Submitting evidence for trade ${tradeId}`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
        
      if (!trade || trade.status !== 'disputed') {
        throw new Error('–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      }
      
      const user = await User.findOne({ chatId: userChatId });
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRole = trade.buyerId._id.toString() === user._id.toString() ? 'buyer' : 'seller';
      
      if (trade.buyerId._id.toString() !== user._id.toString() && 
          trade.sellerId._id.toString() !== user._id.toString()) {
        throw new Error('–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–µ–ª–∫–∏ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
      const evidence = {
        type: evidenceType,
        content,
        description,
        submittedAt: new Date()
      };
      
      if (!trade.disputeEvidence) {
        trade.disputeEvidence = { buyerEvidence: [], sellerEvidence: [], moderatorNotes: [] };
      }
      
      if (userRole === 'buyer') {
        trade.disputeEvidence.buyerEvidence.push(evidence);
      } else {
        trade.disputeEvidence.sellerEvidence.push(evidence);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
      trade.disputeTracking.participantLastActivity[userRole] = new Date();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞
      if (trade.disputeStatus === 'awaiting_evidence') {
        trade.disputeStatus = 'under_review';
      }
      
      await trade.save();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      await this.parentService.logDisputeAction(tradeId, user._id, 'evidence_submitted', null, null, {
        evidenceType,
        userRole,
        description
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞—Ö
      if (trade.moderatorId) {
        await this.notifyModeratorNewEvidence(trade, user, evidence);
      }
      
      console.log(`‚úÖ [DISPUTE] Evidence submitted for trade ${tradeId} by ${userRole}`);
      
      return { success: true };
      
    } catch (error) {
      console.error(`‚ùå [DISPUTE] Error submitting evidence:`, error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ DisputeHandler
  async notifyModeratorNewEvidence(trade, submitter, evidence) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DisputeHandler
  }
}

module.exports = EvidenceService;