/**
 * Dispute Initiation Service
 * Handles the initiation of disputes for P2P trades
 */

const { P2PTrade, User } = require('../../database/models');
const escrowService = require('../escrow/escrowServiceInstance');
const antiFraudService = require('../utility/antiFraudService');

class DisputeInitiationService {
  constructor(parentService) {
    this.parentService = parentService;
  }

  /**
   * üö® –ò–ù–ò–¶–ò–ê–¶–ò–Ø –°–ü–û–†–ê
   * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–æ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π categor–∏–∑–∞—Ü–∏–µ–π
   */
  async initiateDispute(tradeId, initiatorChatId, category, reason, urgency = 'medium') {
    try {
      console.log(`üö® [DISPUTE] Initiating dispute for trade ${tradeId} by user ${initiatorChatId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
        
      if (!trade) {
        throw new Error('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
      const initiator = await User.findOne({ chatId: initiatorChatId });
      if (!initiator) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Ä–∞
      const canInitiateDispute = await this.parentService.validateDisputeRights(trade, initiator._id);
      if (!canInitiateDispute.allowed) {
        throw new Error(canInitiateDispute.reason);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä–∞
      if (trade.status === 'disputed') {
        throw new Error('–ü–æ –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä');
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–ø–æ—Ä–∞
      const priority = this.parentService.calculateDisputePriority(trade, category, urgency);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
      trade.status = 'disputed';
      trade.disputeInitiatorId = initiator._id;
      trade.disputeCategory = category;
      trade.disputeReason = reason;
      trade.disputePriority = priority;
      trade.disputeStatus = 'open';
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
      trade.disputeTracking = {
        openedAt: new Date(),
        autoEscalationAt: new Date(Date.now() + this.parentService.AUTO_ESCALATION_HOURS * 60 * 60 * 1000),
        participantLastActivity: {
          buyer: new Date(),
          seller: new Date()
        }
      };
      
      await trade.save();
      
      // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
      const moderator = await this.parentService.assignOptimalModerator(trade);
      if (moderator) {
        trade.moderatorId = moderator._id;
        trade.disputeStatus = 'investigating';
        await trade.save();
      }
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è
      await this.parentService.logDisputeAction(tradeId, initiator._id, 'initiated', null, 'open', {
        category,
        reason,
        priority,
        moderatorAssigned: !!moderator
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await this.notifyDisputeInitiated(trade, initiator);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
      this.runFraudAnalysis(trade, initiator);
      
      console.log(`‚úÖ [DISPUTE] Dispute ${tradeId} initiated successfully with priority: ${priority}`);
      
      return {
        success: true,
        disputeId: tradeId,
        priority,
        moderatorAssigned: !!moderator,
        estimatedResolutionTime: this.parentService.estimateResolutionTime(priority)
      };
      
    } catch (error) {
      console.error(`‚ùå [DISPUTE] Error initiating dispute:`, error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ DisputeHandler
  async notifyDisputeInitiated(trade, initiator) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DisputeHandler
  }

  async runFraudAnalysis(trade, initiator) {
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
  }
}

module.exports = DisputeInitiationService;