/**
 * Escalation Service
 * Handles escalation of disputes when they are not resolved in time
 */

const { P2PTrade } = require('../../database/models');

class EscalationService {
  constructor(parentService) {
    this.parentService = parentService;
  }

  /**
   * üîÑ –ê–í–¢–û–≠–°–ö–ê–õ–ê–¶–ò–Ø –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –°–ü–û–†–û–í
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤
   */
  async processAutoEscalation() {
    try {
      console.log('üîÑ [DISPUTE] Processing auto-escalation checks...');
      
      const now = new Date();
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–ø–æ—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
      const disputesToEscalate = await P2PTrade.find({
        status: 'disputed',
        disputeStatus: { $in: ['open', 'investigating'] },
        'disputeTracking.autoEscalationAt': { $lte: now },
        'disputeTracking.escalatedAt': { $exists: false }
      }).populate('buyerId').populate('sellerId').populate('moderatorId');
      
      for (const trade of disputesToEscalate) {
        await this.escalateDispute(trade);
      }
      
      console.log(`‚úÖ [DISPUTE] Auto-escalation completed. Processed ${disputesToEscalate.length} disputes`);
      
    } catch (error) {
      console.error('‚ùå [DISPUTE] Error in auto-escalation:', error);
    }
  }

  /**
   * üìà –≠–°–ö–ê–õ–ê–¶–ò–Ø –°–ü–û–†–ê
   * –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä—à–µ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
   */
  async escalateDispute(trade) {
    try {
      console.log(`üìà [DISPUTE] Escalating dispute ${trade._id}`);
      
      // –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      const currentPriorityIndex = ['low', 'medium', 'high', 'urgent'].indexOf(trade.disputePriority);
      if (currentPriorityIndex < 3) {
        trade.disputePriority = ['low', 'medium', 'high', 'urgent'][currentPriorityIndex + 1];
      }
      
      trade.disputeTracking.escalatedAt = new Date();
      
      // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      const seniorModerator = await this.parentService.findSeniorModerator();
      if (seniorModerator && (!trade.moderatorId || trade.moderatorId._id.toString() !== seniorModerator._id.toString())) {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if (trade.moderatorId) {
          await this.parentService.updateModeratorWorkload(trade.moderatorId, -1);
        }
        
        trade.moderatorId = seniorModerator._id;
        await this.parentService.updateModeratorWorkload(seniorModerator._id, 1);
      }
      
      await trade.save();
      
      // –õ–æ–≥–∏—Ä—É–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
      await this.parentService.logDisputeAction(trade._id, null, 'escalated', null, null, {
        newPriority: trade.disputePriority,
        reassignedModerator: !!seniorModerator
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
      await this.notifyDisputeEscalated(trade);
      
    } catch (error) {
      console.error(`‚ùå [DISPUTE] Error escalating dispute:`, error);
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ DisputeHandler
  async notifyDisputeEscalated(trade) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DisputeHandler
  }
}

module.exports = EscalationService;