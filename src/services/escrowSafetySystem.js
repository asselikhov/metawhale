/**
 * Enhanced Escrow Safety System
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º–æ—Ä–æ–∑–∫—É —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–æ–∫
 */

const { EscrowTransaction, P2PTrade, User } = require('../database/models');

class EscrowSafetySystem {
  constructor() {
    this.retryAttempts = 3;
    this.retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
   */
  async safeCancelTrade(tradeId, reason, userChatId) {
    try {
      console.log(`üõ°Ô∏è [SAFETY] Starting safe trade cancellation: ${tradeId}`);
      
      // 1. –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
      
      if (!trade) {
        throw new Error('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      const isParticipant = trade.buyerId.chatId === userChatId || trade.sellerId.chatId === userChatId;
      if (!isParticipant) {
        throw new Error('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏');
      }
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
      if (!['escrow_locked', 'payment_pending'].includes(trade.status)) {
        throw new Error('–°–¥–µ–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ');
      }
      
      console.log(`üîç [SAFETY] Trade validation passed, proceeding with escrow refund`);
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Å–∫—Ä–æ—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const escrowTx = await EscrowTransaction.findOne({
        tradeId: tradeId,
        type: 'lock',
        tokenType: 'CES',
        status: 'completed'
      });
      
      if (!escrowTx) {
        console.log(`‚ö†Ô∏è [SAFETY] No escrow transaction found for trade ${tradeId}`);
        // –°–¥–µ–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —ç—Å–∫—Ä–æ—É
        return await this.updateTradeStatus(trade, reason);
      }
      
      // 5. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
      const refundResult = await this.safeRefundEscrow(escrowTx, trade, reason);
      
      // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–µ–Ω
      if (refundResult.success) {
        return await this.updateTradeStatus(trade, reason);
      } else {
        // –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è, —Å–¥–µ–ª–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞: ${refundResult.error}`);
      }
      
    } catch (error) {
      console.error(`‚ùå [SAFETY] Safe trade cancellation failed:`, error);
      throw error;
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —ç—Å–∫—Ä–æ—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  async safeRefundEscrow(escrowTx, trade, reason) {
    console.log(`üîÑ [SAFETY] Starting safe escrow refund for trade ${trade._id}`);
    
    for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
      try {
        console.log(`üîÑ [SAFETY] Refund attempt ${attempt}/${this.retryAttempts}`);
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–º–∞—Ä—Ç–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        if (escrowTx.smartContractEscrowId) {
          const statusCheck = await this.checkSmartContractStatus(escrowTx.smartContractEscrowId);
          
          if (!statusCheck.canRefund) {
            if (statusCheck.alreadyRefunded) {
              console.log(`‚úÖ [SAFETY] Escrow already refunded in smart contract`);
              // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              return await this.syncDatabaseAfterRefund(escrowTx, trade.sellerId._id, reason);
            } else {
              throw new Error(`Escrow cannot be refunded: ${statusCheck.reason}`);
            }
          }
        }
        
        // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —ç—Å–∫—Ä–æ—É
        const escrowService = require('./escrowService');
        await escrowService.refundTokensFromEscrow(
          trade.sellerId._id,
          trade._id,
          'CES',
          trade.amount,
          reason
        );
        
        console.log(`‚úÖ [SAFETY] Escrow refund successful on attempt ${attempt}`);
        return { success: true };
        
      } catch (error) {
        console.error(`‚ùå [SAFETY] Refund attempt ${attempt} failed:`, error.message);
        
        if (attempt === this.retryAttempts) {
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
          console.error(`‚ùå [SAFETY] All refund attempts failed for trade ${trade._id}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ
          if (error.message.includes('Smart contract refund failed') || 
              error.message.includes('Manual intervention required')) {
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            await this.createManualInterventionRecord(escrowTx, trade, error.message);
            
            return {
              success: false,
              error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
              requiresManualIntervention: true,
              escrowId: escrowTx.smartContractEscrowId
            };
          }
          
          return { success: false, error: error.message };
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await this.sleep(this.retryDelay);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–∞—Ä—Ç–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   */
  async checkSmartContractStatus(escrowId) {
    try {
      const smartContractService = require('./smartContractService');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ —ç—Å–∫—Ä–æ—É
      const escrowDetails = await smartContractService.getEscrowDetails(escrowId);
      
      // –°—Ç–∞—Ç—É—Å 0 = Active, 1 = Released, 2 = Refunded
      if (escrowDetails.status === 2) {
        return { canRefund: false, alreadyRefunded: true, reason: 'Already refunded' };
      }
      
      if (escrowDetails.status === 1) {
        return { canRefund: false, alreadyRefunded: false, reason: 'Already released to buyer' };
      }
      
      if (escrowDetails.status === 0) {
        return { canRefund: true, alreadyRefunded: false, reason: 'Active and can be refunded' };
      }
      
      return { canRefund: false, alreadyRefunded: false, reason: `Unknown status: ${escrowDetails.status}` };
      
    } catch (error) {
      console.error(`‚ùå [SAFETY] Smart contract status check failed:`, error);
      throw new Error(`Cannot verify smart contract status: ${error.message}`);
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
   */
  async syncDatabaseAfterRefund(escrowTx, userId, reason) {
    try {
      console.log(`üîÑ [SAFETY] Syncing database after external refund`);
      
      const user = await User.findById(userId);
      if (!user) {
        throw new Error('User not found for sync');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.escrowCESBalance = Math.max(0, user.escrowCESBalance - escrowTx.amount);
      user.cesBalance += escrowTx.amount;
      await user.save();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
      const refundTx = new EscrowTransaction({
        userId: userId,
        tradeId: escrowTx.tradeId,
        type: 'refund',
        tokenType: 'CES',
        amount: escrowTx.amount,
        status: 'completed',
        smartContractEscrowId: escrowTx.smartContractEscrowId,
        reason: `Database sync: ${reason}`,
        completedAt: new Date()
      });
      
      await refundTx.save();
      
      console.log(`‚úÖ [SAFETY] Database synced successfully`);
      return { success: true };
      
    } catch (error) {
      console.error(`‚ùå [SAFETY] Database sync failed:`, error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
   */
  async createManualInterventionRecord(escrowTx, trade, errorMessage) {
    try {
      const interventionRecord = new EscrowTransaction({
        userId: trade.sellerId._id,
        tradeId: trade._id,
        type: 'manual_intervention_required',
        tokenType: 'CES',
        amount: trade.amount,
        status: 'pending',
        smartContractEscrowId: escrowTx.smartContractEscrowId,
        reason: `Manual intervention required: ${errorMessage}`,
        createdAt: new Date()
      });
      
      await interventionRecord.save();
      
      console.log(`üìù [SAFETY] Manual intervention record created: ${interventionRecord._id}`);
      return interventionRecord;
      
    } catch (error) {
      console.error(`‚ùå [SAFETY] Failed to create manual intervention record:`, error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
   */
  async updateTradeStatus(trade, reason) {
    try {
      trade.status = 'cancelled';
      trade.escrowStatus = 'returned';
      trade.disputeReason = reason;
      trade.cancelledAt = new Date();
      
      await trade.save();
      
      console.log(`‚úÖ [SAFETY] Trade ${trade._id} status updated to cancelled`);
      return { success: true, trade: trade };
      
    } catch (error) {
      console.error(`‚ùå [SAFETY] Failed to update trade status:`, error);
      throw error;
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö —ç—Å–∫—Ä–æ—É
   */
  async checkStuckEscrows() {
    try {
      console.log(`üîç [SAFETY] Checking for stuck escrows...`);
      
      // –ù–∞—Ö–æ–¥–∏–º —ç—Å–∫—Ä–æ—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
      const stuckEscrows = await EscrowTransaction.find({
        type: 'lock',
        tokenType: 'CES',
        status: 'completed',
        createdAt: { $lt: new Date(Date.now() - 60 * 60 * 1000) }, // 1 —á–∞—Å –Ω–∞–∑–∞–¥
        smartContractEscrowId: { $exists: true, $ne: null }
      });
      
      console.log(`üîç [SAFETY] Found ${stuckEscrows.length} potential stuck escrows`);
      
      for (const escrowTx of stuckEscrows) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–∑–≤—Ä–∞—Ç
        const refundTx = await EscrowTransaction.findOne({
          tradeId: escrowTx.tradeId,
          type: 'refund',
          smartContractEscrowId: escrowTx.smartContractEscrowId
        });
        
        if (!refundTx) {
          console.log(`‚ö†Ô∏è [SAFETY] Found stuck escrow: ${escrowTx._id}, smart contract ID: ${escrowTx.smartContractEscrowId}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–º–∞—Ä—Ç–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
          try {
            const statusCheck = await this.checkSmartContractStatus(escrowTx.smartContractEscrowId);
            
            if (statusCheck.alreadyRefunded) {
              console.log(`üîÑ [SAFETY] Syncing stuck escrow ${escrowTx._id}`);
              await this.syncDatabaseAfterRefund(escrowTx, escrowTx.userId, 'Automatic sync of stuck escrow');
            }
          } catch (statusError) {
            console.error(`‚ùå [SAFETY] Cannot check status of stuck escrow ${escrowTx._id}:`, statusError);
          }
        }
      }
      
      console.log(`‚úÖ [SAFETY] Stuck escrow check completed`);
      
    } catch (error) {
      console.error(`‚ùå [SAFETY] Stuck escrow check failed:`, error);
    }
  }
}

module.exports = new EscrowSafetySystem();