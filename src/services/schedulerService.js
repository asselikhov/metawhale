/**
 * Scheduler Service
 * Handles scheduled tasks like daily price messages
 */

const cron = require('node-cron');
const config = require('../config/configuration');
const priceService = require('./priceService');
const { PriceHistory, P2POrder } = require('../database/models');
const smartNotificationService = require('./smartNotificationService');

class SchedulerService {
  constructor(bot = null) {
    this.bot = bot;
    this.tasks = new Map();
    this.cachedPriceData = null;
    this.lastCacheUpdate = 0;
    this.cacheTTL = 30000; // 30 seconds
    this.lastMessageSent = 0; // Track last message timestamp to prevent duplicates
    this.messageCooldown = 60000; // 1 minute cooldown between messages
  }

  // Set bot instance
  setBot(bot) {
    this.bot = bot;
  }

  // Get cached or fresh price data
  async getPriceData() {
    const now = Date.now();
    
    // Return cached data if still valid
    if (this.cachedPriceData && (now - this.lastCacheUpdate) < this.cacheTTL) {
      return this.cachedPriceData;
    }
    
    // Fetch fresh data
    try {
      const priceData = await priceService.getCESPrice();
      
      // Update cache
      this.cachedPriceData = priceData;
      this.lastCacheUpdate = now;
      
      // Save to database in background
      if (!priceData.cached) {
        // Use setImmediate to avoid blocking
        setImmediate(async () => {
          try {
            await new PriceHistory(priceData).save();
            console.log(`üíæ Price data saved: $${priceData.price.toFixed(2)} | ATH: $${priceData.ath.toFixed(2)}`);
          } catch (saveError) {
            console.error('Error saving price data:', saveError);
          }
        });
      }
      
      return priceData;
    } catch (error) {
      console.error('Error fetching price data:', error);
      
      // Return cached data even if stale as fallback
      if (this.cachedPriceData) {
        return this.cachedPriceData;
      }
      
      throw error;
    }
  }

  // Send price to group
  async sendPriceToGroup() {
    const targetGroupId = config.schedule.groupId;
    
    try {
      // Prevent duplicate messages within cooldown period
      const now = Date.now();
      if (now - this.lastMessageSent < this.messageCooldown) {
        console.log('‚ö†Ô∏è Skipping duplicate message - cooldown active');
        return;
      }
      
      console.log('üìÖ Sending scheduled price message to group...');
      
      const priceData = await this.getPriceData();
      
      // Determine emoji for price change
      const changeEmoji = priceData.change24h >= 0 ? 'üî∫' : 'üîª';
      const changeSign = priceData.change24h >= 0 ? '+' : '';
      
      // Check if current price is ATH
      const isNewATH = priceData.price >= priceData.ath;
      const athDisplay = isNewATH ? `üèÜ $ ${priceData.ath.toFixed(2)}` : `$ ${priceData.ath.toFixed(2)}`;
      
      // Message format with new P2P promotional content
      const message = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ CES: $ ${priceData.price.toFixed(2)} | ‚ÇΩ ${priceData.priceRub.toFixed(2)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${priceData.change24h.toFixed(1)}% ‚Ä¢ üÖ• $ ${priceService.formatNumber(priceData.volume24h).replace(/(\d+\.\d{2})K/, (match) => {
        const num = parseFloat(match.replace('K', ''));
        return num.toFixed(1) + 'K';
      })} ‚Ä¢ üÖêüÖ£üÖó ${athDisplay}

–¢–æ—Ä–≥—É–π CES —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ  
P2P –ë–∏—Ä–∂–∞: https://t.me/rogassistant_bot
–ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ ‚ÇΩ`;
      
      // Send message to group without parse_mode to avoid Markdown issues
      if (this.bot) {
        await this.bot.telegram.sendMessage(targetGroupId, message);
        this.lastMessageSent = now; // Update last message timestamp
        console.log(`‚úÖ Price message sent to group ${targetGroupId}`);
      } else {
        console.error('‚ùå Bot instance not available for scheduled message');
      }
      
    } catch (error) {
      console.error('‚ùå Scheduled message error:', error);
      
      // Try to send error message to group
      try {
        if (this.bot) {
          await this.bot.telegram.sendMessage(targetGroupId, '‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É CES –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.');
        }
      } catch (sendError) {
        console.error('‚ùå Error sending error message:', sendError);
      }
    }
  }

  // Setup scheduled price messages
  setupDailyPriceMessage() {
    try {
      // Stop existing task if it exists to prevent duplicates
      if (this.tasks.has('dailyPrice')) {
        const existingTask = this.tasks.get('dailyPrice');
        existingTask.stop();
        console.log('‚ö†Ô∏è Stopped existing daily price task to prevent duplicates');
      }
      
      const task = cron.schedule(config.schedule.dailyTime, () => {
        console.log('üïï 19:00 Moscow time - sending CES price to group');
        // Use setImmediate to avoid blocking the scheduler
        setImmediate(() => this.sendPriceToGroup());
      }, {
        scheduled: true,
        timezone: config.schedule.timezone
      });

      this.tasks.set('dailyPrice', task);
      
      console.log('‚è∞ Scheduled message configured for 19:00 Moscow time');
      console.log(`üì± Target group: ${config.schedule.groupId}`);
      
    } catch (error) {
      console.error('‚ùå Scheduler setup error:', error);
    }
  }

  // üï∞Ô∏è P2P ORDER TIMEOUT MONITORING
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ P2P –æ—Ä–¥–µ—Ä–∞
   */
  async checkExpiredP2POrders() {
    try {
      console.log('üîç [P2P-TIMER] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö P2P –æ—Ä–¥–µ—Ä–æ–≤...');
      
      const now = new Date();
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
      const activeOrders = await P2POrder.find({
        status: { $in: ['active', 'partial'] }
      }).populate('userId');
      
      let expiredCount = 0;
      let warningCount = 0;
      
      for (const order of activeOrders) {
        const timeLimit = order.tradeTimeLimit || 30; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç
        const orderCreatedAt = new Date(order.createdAt);
        const expiresAt = new Date(orderCreatedAt.getTime() + timeLimit * 60 * 1000);
        const timeRemaining = expiresAt.getTime() - now.getTime();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if (timeRemaining <= 0) {
          // –û—Ä–¥–µ—Ä –ø—Ä–æ—Å—Ä–æ—á–µ–Ω - –æ—Ç–º–µ–Ω—è–µ–º
          await this.cancelExpiredOrder(order);
          expiredCount++;
        } else if (timeRemaining <= 5 * 60 * 1000) { // 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
          await this.sendOrderExpirationWarning(order, Math.ceil(timeRemaining / 60000));
          warningCount++;
        }
      }
      
      if (expiredCount > 0 || warningCount > 0) {
        console.log(`‚úÖ [P2P-TIMER] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${expiredCount} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö, ${warningCount} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
      }
      
    } catch (error) {
      console.error('‚ùå [P2P-TIMER] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error);
    }
  }
  
  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
   */
  async cancelExpiredOrder(order) {
    try {
      console.log(`‚è∞ [P2P-TIMER] –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ ${order._id} (—Ç–∏–ø: ${order.type})`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
      order.status = 'expired';
      order.cancelReason = '–í—Ä–µ–º—è –æ—Ä–¥–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ';
      order.canceledAt = new Date();
      await order.save();
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è sell –æ—Ä–¥–µ—Ä–æ–≤
      if (order.type === 'sell' && order.escrowLocked && order.escrowAmount > 0) {
        const escrowService = require('./escrowService');
        await escrowService.releaseTokensFromEscrow(order.userId, null, 'CES', order.escrowAmount);
        console.log(`üí∞ [P2P-TIMER] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: ${order.escrowAmount} CES`);
      }
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±–ª–∏ –¥–ª—è buy –æ—Ä–¥–µ—Ä–æ–≤
      if (order.type === 'buy') {
        const rubleReserveService = require('./rubleReserveService');
        await rubleReserveService.releaseReservation(order.userId.toString(), order._id.toString());
        console.log(`üí∞ [P2P-TIMER] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±–ª–∏ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${order._id}`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (order.userId && order.userId.chatId && this.bot) {
        const timeDescription = {
          10: '10 –º–∏–Ω—É—Ç (–±—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏)',
          15: '15 –º–∏–Ω—É—Ç (—Å–∫–æ—Ä—ã–µ —Å–¥–µ–ª–∫–∏)',
          30: '30 –º–∏–Ω—É—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏)',
          60: '1 —á–∞—Å (–¥–ª–∏–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏)'
        };
        
        const orderType = order.type === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
        const timeDesc = timeDescription[order.tradeTimeLimit] || `${order.tradeTimeLimit} –º–∏–Ω—É—Ç`;
        
        const message = `‚è∞ –û–†–î–ï–† –û–¢–ú–ï–ù–ï–ù\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `–í–∞—à –æ—Ä–¥–µ—Ä –Ω–∞ ${orderType} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.\n\n` +
                       `üìä –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞:\n` +
                       `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount} CES\n` +
                       `‚Ä¢ –¶–µ–Ω–∞: ‚ÇΩ${order.pricePerToken} –∑–∞ CES\n` +
                       `‚Ä¢ –í—Ä–µ–º—è –æ—Ä–¥–µ—Ä–∞: ${timeDesc}\n\n` +
                       `üí° –°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ä–¥–µ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö P2P –ø—Ä–æ—Ñ–∏–ª—è.`;
        
        await this.bot.telegram.sendMessage(order.userId.chatId, message);
      }
      
    } catch (error) {
      console.error(`‚ùå [P2P-TIMER] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ ${order._id}:`, error);
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞
   */
  async sendOrderExpirationWarning(order, minutesRemaining) {
    try {
      if (!order.userId || !order.userId.chatId || !this.bot) {
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      if (order.warningsent) {
        return;
      }
      
      const orderType = order.type === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
      
      const message = `‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–í–∞—à –æ—Ä–¥–µ—Ä –Ω–∞ ${orderType} –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ ${minutesRemaining} –º–∏–Ω.\n\n` +
                     `üìä –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞:\n` +
                     `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount} CES\n` +
                     `‚Ä¢ –¶–µ–Ω–∞: ‚ÇΩ${order.pricePerToken} –∑–∞ CES\n\n` +
                     `üîß –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –≤—Ä–µ–º—è, –æ—Ç–º–µ–Ω–∏—Ç–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä.`;
      
      await this.bot.telegram.sendMessage(order.userId.chatId, message);
      
      // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      order.warningSent = true;
      await order.save();
      
      console.log(`‚ö†Ô∏è [P2P-TIMER] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${order.userId.chatId} –æ–± –æ—Ä–¥–µ—Ä–µ ${order._id}`);
      
    } catch (error) {
      console.error(`‚ùå [P2P-TIMER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${order._id}:`, error);
    }
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ P2P —Ç–∞–π–º–µ—Ä–æ–≤
   */
  setupP2PTimerMonitoring() {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.tasks.has('p2pTimerCheck')) {
        const existingTask = this.tasks.get('p2pTimerCheck');
        existingTask.stop();
        console.log('‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ P2P —Ç–∞–π–º–µ—Ä–æ–≤');
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
      const task = cron.schedule('*/2 * * * *', () => {
        console.log('üïê –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ P2P —Ç–∞–π–º–µ—Ä–æ–≤');
        setImmediate(() => this.checkExpiredP2POrders());
      }, {
        scheduled: true,
        timezone: config.schedule.timezone
      });
      
      this.tasks.set('p2pTimerCheck', task);
      
      console.log('‚è∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ P2P —Ç–∞–π–º–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ P2P —Ç–∞–π–º–µ—Ä–æ–≤:', error);
    }
  }
  
  // Start all scheduled tasks
  startScheduler() {
    console.log('üîÑ Starting scheduler service...');
    this.setupDailyPriceMessage();
    this.setupP2PTimerMonitoring(); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ P2P —Ç–∞–π–º–µ—Ä–æ–≤
    console.log('‚úÖ Scheduler service started');
  }

  // Stop all scheduled tasks
  stopScheduler() {
    console.log('‚õî Stopping scheduler service...');
    
    this.tasks.forEach((task, name) => {
      task.stop();
      console.log(`‚õî Stopped task: ${name}`);
    });
    
    this.tasks.clear();
    console.log('‚úÖ Scheduler service stopped');
  }

  // Get active tasks
  getActiveTasks() {
    const activeTasks = [];
    this.tasks.forEach((task, name) => {
      activeTasks.push({
        name,
        running: task.running
      });
    });
    return activeTasks;
  }

  // Reset message cooldown (for testing or manual trigger)
  resetMessageCooldown() {
    this.lastMessageSent = 0;
    console.log('‚úÖ Message cooldown reset');
  }

  // Get cooldown status
  getCooldownStatus() {
    const now = Date.now();
    const remainingCooldown = Math.max(0, this.messageCooldown - (now - this.lastMessageSent));
    return {
      isInCooldown: remainingCooldown > 0,
      remainingMs: remainingCooldown,
      lastMessageSent: new Date(this.lastMessageSent).toISOString()
    };
  }
}

module.exports = new SchedulerService();