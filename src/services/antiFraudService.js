/**
 * Anti-Fraud Service for P2P Trading
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å P2P —Ç–æ—Ä–≥–æ–≤–ª–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

const { User, P2POrder, P2PTrade } = require('../database/models');

class AntiFraudService {
  constructor() {
    // –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    this.THRESHOLDS = {
      MAX_ORDERS_PER_HOUR: 10,          // –ú–∞–∫—Å–∏–º—É–º –æ—Ä–¥–µ—Ä–æ–≤ –≤ —á–∞—Å
      MAX_ORDERS_PER_DAY: 50,           // –ú–∞–∫—Å–∏–º—É–º –æ—Ä–¥–µ—Ä–æ–≤ –≤ –¥–µ–Ω—å 
      MAX_FAILED_ATTEMPTS: 3,           // –ú–∞–∫—Å–∏–º—É–º –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      MIN_ACCOUNT_AGE_DAYS: 1,          // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
      SUSPICIOUS_PRICE_DEVIATION: 0.15, // 15% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–∫–∞ = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
      MAX_TRADE_AMOUNT_NEW_USER: 1000,  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      VELOCITY_CHECK_WINDOW: 60 * 60 * 1000, // 1 —á–∞—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
    };
    
    // –ö—ç—à –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
    this.suspiciousActivityCache = new Map();
    this.rateLimit = new Map();
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
   * @param {string} chatId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} orderData - –î–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  async checkOrderSecurity(chatId, orderData) {
    try {
      console.log(`üîç [ANTI-FRAUD] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è ${chatId}`);
      
      const user = await User.findOne({ chatId });
      if (!user) {
        return {
          allowed: false,
          reason: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          riskLevel: 'HIGH'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const checks = await Promise.all([
        this.checkAccountAge(user),
        this.checkOrderVelocity(chatId),
        this.checkPriceManipulation(orderData),
        this.checkReputationHistory(user),
        this.checkSuspiciousPatterns(chatId, orderData)
      ]);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const risks = checks.filter(check => !check.passed);
      const highRisks = risks.filter(risk => risk.riskLevel === 'HIGH');
      const mediumRisks = risks.filter(risk => risk.riskLevel === 'MEDIUM');

      let riskLevel, allowed, reason;

      if (highRisks.length > 0) {
        riskLevel = 'HIGH';
        allowed = false;
        reason = `–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: ${highRisks.map(r => r.reason).join(', ')}`;
      } else if (mediumRisks.length >= 2) {
        riskLevel = 'MEDIUM';
        allowed = false;
        reason = `–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π): ${mediumRisks.map(r => r.reason).join(', ')}`;
      } else if (mediumRisks.length === 1) {
        riskLevel = 'MEDIUM';
        allowed = true; // –†–∞–∑—Ä–µ—à–∞–µ–º, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        reason = `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${mediumRisks[0].reason}`;
      } else {
        riskLevel = 'LOW';
        allowed = true;
        reason = '–ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã';
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log(`üîç [ANTI-FRAUD] –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${chatId}: ${allowed ? '–†–ê–ó–†–ï–®–ï–ù–û' : '–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û'} (${riskLevel})`);
      
      if (!allowed) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.incrementSuspiciousActivity(chatId);
      }

      return {
        allowed,
        reason,
        riskLevel,
        checks: risks.length > 0 ? risks : null
      };

    } catch (error) {
      console.error('üîç [ANTI-FRAUD] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
      return {
        allowed: false,
        reason: '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        riskLevel: 'HIGH'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  async checkAccountAge(user) {
    const accountAge = Date.now() - new Date(user.createdAt).getTime();
    const ageInDays = accountAge / (1000 * 60 * 60 * 24);
    
    if (ageInDays < this.THRESHOLDS.MIN_ACCOUNT_AGE_DAYS) {
      return {
        passed: false,
        reason: '–°–ª–∏—à–∫–æ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç',
        riskLevel: 'MEDIUM'
      };
    }
    
    return { passed: true };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ (–∞–Ω—Ç–∏-—Å–ø–∞–º)
   */
  async checkOrderVelocity(chatId) {
    const now = Date.now();
    const hourAgo = now - (60 * 60 * 1000);
    const dayAgo = now - (24 * 60 * 60 * 1000);

    // –°—á–∏—Ç–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∏ –¥–µ–Ω—å
    const [ordersLastHour, ordersLastDay] = await Promise.all([
      P2POrder.countDocuments({
        userId: await User.findOne({ chatId }).select('_id'),
        createdAt: { $gte: new Date(hourAgo) }
      }),
      P2POrder.countDocuments({
        userId: await User.findOne({ chatId }).select('_id'),
        createdAt: { $gte: new Date(dayAgo) }
      })
    ]);

    if (ordersLastHour >= this.THRESHOLDS.MAX_ORDERS_PER_HOUR) {
      return {
        passed: false,
        reason: `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–æ–≤ –≤ —á–∞—Å (${ordersLastHour}/${this.THRESHOLDS.MAX_ORDERS_PER_HOUR})`,
        riskLevel: 'HIGH'
      };
    }

    if (ordersLastDay >= this.THRESHOLDS.MAX_ORDERS_PER_DAY) {
      return {
        passed: false,
        reason: `–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–æ–≤ (${ordersLastDay}/${this.THRESHOLDS.MAX_ORDERS_PER_DAY})`,
        riskLevel: 'MEDIUM'
      };
    }

    return { passed: true };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Ü–µ–Ω–æ–π
   */
  async checkPriceManipulation(orderData) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      
      const marketPrices = await P2POrder.aggregate([
        {
          $match: {
            createdAt: { $gte: dayAgo },
            status: { $in: ['active', 'completed'] }
          }
        },
        {
          $group: {
            _id: null,
            avgPrice: { $avg: '$pricePerToken' },
            minPrice: { $min: '$pricePerToken' },
            maxPrice: { $max: '$pricePerToken' }
          }
        }
      ]);

      if (marketPrices.length === 0) {
        return { passed: true }; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      }

      const { avgPrice, minPrice, maxPrice } = marketPrices[0];
      const { pricePerToken } = orderData;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
      const deviation = Math.abs(pricePerToken - avgPrice) / avgPrice;
      
      if (deviation > this.THRESHOLDS.SUSPICIOUS_PRICE_DEVIATION) {
        return {
          passed: false,
          reason: `–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ${(deviation * 100).toFixed(1)}% –æ—Ç —Ä—ã–Ω–∫–∞`,
          riskLevel: 'MEDIUM'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
      if (pricePerToken < minPrice * 0.5 || pricePerToken > maxPrice * 2) {
        return {
          passed: false,
          reason: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤–Ω–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞',
          riskLevel: 'HIGH'
        };
      }

      return { passed: true };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã:', error);
      return { passed: true }; // –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
   */
  async checkReputationHistory(user) {
    if (!user.p2pProfile) {
      return {
        passed: false,
        reason: '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω P2P –ø—Ä–æ—Ñ–∏–ª—å',
        riskLevel: 'MEDIUM'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    const failedTrades = await P2PTrade.countDocuments({
      $or: [{ makerId: user._id }, { takerId: user._id }],
      status: { $in: ['cancelled', 'disputed', 'failed'] }
    });

    const totalTrades = await P2PTrade.countDocuments({
      $or: [{ makerId: user._id }, { takerId: user._id }]
    });

    if (totalTrades > 5 && failedTrades / totalTrades > 0.3) {
      return {
        passed: false,
        reason: `–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (${Math.round(failedTrades / totalTrades * 100)}%)`,
        riskLevel: 'MEDIUM'
      };
    }

    return { passed: true };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  async checkSuspiciousPatterns(chatId, orderData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const suspiciousCount = this.suspiciousActivityCache.get(chatId) || 0;
    
    if (suspiciousCount >= this.THRESHOLDS.MAX_FAILED_ATTEMPTS) {
      return {
        passed: false,
        reason: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        riskLevel: 'HIGH'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Å—É–º–º –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const user = await User.findOne({ chatId });
    const accountAge = Date.now() - new Date(user.createdAt).getTime();
    const ageInDays = accountAge / (1000 * 60 * 60 * 24);
    
    const orderValue = orderData.amount * orderData.pricePerToken;
    
    if (ageInDays < 7 && orderValue > this.THRESHOLDS.MAX_TRADE_AMOUNT_NEW_USER) {
      return {
        passed: false,
        reason: `–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ‚ÇΩ${orderValue.toFixed(2)}`,
        riskLevel: 'MEDIUM'
      };
    }

    return { passed: true };
  }

  /**
   * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  incrementSuspiciousActivity(chatId) {
    const current = this.suspiciousActivityCache.get(chatId) || 0;
    this.suspiciousActivityCache.set(chatId, current + 1);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ —á–∞—Å
    setTimeout(() => {
      this.suspiciousActivityCache.delete(chatId);
    }, 60 * 60 * 1000);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
   */
  validateBankDetails(bankDetails) {
    const validationResults = [];
    
    for (const [bankCode, details] of Object.entries(bankDetails)) {
      const validation = this.validateSingleBankDetail(bankCode, details);
      if (!validation.valid) {
        validationResults.push({
          bank: bankCode,
          issue: validation.issue
        });
      }
    }
    
    return {
      valid: validationResults.length === 0,
      issues: validationResults
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
   */
  validateSingleBankDetail(bankCode, details) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!details.cardNumber || !details.cardHolder) {
      return {
        valid: false,
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const cardNumber = details.cardNumber.replace(/\s/g, '');
    if (!/^\d{16,19}$/.test(cardNumber)) {
      return {
        valid: false,
        issue: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã
    if (details.cardHolder.length < 2 || !/^[A-Za-z–ê-–Ø–∞-—è\s]+$/.test(details.cardHolder)) {
      return {
        valid: false,
        issue: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã'
      };
    }

    return { valid: true };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  getSecurityStats() {
    return {
      suspiciousActivityCount: this.suspiciousActivityCache.size,
      rateLimitedUsers: this.rateLimit.size,
      thresholds: this.THRESHOLDS
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)
   */
  clearCaches() {
    this.suspiciousActivityCache.clear();
    this.rateLimit.clear();
    console.log('üîç [ANTI-FRAUD] –ö—ç—à–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã');
  }
}

module.exports = new AntiFraudService();