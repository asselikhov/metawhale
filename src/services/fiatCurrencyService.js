/**
 * Fiat Currency Service
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 10 —Ñ–∏–∞—Ç–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏ –≤ P2P —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:
 * USD, RUB, EUR, CNY, INR, NGN, VND, KRW, JPY, BRL
 */

const axios = require('axios');
const Decimal = require('decimal.js');
const config = require('../config/configuration');

class FiatCurrencyService {
  constructor() {
    // –ö—ç—à –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ (TTL: 15 –º–∏–Ω—É—Ç)
    this.exchangeRatesCache = new Map();
    this.cacheExpiry = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç
    this.lastUpdateTime = 0;
    
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    this.baseCurrency = 'USD';
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
    this.supportedCurrencies = this.initializeCurrencyConfig();
    
    // API endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
    this.exchangeRateAPIs = [
      {
        name: 'exchangerate-api',
        url: 'https://api.exchangerate-api.com/v4/latest/USD',
        timeout: 5000,
        priority: 1
      },
      {
        name: 'fixer-io',
        url: 'https://api.fixer.io/latest',
        params: { base: 'USD', access_key: process.env.FIXER_API_KEY },
        timeout: 8000,
        priority: 2
      }
    ];
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
   */
  initializeCurrencyConfig() {
    return {
      USD: {
        code: 'USD',
        name: 'US Dollar',
        nameRu: '–î–æ–ª–ª–∞—Ä –°–®–ê',
        symbol: '$',
        symbolPosition: 'before', // before/after amount
        decimals: 2,
        flag: 'üá∫üá∏',
        isBaseCurrency: true,
        popularityIndex: 1
      },
      RUB: {
        code: 'RUB',
        name: 'Russian Ruble',
        nameRu: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
        symbol: '‚ÇΩ',
        symbolPosition: 'after',
        decimals: 2,
        flag: 'üá∑üá∫',
        isBaseCurrency: false,
        popularityIndex: 2 // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∫ —Ç–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞
      },
      EUR: {
        code: 'EUR',
        name: 'Euro',
        nameRu: '–ï–≤—Ä–æ',
        symbol: '‚Ç¨',
        symbolPosition: 'before',
        decimals: 2,
        flag: 'üá™üá∫',
        isBaseCurrency: false,
        popularityIndex: 3
      },
      CNY: {
        code: 'CNY',
        name: 'Chinese Yuan',
        nameRu: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å',
        symbol: '¬•',
        symbolPosition: 'before',
        decimals: 2,
        flag: 'üá®üá≥',
        isBaseCurrency: false,
        popularityIndex: 4
      },
      INR: {
        code: 'INR',
        name: 'Indian Rupee',
        nameRu: '–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è',
        symbol: '‚Çπ',
        symbolPosition: 'before',
        decimals: 2,
        flag: 'üáÆüá≥',
        isBaseCurrency: false,
        popularityIndex: 5
      },
      NGN: {
        code: 'NGN',
        name: 'Nigerian Naira',
        nameRu: '–ù–∏–≥–µ—Ä–∏–π—Å–∫–∞—è –Ω–∞–π—Ä–∞',
        symbol: '‚Ç¶',
        symbolPosition: 'before',
        decimals: 2,
        flag: 'üá≥üá¨',
        isBaseCurrency: false,
        popularityIndex: 6
      },
      VND: {
        code: 'VND',
        name: 'Vietnamese Dong',
        nameRu: '–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –¥–æ–Ω–≥',
        symbol: '‚Ç´',
        symbolPosition: 'after',
        decimals: 0, // VND –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—Ç–∏
        flag: 'üáªüá≥',
        isBaseCurrency: false,
        popularityIndex: 7
      },
      KRW: {
        code: 'KRW',
        name: 'South Korean Won',
        nameRu: '–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞',
        symbol: '‚Ç©',
        symbolPosition: 'before',
        decimals: 0, // KRW –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—Ç–∏
        flag: 'üá∞üá∑',
        isBaseCurrency: false,
        popularityIndex: 8
      },
      JPY: {
        code: 'JPY',
        name: 'Japanese Yen',
        nameRu: '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞',
        symbol: '¬•',
        symbolPosition: 'before',
        decimals: 0, // JPY –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—Ç–∏
        flag: 'üáØüáµ',
        isBaseCurrency: false,
        popularityIndex: 9
      },
      BRL: {
        code: 'BRL',
        name: 'Brazilian Real',
        nameRu: '–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª',
        symbol: 'R$',
        symbolPosition: 'before',
        decimals: 2,
        flag: 'üáßüá∑',
        isBaseCurrency: false,
        popularityIndex: 10
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
   */
  getSupportedCurrencies() {
    return Object.values(this.supportedCurrencies)
      .sort((a, b) => a.popularityIndex - b.popularityIndex);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
   */
  getCurrencyMetadata(currencyCode) {
    const currency = this.supportedCurrencies[currencyCode?.toUpperCase()];
    if (!currency) {
      throw new Error(`–í–∞–ª—é—Ç–∞ ${currencyCode} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
    }
    return currency;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≤–∞–ª—é—Ç–∞
   */
  isCurrencySupported(currencyCode) {
    return !!this.supportedCurrencies[currencyCode?.toUpperCase()];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ USD
   */
  async getExchangeRate(fromCurrency, toCurrency = 'USD') {
    try {
      fromCurrency = fromCurrency.toUpperCase();
      toCurrency = toCurrency.toUpperCase();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∞–ª—é—Ç
      if (!this.isCurrencySupported(fromCurrency) || !this.isCurrencySupported(toCurrency)) {
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: ${fromCurrency}/${toCurrency}`);
      }

      // –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
      if (fromCurrency === toCurrency) {
        return 1.0;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await this.updateExchangeRatesIfNeeded();

      // –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –≤–∞–ª—é—Ç USD
      if (fromCurrency === 'USD') {
        const rate = this.exchangeRatesCache.get(`USD_${toCurrency}`);
        return rate ? rate.rate : null;
      }
      
      if (toCurrency === 'USD') {
        const rate = this.exchangeRatesCache.get(`USD_${fromCurrency}`);
        return rate ? (1 / rate.rate) : null;
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ USD (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∞—è –∞—Ä–±–∏—Ç—Ä–∞–∂)
      const fromToUSD = await this.getExchangeRate(fromCurrency, 'USD');
      const usdToTarget = await this.getExchangeRate('USD', toCurrency);
      
      if (fromToUSD && usdToTarget) {
        return new Decimal(fromToUSD).mul(usdToTarget).toNumber();
      }

      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å ${fromCurrency}/${toCurrency}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ ${fromCurrency}/${toCurrency}:`, error.message);
      return this.getFallbackRate(fromCurrency, toCurrency);
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏
   */
  async convertAmount(amount, fromCurrency, toCurrency) {
    try {
      if (!amount || amount <= 0) {
        return 0;
      }

      const rate = await this.getExchangeRate(fromCurrency, toCurrency);
      if (!rate) {
        throw new Error(`–ö—É—Ä—Å ${fromCurrency}/${toCurrency} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal.js –¥–ª—è —Ç–æ—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
      const result = new Decimal(amount).mul(rate);
      
      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
      const targetCurrency = this.getCurrencyMetadata(toCurrency);
      return result.toDecimalPlaces(targetCurrency.decimals).toNumber();

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${amount} ${fromCurrency} –≤ ${toCurrency}:`, error.message);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É —Å —Å–∏–º–≤–æ–ª–æ–º –≤–∞–ª—é—Ç—ã
   */
  formatAmount(amount, currencyCode, options = {}) {
    try {
      const currency = this.getCurrencyMetadata(currencyCode);
      const {
        showCurrencyCode = false,
        useGrouping = true,
        customSymbol = null
      } = options;

      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
      const roundedAmount = new Decimal(amount || 0)
        .toDecimalPlaces(currency.decimals)
        .toNumber();

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ
      const formattedNumber = roundedAmount.toLocaleString('ru-RU', {
        minimumFractionDigits: currency.decimals,
        maximumFractionDigits: currency.decimals,
        useGrouping: useGrouping
      });

      const symbol = customSymbol || currency.symbol;
      const code = showCurrencyCode ? ` ${currency.code}` : '';

      // –†–∞–∑–º–µ—â–∞–µ–º —Å–∏–º–≤–æ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
      if (currency.symbolPosition === 'before') {
        return `${symbol}${formattedNumber}${code}`;
      } else {
        return `${formattedNumber} ${symbol}${code}`;
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${amount} ${currencyCode}:`, error.message);
      return `${amount} ${currencyCode}`;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞–ª—é—Ç –¥–ª—è —Å—É–º–º—ã
   */
  async getMultiCurrencyDisplay(amount, baseCurrency, targetCurrencies = ['USD', 'RUB', 'EUR']) {
    try {
      const conversions = [];
      
      for (const targetCurrency of targetCurrencies) {
        if (targetCurrency === baseCurrency) continue;
        
        try {
          const convertedAmount = await this.convertAmount(amount, baseCurrency, targetCurrency);
          const formatted = this.formatAmount(convertedAmount, targetCurrency);
          conversions.push({
            currency: targetCurrency,
            amount: convertedAmount,
            formatted: formatted,
            flag: this.getCurrencyMetadata(targetCurrency).flag
          });
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ ${targetCurrency}: ${error.message}`);
        }
      }

      return conversions;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
      return [];
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ–±–º–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
   */
  async updateAllExchangeRates() {
    try {
      console.log('üí± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...');
      
      let ratesData = null;
      
      // –ü—Ä–æ–±—É–µ–º API –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      for (const api of this.exchangeRateAPIs) {
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –æ—Ç ${api.name}...`);
          
          const requestConfig = {
            url: api.url,
            timeout: api.timeout,
            headers: {
              'Accept': 'application/json',
              'User-Agent': 'MetawhaleBot/1.0'
            }
          };

          if (api.params) {
            requestConfig.params = api.params;
          }

          const response = await axios(requestConfig);
          
          if (response.data && response.data.rates) {
            ratesData = response.data.rates;
            console.log(`‚úÖ –ö—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç ${api.name}`);
            break;
          }

        } catch (apiError) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API ${api.name}:`, apiError.message);
          continue;
        }
      }

      if (!ratesData) {
        throw new Error('–í—Å–µ API –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫—É—Ä—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      const now = Date.now();
      let updatedCount = 0;

      Object.keys(this.supportedCurrencies).forEach(currency => {
        if (currency === 'USD') return; // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
        
        const rate = ratesData[currency];
        if (rate && rate > 0) {
          this.exchangeRatesCache.set(`USD_${currency}`, {
            rate: rate,
            timestamp: now,
            source: 'api'
          });
          updatedCount++;
        }
      });

      this.lastUpdateTime = now;
      console.log(`üí± –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫—É—Ä—Å–æ–≤: ${updatedCount}/10`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      await this.saveExchangeRatesToDB();

      return {
        success: true,
        updatedCount: updatedCount,
        timestamp: now
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error.message);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã –∏–∑ –ë–î
      await this.loadExchangeRatesFromDB();
      
      return {
        success: false,
        error: error.message,
        fallbackUsed: true
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (TTL –ø—Ä–æ–≤–µ—Ä–∫–∞)
   */
  async updateExchangeRatesIfNeeded() {
    const now = Date.now();
    
    if (now - this.lastUpdateTime > this.cacheExpiry) {
      await this.updateAllExchangeRates();
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å fallback –∫—É—Ä—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getFallbackRate(fromCurrency, toCurrency) {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è fallback (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
    const fallbackRates = {
      'USD_RUB': 100.0,
      'USD_EUR': 0.85,
      'USD_CNY': 7.20,
      'USD_INR': 83.0,
      'USD_NGN': 775.0,
      'USD_VND': 24000.0,
      'USD_KRW': 1320.0,
      'USD_JPY': 149.0,
      'USD_BRL': 5.0
    };

    if (fromCurrency === 'USD') {
      return fallbackRates[`USD_${toCurrency}`] || null;
    }
    
    if (toCurrency === 'USD') {
      const directRate = fallbackRates[`USD_${fromCurrency}`];
      return directRate ? (1 / directRate) : null;
    }

    // –ß–µ—Ä–µ–∑ USD
    const fromRate = fallbackRates[`USD_${fromCurrency}`];
    const toRate = fallbackRates[`USD_${toCurrency}`];
    
    if (fromRate && toRate) {
      return new Decimal(1).div(fromRate).mul(toRate).toNumber();
    }

    return null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å—ã –≤ –ë–î (–¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
   */
  async saveExchangeRatesToDB() {
    try {
      const { ExchangeRate } = require('../database/models');
      const now = new Date();

      for (const [pair, data] of this.exchangeRatesCache) {
        const [base, target] = pair.split('_');
        
        await ExchangeRate.findOneAndUpdate(
          { baseCurrency: base, targetCurrency: target },
          {
            rate: data.rate,
            source: data.source || 'api',
            lastUpdated: now,
            isActive: true
          },
          { upsert: true, new: true }
        );
      }

      console.log('üíæ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤ –ë–î:', error.message);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ –ë–î
   */
  async loadExchangeRatesFromDB() {
    try {
      const { ExchangeRate } = require('../database/models');
      
      const rates = await ExchangeRate.find({ isActive: true })
        .sort({ lastUpdated: -1 })
        .limit(100);

      let loadedCount = 0;
      const now = Date.now();

      rates.forEach(rate => {
        const pair = `${rate.baseCurrency}_${rate.targetCurrency}`;
        this.exchangeRatesCache.set(pair, {
          rate: rate.rate,
          timestamp: rate.lastUpdated.getTime(),
          source: 'database'
        });
        loadedCount++;
      });

      console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫—É—Ä—Å–æ–≤ –∏–∑ –ë–î: ${loadedCount}`);
      return loadedCount;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –∏–∑ –ë–î:', error.message);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  getStats() {
    return {
      supportedCurrencies: Object.keys(this.supportedCurrencies).length,
      cachedRates: this.exchangeRatesCache.size,
      lastUpdate: this.lastUpdateTime,
      cacheAge: Date.now() - this.lastUpdateTime,
      isStale: (Date.now() - this.lastUpdateTime) > this.cacheExpiry
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  clearCache() {
    this.exchangeRatesCache.clear();
    this.lastUpdateTime = 0;
    console.log('üßπ –ö—ç—à –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—á–∏—â–µ–Ω');
  }
}

module.exports = new FiatCurrencyService();