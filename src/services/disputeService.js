/**
 * üèõÔ∏è PROFESSIONAL DISPUTE MANAGEMENT SERVICE
 * 
 * Provides comprehensive dispute resolution for P2P trades including:
 * - Automated dispute workflow
 * - Evidence collection and management
 * - Moderator assignment and workload balancing
 * - Multi-level escalation system
 * - Smart resolution algorithms
 * - Comprehensive audit trails
 */

const { P2PTrade, User, DisputeLog, Moderator } = require('../database/models');
const smartNotificationService = require('./smartNotificationService');
const escrowService = require('./escrowService');
const antiFraudService = require('./antiFraudService');

class DisputeService {
  constructor() {
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    this.AUTO_ESCALATION_HOURS = 24;
    this.URGENT_ESCALATION_HOURS = 4;
    this.MAX_RESOLUTION_DAYS = 7;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–ø–æ—Ä–æ–≤
    this.PRIORITY_THRESHOLDS = {
      urgent: 10000,     // –°—É–º–º–∞ —Å–≤—ã—à–µ 10,000 ‚ÇΩ
      high: 5000,        // –°—É–º–º–∞ —Å–≤—ã—à–µ 5,000 ‚ÇΩ
      medium: 1000,      // –°—É–º–º–∞ —Å–≤—ã—à–µ 1,000 ‚ÇΩ 
      low: 0             // –û—Å—Ç–∞–ª—å–Ω—ã–µ
    };
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    this.MODERATOR_CONFIG = {
      maxConcurrentDisputes: 5,
      maxWorkloadScore: 100,
      responseTimeExpected: 30 // –º–∏–Ω—É—Ç
    };
  }

  /**
   * üö® –ò–ù–ò–¶–ò–ê–¶–ò–Ø –°–ü–û–†–ê
   * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–æ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
   */
  async initiateDispute(tradeId, initiatorChatId, category, reason, urgency = 'medium') {
    try {
      console.log(`üö® [DISPUTE] Initiating dispute for trade ${tradeId} by user ${initiatorChatId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
        
      if (!trade) {
        throw new Error('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
      const initiator = await User.findOne({ chatId: initiatorChatId });
      if (!initiator) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Ä–∞
      const canInitiateDispute = await this.validateDisputeRights(trade, initiator._id);
      if (!canInitiateDispute.allowed) {
        throw new Error(canInitiateDispute.reason);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä–∞
      if (trade.status === 'disputed') {
        throw new Error('–ü–æ –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä');
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–ø–æ—Ä–∞
      const priority = this.calculateDisputePriority(trade, category, urgency);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
      trade.status = 'disputed';
      trade.disputeInitiatorId = initiator._id;
      trade.disputeCategory = category;
      trade.disputeReason = reason;
      trade.disputePriority = priority;
      trade.disputeStatus = 'open';
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
      trade.disputeTracking = {
        openedAt: new Date(),
        autoEscalationAt: new Date(Date.now() + this.AUTO_ESCALATION_HOURS * 60 * 60 * 1000),
        participantLastActivity: {
          buyer: new Date(),
          seller: new Date()
        }
      };
      
      await trade.save();
      
      // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
      const moderator = await this.assignOptimalModerator(trade);
      if (moderator) {
        trade.moderatorId = moderator._id;
        trade.disputeStatus = 'investigating';
        await trade.save();
      }
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è
      await this.logDisputeAction(tradeId, initiator._id, 'initiated', null, 'open', {
        category,
        reason,
        priority,
        moderatorAssigned: !!moderator
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await this.notifyDisputeInitiated(trade, initiator);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
      this.runFraudAnalysis(trade, initiator);
      
      console.log(`‚úÖ [DISPUTE] Dispute ${tradeId} initiated successfully with priority: ${priority}`);
      
      return {
        success: true,
        disputeId: tradeId,
        priority,
        moderatorAssigned: !!moderator,
        estimatedResolutionTime: this.estimateResolutionTime(priority)
      };
      
    } catch (error) {
      console.error(`‚ùå [DISPUTE] Error initiating dispute:`, error);
      throw error;
    }
  }

  /**
   * üìù –ü–û–î–ê–ß–ê –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í
   * –ü–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–ø–æ—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
   */
  async submitEvidence(tradeId, userChatId, evidenceType, content, description) {
    try {
      console.log(`üìù [DISPUTE] Submitting evidence for trade ${tradeId}`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
        
      if (!trade || trade.status !== 'disputed') {
        throw new Error('–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      }
      
      const user = await User.findOne({ chatId: userChatId });
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRole = trade.buyerId._id.toString() === user._id.toString() ? 'buyer' : 'seller';
      
      if (trade.buyerId._id.toString() !== user._id.toString() && 
          trade.sellerId._id.toString() !== user._id.toString()) {
        throw new Error('–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–µ–ª–∫–∏ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
      const evidence = {
        type: evidenceType,
        content,
        description,
        submittedAt: new Date()
      };
      
      if (!trade.disputeEvidence) {
        trade.disputeEvidence = { buyerEvidence: [], sellerEvidence: [], moderatorNotes: [] };
      }
      
      if (userRole === 'buyer') {
        trade.disputeEvidence.buyerEvidence.push(evidence);
      } else {
        trade.disputeEvidence.sellerEvidence.push(evidence);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
      trade.disputeTracking.participantLastActivity[userRole] = new Date();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞
      if (trade.disputeStatus === 'awaiting_evidence') {
        trade.disputeStatus = 'under_review';
      }
      
      await trade.save();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      await this.logDisputeAction(tradeId, user._id, 'evidence_submitted', null, null, {
        evidenceType,
        userRole,
        description
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞—Ö
      if (trade.moderatorId) {
        await this.notifyModeratorNewEvidence(trade, user, evidence);
      }
      
      console.log(`‚úÖ [DISPUTE] Evidence submitted for trade ${tradeId} by ${userRole}`);
      
      return { success: true };
      
    } catch (error) {
      console.error(`‚ùå [DISPUTE] Error submitting evidence:`, error);
      throw error;
    }
  }

  /**
   * ‚öñÔ∏è –†–ê–ó–†–ï–®–ï–ù–ò–ï –°–ü–û–†–ê –ú–û–î–ï–†–ê–¢–û–†–û–ú
   * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
   */
  async resolveDispute(tradeId, moderatorChatId, resolution, compensationAmount = null, notes = '') {
    try {
      console.log(`‚öñÔ∏è [DISPUTE] Resolving dispute ${tradeId} with outcome: ${resolution}`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId')
        .populate('moderatorId');
        
      if (!trade || trade.status !== 'disputed') {
        throw new Error('–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      }
      
      const moderator = await User.findOne({ chatId: moderatorChatId });
      if (!moderator || !trade.moderatorId || trade.moderatorId._id.toString() !== moderator._id.toString()) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞');
      }
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
      const validResolutions = ['buyer_wins', 'seller_wins', 'compromise', 'no_fault', 'insufficient_evidence'];
      if (!validResolutions.includes(resolution)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
      trade.disputeResolution = {
        outcome: resolution,
        compensationAmount,
        resolutionNotes: notes,
        appealable: true,
        appealDeadline: new Date(Date.now() + 48 * 60 * 60 * 1000) // 48 —á–∞—Å–æ–≤ –Ω–∞ –∞–ø–µ–ª–ª—è—Ü–∏—é
      };
      
      trade.disputeStatus = 'resolved';
      trade.disputeTracking.resolvedAt = new Date();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ—à–µ–Ω–∏—è
      await this.executeDisputeResolution(trade, resolution, compensationAmount);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
      await this.updateModeratorStatistics(moderator._id, trade);
      
      await trade.save();
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      await this.logDisputeAction(tradeId, moderator._id, 'resolved', null, 'resolved', {
        resolution,
        compensationAmount,
        notes,
        resolutionTimeMinutes: this.calculateResolutionTime(trade)
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Ä–µ—à–µ–Ω–∏–∏
      await this.notifyDisputeResolved(trade, resolution);
      
      console.log(`‚úÖ [DISPUTE] Dispute ${tradeId} resolved: ${resolution}`);
      
      return {
        success: true,
        resolution,
        appealDeadline: trade.disputeResolution.appealDeadline
      };
      
    } catch (error) {
      console.error(`‚ùå [DISPUTE] Error resolving dispute:`, error);
      throw error;
    }
  }

  /**
   * üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ú–û–î–ï–†–ê–¢–û–†–ê
   * –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
   */
  async assignOptimalModerator(trade) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
      const availableModerators = await Moderator.find({
        isActive: true,
        'availability.isOnline': true,
        'statistics.currentWorkload': { $lt: this.MODERATOR_CONFIG.maxConcurrentDisputes }
      }).populate('userId');
      
      if (availableModerators.length === 0) {
        console.warn('‚ö†Ô∏è [DISPUTE] No available moderators found');
        return null;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–æ—Ä–∞
      let selectedModerator = availableModerators.find(mod => 
        mod.specializations.includes(this.mapCategoryToSpecialization(trade.disputeCategory))
      );
      
      // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–µ—Ç, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–µ
      if (!selectedModerator) {
        selectedModerator = availableModerators.reduce((best, current) =>
          current.statistics.currentWorkload < best.statistics.currentWorkload ? current : best
        );
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
      selectedModerator.statistics.currentWorkload += 1;
      await selectedModerator.save();
      
      console.log(`üë®‚Äç‚öñÔ∏è [DISPUTE] Assigned moderator ${selectedModerator.userId.chatId} to trade ${trade._id}`);
      
      return selectedModerator.userId;
      
    } catch (error) {
      console.error('‚ùå [DISPUTE] Error assigning moderator:', error);
      return null;
    }
  }

  /**
   * üîÑ –ê–í–¢–û–≠–°–ö–ê–õ–ê–¶–ò–Ø –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –°–ü–û–†–û–í
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤
   */
  async processAutoEscalation() {
    try {
      console.log('üîÑ [DISPUTE] Processing auto-escalation checks...');
      
      const now = new Date();
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–ø–æ—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
      const disputesToEscalate = await P2PTrade.find({
        status: 'disputed',
        disputeStatus: { $in: ['open', 'investigating'] },
        'disputeTracking.autoEscalationAt': { $lte: now },
        'disputeTracking.escalatedAt': { $exists: false }
      }).populate('buyerId').populate('sellerId').populate('moderatorId');
      
      for (const trade of disputesToEscalate) {
        await this.escalateDispute(trade);
      }
      
      console.log(`‚úÖ [DISPUTE] Auto-escalation completed. Processed ${disputesToEscalate.length} disputes`);
      
    } catch (error) {
      console.error('‚ùå [DISPUTE] Error in auto-escalation:', error);
    }
  }

  /**
   * üìà –≠–°–ö–ê–õ–ê–¶–ò–Ø –°–ü–û–†–ê
   * –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä—à–µ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
   */
  async escalateDispute(trade) {
    try {
      console.log(`üìà [DISPUTE] Escalating dispute ${trade._id}`);
      
      // –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      const currentPriorityIndex = ['low', 'medium', 'high', 'urgent'].indexOf(trade.disputePriority);
      if (currentPriorityIndex < 3) {
        trade.disputePriority = ['low', 'medium', 'high', 'urgent'][currentPriorityIndex + 1];
      }
      
      trade.disputeTracking.escalatedAt = new Date();
      
      // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      const seniorModerator = await this.findSeniorModerator();
      if (seniorModerator && (!trade.moderatorId || trade.moderatorId._id.toString() !== seniorModerator._id.toString())) {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if (trade.moderatorId) {
          await this.updateModeratorWorkload(trade.moderatorId, -1);
        }
        
        trade.moderatorId = seniorModerator._id;
        await this.updateModeratorWorkload(seniorModerator._id, 1);
      }
      
      await trade.save();
      
      // –õ–æ–≥–∏—Ä—É–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
      await this.logDisputeAction(trade._id, null, 'escalated', null, null, {
        newPriority: trade.disputePriority,
        reassignedModerator: !!seniorModerator
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
      await this.notifyDisputeEscalated(trade);
      
    } catch (error) {
      console.error(`‚ùå [DISPUTE] Error escalating dispute:`, error);
    }
  }

  /**
   * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ü–û–†–û–í
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
   */
  async getDisputeStatistics(timeframe = '30d') {
    try {
      const startDate = this.getStartDateForTimeframe(timeframe);
      
      const [
        totalDisputes,
        resolvedDisputes,
        activeDisputes,
        categoryBreakdown,
        resolutionStats,
        moderatorStats
      ] = await Promise.all([
        P2PTrade.countDocuments({
          status: 'disputed',
          'disputeTracking.openedAt': { $gte: startDate }
        }),
        P2PTrade.countDocuments({
          disputeStatus: 'resolved',
          'disputeTracking.openedAt': { $gte: startDate }
        }),
        P2PTrade.countDocuments({
          status: 'disputed',
          disputeStatus: { $in: ['open', 'investigating', 'under_review'] }
        }),
        this.getDisputeCategoryBreakdown(startDate),
        this.getResolutionStatistics(startDate),
        this.getModeratorStatistics()
      ]);
      
      return {
        timeframe,
        overview: {
          totalDisputes,
          resolvedDisputes,
          activeDisputes,
          resolutionRate: totalDisputes > 0 ? (resolvedDisputes / totalDisputes * 100).toFixed(1) : 0
        },
        categoryBreakdown,
        resolutionStats,
        moderatorStats
      };
      
    } catch (error) {
      console.error('‚ùå [DISPUTE] Error getting statistics:', error);
      throw error;
    }
  }

  // ========================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ========================

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Ä–∞
   */
  async validateDisputeRights(trade, userId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏
    const isParticipant = trade.buyerId._id.toString() === userId.toString() || 
                         trade.sellerId._id.toString() === userId.toString();
    
    if (!isParticipant) {
      return { allowed: false, reason: '–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–µ–ª–∫–∏ –º–æ–≥—É—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    const allowedStatuses = ['payment_made', 'payment_pending', 'escrow_locked'];
    if (!allowedStatuses.includes(trade.status)) {
      return { allowed: false, reason: '–°–ø–æ—Ä –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫' };
    }
    
    return { allowed: true };
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–ø–æ—Ä–∞
   */
  calculateDisputePriority(trade, category, urgency) {
    const amount = trade.totalValue;
    
    // –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Å—É–º–º–µ
    let priority = 'low';
    if (amount >= this.PRIORITY_THRESHOLDS.urgent) priority = 'urgent';
    else if (amount >= this.PRIORITY_THRESHOLDS.high) priority = 'high';
    else if (amount >= this.PRIORITY_THRESHOLDS.medium) priority = 'medium';
    
    // –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (category === 'fraud_attempt') priority = 'urgent';
    if (category === 'payment_not_received' && urgency === 'high') {
      const priorityIndex = ['low', 'medium', 'high', 'urgent'].indexOf(priority);
      if (priorityIndex < 3) priority = ['low', 'medium', 'high', 'urgent'][priorityIndex + 1];
    }
    
    return priority;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ —Å–ø–æ—Ä–∞
   */
  async executeDisputeResolution(trade, resolution, compensationAmount) {
    try {
      switch (resolution) {
        case 'buyer_wins':
          // –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã, –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–ø–ª–∞—Ç—É
          await escrowService.releaseTokensFromEscrow(
            trade.sellerId._id,
            trade._id,
            'CES',
            trade.amount,
            trade.buyerId._id,
            'Dispute resolved in favor of buyer'
          );
          trade.status = 'completed';
          trade.escrowStatus = 'released';
          break;
          
        case 'seller_wins':
          // –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç
          await escrowService.refundTokensFromEscrow(
            trade.sellerId._id,
            trade._id,
            'CES',
            trade.amount,
            'Dispute resolved in favor of seller'
          );
          trade.status = 'cancelled';
          trade.escrowStatus = 'returned';
          break;
          
        case 'compromise':
          // –ß–∞—Å—Ç–∏—á–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
          if (compensationAmount && compensationAmount > 0 && compensationAmount < trade.amount) {
            await escrowService.releaseTokensFromEscrow(
              trade.sellerId._id,
              trade._id + '_partial',
              'CES',
              compensationAmount,
              trade.buyerId._id,
              'Compromise resolution - partial release'
            );
            
            await escrowService.refundTokensFromEscrow(
              trade.sellerId._id,
              trade._id + '_refund',
              'CES',
              trade.amount - compensationAmount,
              'Compromise resolution - partial refund'
            );
          }
          trade.status = 'completed';
          trade.escrowStatus = 'compromised';
          break;
          
        case 'no_fault':
        case 'insufficient_evidence':
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É, —Ç–∞–∫ –∫–∞–∫ –≤–∏–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
          await escrowService.refundTokensFromEscrow(
            trade.sellerId._id,
            trade._id,
            'CES',
            trade.amount,
            'Dispute resolved - no fault found'
          );
          trade.status = 'cancelled';
          trade.escrowStatus = 'returned';
          break;
      }
    } catch (error) {
      console.error('‚ùå [DISPUTE] Error executing dispute resolution:', error);
      throw error;
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–ø–æ—Ä–µ
   */
  async logDisputeAction(tradeId, userId, action, previousState, newState, metadata) {
    try {
      const log = new DisputeLog({
        tradeId,
        userId,
        action,
        previousState,
        newState,
        metadata,
        timestamp: new Date()
      });
      
      await log.save();
    } catch (error) {
      console.error('‚ùå [DISPUTE] Error logging action:', error);
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞
   */
  calculateResolutionTime(trade) {
    if (!trade.disputeTracking.openedAt || !trade.disputeTracking.resolvedAt) {
      return null;
    }
    
    const diffMs = trade.disputeTracking.resolvedAt - trade.disputeTracking.openedAt;
    return Math.round(diffMs / (1000 * 60)); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  estimateResolutionTime(priority) {
    const estimates = {
      urgent: '2-4 —á–∞—Å–∞',
      high: '4-12 —á–∞—Å–æ–≤',
      medium: '12-24 —á–∞—Å–∞',
      low: '24-48 —á–∞—Å–æ–≤'
    };
    
    return estimates[priority] || '24-48 —á–∞—Å–æ–≤';
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
   */
  mapCategoryToSpecialization(category) {
    const mapping = {
      'payment_not_received': 'payment_disputes',
      'payment_not_made': 'payment_disputes',
      'wrong_amount': 'payment_disputes',
      'fraud_attempt': 'fraud_prevention',
      'technical_issue': 'technical_issues',
      'other': 'general'
    };
    
    return mapping[category] || 'general';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
   */
  getStartDateForTimeframe(timeframe) {
    const now = new Date();
    switch (timeframe) {
      case '24h': return new Date(now - 24 * 60 * 60 * 1000);
      case '7d': return new Date(now - 7 * 24 * 60 * 60 * 1000);
      case '30d': return new Date(now - 30 * 24 * 60 * 60 * 1000);
      case '90d': return new Date(now - 90 * 24 * 60 * 60 * 1000);
      default: return new Date(now - 30 * 24 * 60 * 60 * 1000);
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
   */
  async findSeniorModerator() {
    try {
      return await Moderator.findOne({
        isActive: true,
        'statistics.successRate': { $gte: 80 },
        'statistics.totalDisputes': { $gte: 50 },
        'statistics.currentWorkload': { $lt: this.MODERATOR_CONFIG.maxConcurrentDisputes }
      }).populate('userId').sort({ 'statistics.successRate': -1, 'statistics.totalDisputes': -1 });
    } catch (error) {
      console.error('‚ùå [DISPUTE] Error finding senior moderator:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
   */
  async updateModeratorWorkload(moderatorId, change) {
    try {
      await Moderator.updateOne(
        { userId: moderatorId },
        { $inc: { 'statistics.currentWorkload': change } }
      );
    } catch (error) {
      console.error('‚ùå [DISPUTE] Error updating moderator workload:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
   */
  async updateModeratorStatistics(moderatorId, trade) {
    try {
      const moderator = await Moderator.findOne({ userId: moderatorId });
      if (!moderator) return;
      
      moderator.statistics.resolvedDisputes += 1;
      moderator.statistics.currentWorkload = Math.max(0, moderator.statistics.currentWorkload - 1);
      
      // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const resolutionTimeMinutes = this.calculateResolutionTime(trade);
      if (resolutionTimeMinutes) {
        const totalTime = moderator.statistics.averageResolutionTime * (moderator.statistics.resolvedDisputes - 1);
        moderator.statistics.averageResolutionTime = (totalTime + resolutionTimeMinutes) / moderator.statistics.resolvedDisputes;
      }
      
      // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      moderator.statistics.successRate = (moderator.statistics.resolvedDisputes / moderator.statistics.totalDisputes) * 100;
      
      await moderator.save();
    } catch (error) {
      console.error('‚ùå [DISPUTE] Error updating moderator statistics:', error);
    }
  }

  // ========================
  // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
  // ========================

  async notifyDisputeInitiated(trade, initiator) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DisputeHandler
  }

  async notifyModeratorNewEvidence(trade, submitter, evidence) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DisputeHandler
  }

  async notifyDisputeResolved(trade, resolution) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DisputeHandler
  }

  async notifyDisputeEscalated(trade) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DisputeHandler
  }

  async runFraudAnalysis(trade, initiator) {
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
  }

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
  async getDisputeCategoryBreakdown(startDate) { return {}; }
  async getResolutionStatistics(startDate) { return {}; }
  async getModeratorStatistics() { return {}; }
}

module.exports = new DisputeService();