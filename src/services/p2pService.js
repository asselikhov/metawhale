/**
 * P2P Trading Service with Escrow
 * Handles buying and selling CES tokens for rubles with 1% commission ONLY from makers (order creators)
 * Includes advanced escrow system for maximum security
 */

const { P2POrder, P2PTrade, User } = require('../database/models');
const walletService = require('./walletService');
const priceService = require('./priceService');
const escrowService = require('./escrowService');
const smartNotificationService = require('./smartNotificationService');
const reputationService = require('./reputationService');
const antiFraudService = require('./antiFraudService');
const PrecisionUtil = require('../utils/PrecisionUtil');
const config = require('../config/configuration');

class P2PService {
  constructor() {
    this.commissionRate = 0.01; // 1% commission
    this.defaultTradeTimeout = config.escrow.timeoutMinutes; // Use configurable timeout
    this.maxOrderAmount = 10000; // Maximum order amount in CES
    this.minOrderAmount = 1; // Minimum order amount in CES
  }

  // Create a buy order (–º–µ–π–∫–µ—Ä —Å–æ–∑–¥–∞—ë—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É CES –∑–∞ —Ä—É–±–ª–∏)
  async createBuyOrder(chatId, amount, pricePerToken, minTradeAmount = 1, maxTradeAmount = null) {
    try {
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: ${amount} CES –ø–æ ‚ÇΩ${pricePerToken} –∑–∞ —Ç–æ–∫–µ–Ω (chatId: ${chatId})`);
      
      const user = await User.findOne({ chatId });
      if (!user) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chatId: ${chatId}`);
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (!user.walletAddress) {
        console.log(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞`);
        throw new Error('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å P2P
      if (!user.p2pProfile || !user.p2pProfile.isProfileComplete) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å P2P –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç: —Ç–æ–ª—å–∫–æ 1 –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingBuyOrder = await P2POrder.findOne({
        userId: user._id,
        type: 'buy',
        status: { $in: ['active', 'partial'] }
      });
      
      if (existingBuyOrder) {
        throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É. –û—Ç–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (amount <= 0 || pricePerToken <= 0) {
        console.log(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: amount=${amount}, price=${pricePerToken}`);
        throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω/–º–∞–∫—Å —Å—É–º–º
      if (minTradeAmount <= 0) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      if (maxTradeAmount && maxTradeAmount <= 0) {
        throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      if (minTradeAmount > amount) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
      }
      
      if (maxTradeAmount && maxTradeAmount > amount) {
        throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
      }
      
      if (minTradeAmount > (maxTradeAmount || amount)) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
      }
      
      const totalValue = amount * pricePerToken;
      console.log(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞: ‚ÇΩ${totalValue.toFixed(2)}`);
      
      // üîß FIX: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã 1% –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
      const commissionAmount = amount * this.commissionRate; // 1% –∫–æ–º–∏—Å—Å–∏—è –≤ CES
      const walletInfo = await walletService.getUserWallet(user.chatId);
      const availableBalance = walletInfo.cesBalance;
      
      if (availableBalance < commissionAmount) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ 1%. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance.toFixed(4)} CES, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${commissionAmount.toFixed(4)} CES`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä—É–±–ª–µ–π —É –º–µ–π–∫–µ—Ä–∞
      const rubleReserveService = require('./rubleReserveService');
      const availableRubleBalance = await rubleReserveService.getAvailableBalance(user._id.toString());
      
      if (availableRubleBalance < totalValue) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±–ª–µ–π. –î–æ—Å—Ç—É–ø–Ω–æ: ‚ÇΩ${availableRubleBalance.toFixed(2)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ‚ÇΩ${totalValue.toFixed(2)}`);
      }
      
      // üîç ANTI-FRAUD: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
      console.log(`üîç [SECURITY] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ buy –æ—Ä–¥–µ—Ä–∞ –¥–ª—è ${chatId}`);
      const securityCheck = await antiFraudService.checkOrderSecurity(chatId, {
        type: 'buy',
        amount: amount,
        pricePerToken: pricePerToken,
        totalValue: totalValue
      });
      
      if (!securityCheck.allowed) {
        console.log(`‚ùå [SECURITY] –û—Ä–¥–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${securityCheck.reason}`);
        throw new Error(`üîí –û—Ä–¥–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. ${securityCheck.reason}`);
      }
      
      if (securityCheck.riskLevel === 'MEDIUM') {
        console.log(`‚ö†Ô∏è [SECURITY] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${securityCheck.reason}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userTradeTimeLimit = user.p2pProfile?.tradeTimeLimit || this.defaultTradeTimeout;
      console.log(`–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.chatId}: ${userTradeTimeLimit} –º–∏–Ω.`);
      
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É`);
      const buyOrder = new P2POrder({
        userId: user._id,
        type: 'buy',
        amount: amount,
        pricePerToken: pricePerToken,
        totalValue: totalValue,
        remainingAmount: amount,
        minTradeAmount: minTradeAmount,
        maxTradeAmount: maxTradeAmount || amount,
        paymentMethods: ['bank_transfer'], // –ú–µ–π–∫–µ—Ä –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
        tradeTimeLimit: userTradeTimeLimit, // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        status: 'active'
      });
      
      await buyOrder.save();
      
      // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ä—É–±–ª–∏ —É –º–µ–π–∫–µ—Ä–∞
      const reserveResult = await rubleReserveService.reserveForOrder(
        user._id.toString(),
        buyOrder._id.toString(),
        totalValue
      );
      
      if (!reserveResult.success) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä
        await P2POrder.deleteOne({ _id: buyOrder._id });
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤: ${reserveResult.message}`);
      }
      
      console.log(`–û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–æ–∑–¥–∞–Ω: ${buyOrder._id}`);
      console.log(`–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ ‚ÇΩ${totalValue} —É –º–µ–π–∫–µ—Ä–∞ ${user._id}`);
      
      return buyOrder;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:', error);
      throw error;
    }
  }

  /**
   * –¢–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å) –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ä–¥–µ—Ä –º–µ–π–∫–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É
   * @param {string} takerChatId - Telegram ID —Ç–µ–π–∫–µ—Ä–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—è CES)
   * @param {string} sellOrderId - ID –æ—Ä–¥–µ—Ä–∞ –º–µ–π–∫–µ—Ä–∞ (–ø—Ä–æ–¥–∞–≤—Ü–∞)
   * @param {number} cesAmount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CES –¥–ª—è –ø–æ–∫—É–ø–∫–∏
   * @param {number} pricePerToken - –¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω
   * @returns {Promise<{success: boolean, trade?: object, seller?: object, paymentDetails?: object, timeLimit?: number, orderNumber?: string, error?: string}>}
   */
  async createTradeFromSellOrder(takerChatId, sellOrderId, cesAmount, pricePerToken) {
    try {
      console.log(`üîÑ –¢–µ–π–∫–µ—Ä ${takerChatId} —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É –∏–∑ sell-–æ—Ä–¥–µ—Ä–∞ ${sellOrderId} –Ω–∞ ${cesAmount} CES`);
      
      // üîç –ü–æ–ª—É—á–∞–µ–º sell-–æ—Ä–¥–µ—Ä –º–µ–π–∫–µ—Ä–∞
      const sellOrder = await P2POrder.findById(sellOrderId).populate('userId');
      if (!sellOrder || sellOrder.status !== 'active') {
        return { success: false, error: '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
      }
      
      if (!sellOrder.userId) {
        return { success: false, error: '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –æ—Ä–¥–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }
      
      // üë§ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–π–∫–µ—Ä–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
      const buyer = await User.findOne({ chatId: takerChatId });
      if (!buyer) {
        return { success: false, error: '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      // ‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–≤–æ–π –æ—Ä–¥–µ—Ä
      if (sellOrder.userId._id.toString() === buyer._id.toString()) {
        return { success: false, error: '–ù–µ–ª—å–∑—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –æ—Ä–¥–µ—Ä–æ–º' };
      }
      
      // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      if (cesAmount < sellOrder.minTradeAmount || cesAmount > sellOrder.maxTradeAmount) {
        return { 
          success: false, 
          error: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${sellOrder.minTradeAmount} –¥–æ ${sellOrder.maxTradeAmount} CES` 
        };
      }
      
      // üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –æ—Ä–¥–µ—Ä–µ
      if (cesAmount > sellOrder.remainingAmount) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –≤ –æ—Ä–¥–µ—Ä–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${sellOrder.remainingAmount} CES` 
        };
      }
      
      // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      if (!buyer.p2pProfile || !buyer.p2pProfile.isProfileComplete) {
        return { success: false, error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å P2P –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫' };
      }
      
      // üîê RACE CONDITION PROTECTION: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
      const mongoose = require('mongoose');
      const session = await mongoose.startSession();
      
      try {
        let trade;
        await session.withTransaction(async () => {
          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          const currentSellOrder = await P2POrder.findById(sellOrderId).session(session);
          if (!currentSellOrder || currentSellOrder.status !== 'active' || currentSellOrder.remainingAmount < cesAmount) {
            throw new Error('–û—Ä–¥–µ—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CES —É–º–µ–Ω—å—à–∏–ª–æ—Å—å');
          }
          
          // üí∏ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
          const totalPrice = cesAmount * pricePerToken;
          
          // üìã –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
          const seller = currentSellOrder.userId;
          if (!seller.p2pProfile || !seller.p2pProfile.paymentMethods || seller.p2pProfile.paymentMethods.length === 0) {
            throw new Error('–£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
          }
          
          const activePaymentMethod = seller.p2pProfile.paymentMethods.find(pm => pm.isActive);
          if (!activePaymentMethod) {
            throw new Error('–£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã');
          }
          
          // üì¶ –ë–ª–æ–∫–∏—Ä—É–µ–º CES –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —ç—Å–∫—Ä–æ—É
          const escrowResult = await escrowService.lockTokensInEscrow(
            seller._id, 
            null, // tradeId –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
            'CES', 
            cesAmount
          );
          
          if (!escrowResult.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ CES –≤ —ç—Å–∫—Ä–æ—É: ${escrowResult.error}`);
          }
          
          // üí≥ –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π buy-–æ—Ä–¥–µ—Ä –¥–ª—è —Ç–µ–π–∫–µ—Ä–∞
          const tempBuyOrder = new P2POrder({
            userId: buyer._id,
            type: 'buy',
            amount: cesAmount,
            pricePerToken: pricePerToken,
            totalValue: totalPrice,
            status: 'locked',
            filledAmount: cesAmount,
            remainingAmount: 0,
            escrowLocked: false, // –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Å–∫—Ä–æ—É
            minTradeAmount: cesAmount,
            maxTradeAmount: cesAmount,
            paymentMethods: ['bank_transfer'],
            tradeTimeLimit: currentSellOrder.tradeTimeLimit || 30
          });
          
          await tempBuyOrder.save({ session });
          
          // üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏: –ú–µ–π–∫–µ—Ä (–ø—Ä–æ–¥–∞–≤–µ—Ü) –ø–ª–∞—Ç–∏—Ç 1%, —Ç–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å) –Ω–µ –ø–ª–∞—Ç–∏—Ç
          const sellerCommission = PrecisionUtil.calculateCommission(cesAmount, this.commissionRate, 4);
          const buyerCommission = 0;
          
          // üìù –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
          trade = new P2PTrade({
            buyOrderId: tempBuyOrder._id,
            sellOrderId: currentSellOrder._id,
            buyerId: buyer._id, // –¢–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)
            sellerId: seller._id, // –ú–µ–π–∫–µ—Ä (–ø—Ä–æ–¥–∞–≤–µ—Ü)
            amount: cesAmount,
            pricePerToken: pricePerToken,
            totalValue: totalPrice,
            buyerCommission: buyerCommission, // –¢–µ–π–∫–µ—Ä –Ω–µ –ø–ª–∞—Ç–∏—Ç –∫–æ–º–∏—Å—Å–∏—é
            sellerCommission: sellerCommission, // –ú–µ–π–∫–µ—Ä –ø–ª–∞—Ç–∏—Ç 1%
            commission: sellerCommission,
            status: 'escrow_locked',
            escrowStatus: 'locked',
            paymentMethod: 'bank_transfer',
            paymentDetails: {
              bankName: this.getBankDisplayName(activePaymentMethod.bank),
              cardNumber: activePaymentMethod.cardNumber,
              recipientName: seller.p2pProfile.fullName,
              amount: totalPrice
            },
            timeTracking: {
              createdAt: new Date(),
              escrowLockedAt: new Date(),
              expiresAt: new Date(Date.now() + (currentSellOrder.tradeTimeLimit || 30) * 60 * 1000)
            }
          });
          
          await trade.save({ session });
          
          // üìä –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ sell-–æ—Ä–¥–µ—Ä–µ
          currentSellOrder.remainingAmount -= cesAmount;
          currentSellOrder.filledAmount = (currentSellOrder.filledAmount || 0) + cesAmount;
          
          if (currentSellOrder.remainingAmount <= 0) {
            currentSellOrder.status = 'filled';
          } else {
            currentSellOrder.status = 'partial';
          }
          
          await currentSellOrder.save({ session });
          
          // üîó –û–±–Ω–æ–≤–ª—è–µ–º trade ID –≤ —ç—Å–∫—Ä–æ—É
          await escrowService.updateEscrowTradeId(seller._id, 'CES', cesAmount, trade._id);
        });
        
        await session.endSession();
        
        // üì® –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
        const orderNumber = `CES${Date.now().toString().slice(-8)}`;
        const seller = sellOrder.userId;
        
        try {
          const botInstance = require('../bot/telegramBot');
          const bot = botInstance.getInstance();
          
          const sellerMessage = `üí∞ –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê\n` +
                               `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                               `–û—Ä–¥–µ—Ä: ${orderNumber}\n` +
                               `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyer.p2pProfile?.fullName || buyer.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n` +
                               `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${cesAmount} CES\n` +
                               `–°—É–º–º–∞: ${(cesAmount * pricePerToken).toFixed(2)} ‚ÇΩ\n\n` +
                               `üîí –í–∞—à–∏ CES –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –≤ —ç—Å–∫—Ä–æ—É.\n` +
                               `–û–∂–∏–¥–∞–π—Ç–µ –ø–ª–∞—Ç—ë–∂ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.\n\n` +
                               `‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: ${sellOrder.tradeTimeLimit || 30} –º–∏–Ω.`;
          
          await bot.telegram.sendMessage(seller.chatId, sellerMessage);
          console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É ${seller.chatId}`);
        } catch (notifyError) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞:', notifyError);
        }
        
        console.log(`‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: ${trade._id}`);
        return {
          success: true,
          trade: trade,
          seller: seller,
          paymentDetails: trade.paymentDetails,
          timeLimit: sellOrder.tradeTimeLimit || 30,
          orderNumber: orderNumber
        };
        
      } catch (transactionError) {
        await session.endSession();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', transactionError);
        return { success: false, error: transactionError.message };
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏–∑ sell-–æ—Ä–¥–µ—Ä–∞:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * üí∞ –°–û–ó–î–ê–ù–ò–ï –°–î–ï–õ–ö–ò –ò–ó SELL-–û–†–î–ï–†–ê –° –í–´–ë–†–ê–ù–ù–´–ú –ë–ê–ù–ö–û–ú (–ë–ï–ó –ü–û–í–¢–û–†–ù–û–ì–û –ë–õ–û–ö–ò–†–û–í–ê–ù–ò–Ø)
   * –¢–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å) –≤—ã–±–∏—Ä–∞–µ—Ç –±–∞–Ω–∫ –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É –∏–∑ sell-–æ—Ä–¥–µ—Ä–∞ –º–µ–π–∫–µ—Ä–∞
   * @param {string} takerChatId - Telegram ID —Ç–µ–π–∫–µ—Ä–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—è CES)
   * @param {string} sellOrderId - ID –æ—Ä–¥–µ—Ä–∞ –º–µ–π–∫–µ—Ä–∞ (–ø—Ä–æ–¥–∞–≤—Ü–∞)
   * @param {number} cesAmount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CES –¥–ª—è –ø–æ–∫—É–ø–∫–∏
   * @param {number} pricePerToken - –¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω
   * @param {object} selectedPaymentMethod - –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
   * @returns {Promise<{success: boolean, trade?: object, seller?: object, paymentDetails?: object, timeLimit?: number, orderNumber?: string, error?: string}>}
   */
  async createTradeFromSellOrderWithBank(takerChatId, sellOrderId, cesAmount, pricePerToken, selectedPaymentMethod) {
    try {
      console.log(`üîÑ –¢–µ–π–∫–µ—Ä ${takerChatId} —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É –∏–∑ sell-–æ—Ä–¥–µ—Ä–∞ ${sellOrderId} –Ω–∞ ${cesAmount} CES —Å –±–∞–Ω–∫–æ–º ${selectedPaymentMethod.bank}`);
      
      // üßë‚Äçüíº –ü–û–õ–£–ß–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
      const { User } = require('../database/models');
      const buyer = await User.findOne({ chatId: takerChatId });
      if (!buyer) {
        return { success: false, error: '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      // üìã –ü–û–õ–£–ß–ê–ï–ú SELL-–û–†–î–ï–† –ò –ü–†–û–î–ê–í–¶–ê
      const sellOrder = await P2POrder.findById(sellOrderId).populate('userId');
      if (!sellOrder || sellOrder.type !== 'sell') {
        return { success: false, error: 'Sell-–æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      if (sellOrder.remainingAmount < cesAmount) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –≤ –æ—Ä–¥–µ—Ä–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${sellOrder.remainingAmount} CES` 
        };
      }
      
      // üõ°Ô∏è –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–û–§–ò–õ–¨ –ü–û–ö–£–ü–ê–¢–ï–õ–Ø
      if (!buyer.p2pProfile || !buyer.p2pProfile.isProfileComplete) {
        return { success: false, error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å P2P –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫' };
      }
      
      // üîê RACE CONDITION PROTECTION: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
      const mongoose = require('mongoose');
      const session = await mongoose.startSession();
      
      try {
        let trade;
        await session.withTransaction(async () => {
          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          const currentSellOrder = await P2POrder.findById(sellOrderId).session(session);
          if (!currentSellOrder || currentSellOrder.status !== 'active' || currentSellOrder.remainingAmount < cesAmount) {
            throw new Error('–û—Ä–¥–µ—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CES —É–º–µ–Ω—å—à–∏–ª–æ—Å—å');
          }
          
          // üí∏ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
          const totalPrice = cesAmount * pricePerToken;
          
          // üìã –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –µ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
          const seller = currentSellOrder.userId;
          if (!seller.p2pProfile || !seller.p2pProfile.paymentMethods || seller.p2pProfile.paymentMethods.length === 0) {
            throw new Error('–£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–µ–Ω
          const activePaymentMethod = seller.p2pProfile.paymentMethods.find(
            pm => pm.bank === selectedPaymentMethod.bank && pm.isActive
          );
          
          if (!activePaymentMethod) {
            throw new Error('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
          }
          
          // ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú CES - –æ–Ω–∏ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sell-–æ—Ä–¥–µ—Ä–∞!
          
          // üìù –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π buy-–æ—Ä–¥–µ—Ä –¥–ª—è —Ç–µ–π–∫–µ—Ä–∞
          const tempBuyOrder = new P2POrder({
            userId: buyer._id,
            type: 'buy',
            amount: cesAmount,
            pricePerToken: pricePerToken,
            totalValue: totalPrice,
            status: 'locked',
            filledAmount: cesAmount,
            remainingAmount: 0,
            escrowLocked: false, // –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —ç—Å–∫—Ä–æ—É
            minTradeAmount: cesAmount,
            maxTradeAmount: cesAmount,
            paymentMethods: ['bank_transfer'],
            tradeTimeLimit: currentSellOrder.tradeTimeLimit || 30
          });
          
          await tempBuyOrder.save({ session });
          
          // üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏: –ú–µ–π–∫–µ—Ä (–ø—Ä–æ–¥–∞–≤–µ—Ü) –ø–ª–∞—Ç–∏—Ç 1%, —Ç–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å) –Ω–µ –ø–ª–∞—Ç–∏—Ç
          const buyerCommission = 0;
          const sellerCommission = cesAmount * 0.01; // 1% –∫–æ–º–∏—Å—Å–∏—è —Å –º–µ–π–∫–µ—Ä–∞
          
          // üìù –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
          trade = new P2PTrade({
            buyOrderId: tempBuyOrder._id,
            sellOrderId: currentSellOrder._id,
            buyerId: buyer._id, // –¢–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)
            sellerId: seller._id, // –ú–µ–π–∫–µ—Ä (–ø—Ä–æ–¥–∞–≤–µ—Ü)
            amount: cesAmount,
            pricePerToken: pricePerToken,
            totalValue: totalPrice,
            buyerCommission: buyerCommission, // –¢–µ–π–∫–µ—Ä –Ω–µ –ø–ª–∞—Ç–∏—Ç –∫–æ–º–∏—Å—Å–∏—é
            sellerCommission: sellerCommission, // –ú–µ–π–∫–µ—Ä –ø–ª–∞—Ç–∏—Ç 1%
            commission: sellerCommission,
            status: 'escrow_locked',
            escrowStatus: 'locked',
            paymentMethod: 'bank_transfer',
            paymentDetails: {
              bankName: this.getBankDisplayName(activePaymentMethod.bank),
              cardNumber: activePaymentMethod.cardNumber,
              recipientName: seller.p2pProfile.fullName,
              amount: totalPrice
            },
            timeTracking: {
              createdAt: new Date(),
              escrowLockedAt: new Date(),
              expiresAt: new Date(Date.now() + (currentSellOrder.tradeTimeLimit || 30) * 60 * 1000)
            }
          });
          
          await trade.save({ session });
          
          // üìä –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ sell-–æ—Ä–¥–µ—Ä–µ
          currentSellOrder.remainingAmount -= cesAmount;
          currentSellOrder.filledAmount += cesAmount;
          
          if (currentSellOrder.remainingAmount <= 0) {
            currentSellOrder.status = 'filled';
          }
          
          await currentSellOrder.save({ session });
        });
        
        // üèÜ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
        const orderNumber = `CES${Date.now().toString().slice(-8)}`;
        
        return {
          success: true,
          trade: trade,
          seller: sellOrder.userId,
          paymentDetails: {
            bankName: this.getBankDisplayName(selectedPaymentMethod.bank),
            cardNumber: selectedPaymentMethod.cardNumber,
            recipientName: sellOrder.userId.p2pProfile.fullName
          },
          timeLimit: sellOrder.tradeTimeLimit || 30,
          orderNumber: orderNumber
        };
        
      } finally {
        await session.endSession();
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏–∑ sell-–æ—Ä–¥–µ—Ä–∞ —Å –±–∞–Ω–∫–æ–º:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –¢–µ–π–∫–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ä–¥–µ—Ä –º–µ–π–∫–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É
   * @param {string} takerChatId - Telegram ID —Ç–µ–π–∫–µ—Ä–∞ (–ø—Ä–æ–¥–∞–≤—Ü–∞ CES)
   * @param {string} buyOrderId - ID –æ—Ä–¥–µ—Ä–∞ –º–µ–π–∫–µ—Ä–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
   * @param {number} cesAmount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CES –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
   * @returns {Promise<{success: boolean, tradeId?: string, error?: string}>}
   */
  async createTradeFromOrder(takerChatId, buyOrderId, cesAmount) {
    try {
      console.log(`–¢–µ–π–∫–µ—Ä ${takerChatId} —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É –ø–æ –æ—Ä–¥–µ—Ä—É ${buyOrderId} –Ω–∞ ${cesAmount} CES`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –º–µ–π–∫–µ—Ä–∞
      const buyOrder = await P2POrder.findById(buyOrderId).populate('userId');
      if (!buyOrder || buyOrder.status !== 'active') {
        return { success: false, error: '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
      }
      
      // Add null check for buyOrder.userId
      if (!buyOrder.userId) {
        return { success: false, error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–¥–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–π–∫–µ—Ä–∞
      const taker = await User.findOne({ chatId: takerChatId });
      if (!taker) {
        return { success: false, error: '–¢–µ–π–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–≤–æ–π –æ—Ä–¥–µ—Ä
      if (buyOrder.userId._id.toString() === taker._id.toString()) {
        return { success: false, error: '–ù–µ–ª—å–∑—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –æ—Ä–¥–µ—Ä–æ–º' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      if (cesAmount < buyOrder.minTradeAmount || cesAmount > buyOrder.maxTradeAmount) {
        return { 
          success: false, 
          error: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${buyOrder.minTradeAmount} –¥–æ ${buyOrder.maxTradeAmount} CES` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ–π–∫–µ—Ä–∞
      if (taker.balance < buyOrder.pricePerUnit * cesAmount) {
        return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏' };
      }
      
      if (cesAmount > buyOrder.remainingAmount) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –≤ –æ—Ä–¥–µ—Ä–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${buyOrder.remainingAmount} CES` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å CES —É —Ç–µ–π–∫–µ—Ä–∞ (–∏—Å–∫–ª—é—á–∞—è —ç—Å–∫—Ä–æ—É)
      const walletInfo = await walletService.getUserWallet(taker.chatId);
      
      // –¢–µ–π–∫–µ—Ä –Ω–µ –ø–ª–∞—Ç–∏—Ç –∫–æ–º–∏—Å—Å–∏—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ —Å—É–º–º—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
      if (walletInfo.cesBalance < cesAmount) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CES. –î–æ—Å—Ç—É–ø–Ω–æ: ${walletInfo.cesBalance.toFixed(4)} CES, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${cesAmount.toFixed(4)} CES` 
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ —É –º–µ–π–∫–µ—Ä–∞ (–∏—Å–∫–ª—é—á–∞—è —ç—Å–∫—Ä–æ—É)
      const makerWalletInfo = await walletService.getUserWallet(maker.chatId);
      if (makerWalletInfo[tokenSymbol].balance < tokenAmount) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ ${tokenSymbol}. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: ${makerWalletInfo[tokenSymbol].balance.toFixed(4)} ${tokenSymbol}` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–π–∫–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–π–∫–µ—Ä–æ–º
      if (taker.chatId === maker.chatId) {
        return { 
          success: false, 
          error: `–¢–µ–π–∫–µ—Ä –∏ –º–µ–π–∫–µ—Ä –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const token = await tokenService.getTokenBySymbol(tokenSymbol);
      if (!token) {
        return { 
          success: false, 
          error: `–¢–æ–∫–µ–Ω —Å —Å–∏–º–≤–æ–ª–æ–º ${tokenSymbol} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–¥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
      if (buyOrder.status !== 'active') {
        return { 
          success: false, 
          error: '–û—Ä–¥–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
      if (buyOrder.price !== price) {
        return { 
          success: false, 
          error: `–¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ (${buyOrder.price}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ (${price})` 
        };
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      try {
        await walletService.transferCes(taker.chatId, maker.chatId, cesAmount);
        await walletService.transferToken(maker.chatId, taker.chatId, tokenSymbol, tokenAmount);
        buyOrder.remainingAmount = 0;
        buyOrder.status = 'filled';
        await buyOrder.save();
      } catch (error) {
        return { 
          success: false, 
          error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}` 
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–π–∫–µ—Ä–∞
      if (!taker.p2pProfile || !taker.p2pProfile.isProfileComplete) {
        return { success: false, error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å P2P –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫' };
      }
      
      // üîß FIX BUG #2: Race condition protection - recheck order availability
      const currentBuyOrder = await P2POrder.findById(buyOrderId);
      if (!currentBuyOrder || currentBuyOrder.status !== 'active' || currentBuyOrder.remainingAmount < cesAmount) {
        // Release already locked escrow
        await escrowService.refundTokensFromEscrow(taker._id, null, 'CES', cesAmount, 'Order no longer available');
        return { 
          success: false, 
          error: '–û—Ä–¥–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ CES' 
        };
      }
      
      // Now safely lock tokens in escrow after race condition check
      const escrowResult = await escrowService.lockTokensInEscrow(taker._id, null, 'CES', cesAmount);
      if (!escrowResult.success) {
        return { success: false, error: '–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ CES –≤ —ç—Å–∫—Ä–æ—É' };
      }
      
      const totalPrice = cesAmount * buyOrder.pricePerToken;
      
      // üîß FIX BUG #1 & #7: Standardized commission logic with precision handling
      const buyerCommission = PrecisionUtil.calculateCommission(cesAmount, this.commissionRate, 4); // 1% commission from maker (buyer)
      const sellerCommission = 0; // Taker (seller) pays no commission
      
      console.log(`üí∞ Commission calculation: Buyer (maker) pays ${buyerCommission.toFixed(4)} CES commission, Seller (taker) pays nothing`);
      
      // Convert commission to ruble equivalent for display
      const buyerCommissionInRubles = PrecisionUtil.cesCommissionToRubles(buyerCommission, buyOrder.pricePerToken, 2);
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–µ–∑–µ—Ä–≤ —Ä—É–±–ª–µ–π –∏–∑ –æ—Ä–¥–µ—Ä–∞ –≤ —Å–¥–µ–ª–∫—É
      const rubleReserveService = require('./rubleReserveService');
      const transferResult = await rubleReserveService.transferOrderToTrade(
        buyOrder.userId._id.toString(),
        buyOrderId,
        null, // tradeId –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        totalPrice
      );
      
      if (!transferResult.success) {
        // –û—Ç–º–µ–Ω—è–µ–º —ç—Å–∫—Ä–æ—É
        await escrowService.refundTokensFromEscrow(taker._id, null, 'CES', cesAmount, '–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—É–±–ª–µ–π');
        return { success: false, error: `–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞ —Ä—É–±–ª–µ–π: ${transferResult.message}` };
      }
      
      // üîß FIX BUG #3: Create proper temporary sell order instead of reusing buy order ID
      const tempSellOrder = new P2POrder({
        userId: taker._id,
        type: 'sell',
        amount: cesAmount,
        pricePerToken: buyOrder.pricePerToken,
        totalValue: totalPrice,
        status: 'locked', // Special status for temporary order
        filledAmount: cesAmount,
        remainingAmount: 0,
        escrowLocked: true,
        escrowAmount: cesAmount,
        minTradeAmount: cesAmount,
        maxTradeAmount: cesAmount,
        paymentMethods: taker.p2pProfile.paymentMethods?.map(pm => pm.bank) || ['bank_transfer'],
        tradeTimeLimit: buyOrder.tradeTimeLimit || 30
      });
      
      await tempSellOrder.save();
      
      // –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
      const trade = new P2PTrade({
        buyOrderId: buyOrder._id,
        sellOrderId: tempSellOrder._id, // ‚úÖ FIXED: Use actual sell order ID
        buyerId: buyOrder.userId._id, // –ú–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)
        sellerId: taker._id, // –¢–µ–π–∫–µ—Ä (–ø—Ä–æ–¥–∞–≤–µ—Ü)
        amount: cesAmount,
        pricePerToken: buyOrder.pricePerToken,
        totalValue: totalPrice,
        buyerCommission: buyerCommission, // –ö–æ–º–∏—Å—Å–∏—è —Å –º–µ–π–∫–µ—Ä–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
        sellerCommission: sellerCommission, // –¢–µ–π–∫–µ—Ä –Ω–µ –ø–ª–∞—Ç–∏—Ç –∫–æ–º–∏—Å—Å–∏—é
        commission: buyerCommission, // Total commission equals maker commission
        status: 'escrow_locked',
        escrowStatus: 'locked',
        paymentMethod: 'bank_transfer',
        paymentDetails: {
          bankName: this.getBankDisplayName(taker.p2pProfile.paymentMethods[0]?.bank),
          cardNumber: taker.p2pProfile.paymentMethods[0]?.cardNumber,
          recipientName: taker.p2pProfile.fullName,
          amount: totalPrice
        },
        timeTracking: {
          createdAt: new Date(),
          escrowLockedAt: new Date(),
          expiresAt: new Date(Date.now() + (buyOrder.tradeTimeLimit || 30) * 60 * 1000)
        }
      });
      
      // üîß FIX BUG #4: Add atomic transaction handling for order updates
      const mongoose = require('mongoose');
      const session = await mongoose.startSession();
      
      try {
        await session.withTransaction(async () => {
          // Update order amounts atomically
          const orderUpdateResult = await P2POrder.findByIdAndUpdate(
            buyOrder._id,
            {
              $inc: {
                filledAmount: cesAmount,
                remainingAmount: -cesAmount
              },
              $set: {
                status: buyOrder.remainingAmount - cesAmount <= 0 ? 'completed' : 'partial',
                updatedAt: new Date()
              }
            },
            { session, new: true }
          );
          
          if (!orderUpdateResult) {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞');
          }
          
          // Save trade within the same transaction
          await trade.save({ session });
          await tempSellOrder.save({ session });
        });
      } catch (transactionError) {
        console.error('‚ùå Transaction failed:', transactionError);
        // Rollback escrow on transaction failure
        await escrowService.refundTokensFromEscrow(taker._id, null, 'CES', cesAmount, 'Transaction failed');
        await rubleReserveService.releaseTradeReserve(buyOrder.userId._id.toString(), null, totalPrice);
        throw transactionError;
      } finally {
        await session.endSession();
      }
      
      // üîß FIX BUG #6: Enhanced escrow linking with better error handling
      try {
        await escrowService.linkEscrowToTrade(taker._id, trade._id, 'CES', cesAmount);
        console.log(`‚úÖ Successfully linked escrow to trade ${trade._id}`);
      } catch (linkError) {
        console.error('‚ö†Ô∏è Failed to link escrow to trade:', linkError);
        // This is not critical - trade can continue but we should monitor orphaned escrows
        // The escrow cleanup service will handle this automatically
      }
      
      // Handle remaining order reserve if order is completed
      if (buyOrder.remainingAmount - cesAmount <= 0) {
        try {
          await rubleReserveService.releaseOrderReserve(
            buyOrder.userId._id.toString(),
            buyOrder._id.toString()
          );
          console.log('‚úÖ Released remaining order reserve');
        } catch (reserveError) {
          console.error('‚ö†Ô∏è Failed to release order reserve:', reserveError);
          // Non-critical error - reserve cleanup service will handle this
        }
      }
      
      console.log(`–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${trade._id}`);
      console.log(`–ú–µ–π–∫–µ—Ä: ${buyOrder.userId.chatId}, –¢–µ–π–∫–µ—Ä: ${takerChatId}`);
      console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${cesAmount} CES, –°—É–º–º–∞: ‚ÇΩ${totalPrice}`);
      
      return { success: true, tradeId: trade._id.toString() };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
      return { success: false, error: error.message };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
   */
  getBankDisplayName(bankCode) {
    const bankNames = {
      'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
      'vtb': '–í–¢–ë',
      'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
      'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
      'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
      'mkb': '–ú–ö–ë',
      'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
      'tbank': '–¢-–ë–∞–Ω–∫',
      'domrf': '–î–û–ú.–†–§',
      'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
      'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
      'rosbank': '–†–æ—Å–±–∞–Ω–∫'
    };
    return bankNames[bankCode] || bankCode;
  }
  
  /**
   * –ú–µ–π–∫–µ—Ä –æ—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
   * @param {string} tradeId - ID —Å–¥–µ–ª–∫–∏
   * @param {string} makerChatId - Telegram ID –º–µ–π–∫–µ—Ä–∞
   * @returns {Promise<{success: boolean, error?: string}>}
   */
  async markPaymentMade(tradeId, makerChatId) {
    try {
      console.log(`–ú–µ–π–∫–µ—Ä ${makerChatId} –æ—Ç–º–µ—á–∞–µ—Ç –æ–ø–ª–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –¥–ª—è —Å–¥–µ–ª–∫–∏ ${tradeId}`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
      
      if (!trade) {
        return { success: false, error: '–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)
      if (trade.buyerId.chatId !== makerChatId) {
        return { success: false, error: '–¢–æ–ª—å–∫–æ –º–µ–π–∫–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É' };
      }
      
      // Accept both escrow_locked and payment_pending statuses
      if (!['escrow_locked', 'payment_pending'].includes(trade.status)) {
        return { success: false, error: '–ù–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏' };
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      trade.status = 'payment_made';
      trade.buyerPaymentMade = true;
      trade.timeTracking.paymentMadeAt = new Date();
      
      await trade.save();
      
      console.log(`–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –¥–ª—è —Å–¥–µ–ª–∫–∏ ${tradeId}`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ–π–∫–µ—Ä–∞
      try {
        await smartNotificationService.sendSmartTradeStatusNotification(
          trade.sellerId._id,
          trade,
          'payment_made'
        );
      } catch (notifyError) {
        console.log('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      }
      
      return { success: true };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã:', error);
      return { success: false, error: error.message };
    }
  }
  
  /**
   * –¢–µ–π–∫–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
   * @param {string} tradeId - ID —Å–¥–µ–ª–∫–∏
   * @param {string} takerChatId - Telegram ID —Ç–µ–π–∫–µ—Ä–∞
   * @returns {Promise<{success: boolean, error?: string}>}
   */
  async confirmPaymentReceived(tradeId, takerChatId) {
    try {
      console.log(`–¢–µ–π–∫–µ—Ä ${takerChatId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ ${tradeId}`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
      
      if (!trade) {
        return { success: false, error: '–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–π–∫–µ—Ä (–ø—Ä–æ–¥–∞–≤–µ—Ü)
      if (trade.sellerId.chatId !== takerChatId) {
        return { success: false, error: '–¢–æ–ª—å–∫–æ —Ç–µ–π–∫–µ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã' };
      }
      
      if (trade.status !== 'payment_made') {
        return { success: false, error: '–ú–µ–π–∫–µ—Ä –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é' };
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      trade.status = 'payment_confirmed';
      trade.sellerPaymentReceived = true;
      trade.timeTracking.paymentConfirmedAt = new Date();
      
      await trade.save();
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º CES –∏–∑ —ç—Å–∫—Ä–æ—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –º–µ–π–∫–µ—Ä—É
      const cesAmountToTransfer = trade.amount - trade.buyerCommission; // –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
      
      const releaseResult = await escrowService.releaseTokensFromEscrow(
        trade.sellerId._id,
        tradeId,
        'CES',
        cesAmountToTransfer,
        trade.buyerId.walletAddress,
        '–ü–µ—Ä–µ–≤–æ–¥ CES –º–µ–π–∫–µ—Ä—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ'
      );
      
      if (!releaseResult.success) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è CES:', releaseResult.error);
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ
      } else {
        // –ö–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —ç—Å–∫—Ä–æ—É –∫–∞–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
        if (trade.buyerCommission > 0) {
          console.log(`–ö–æ–º–∏—Å—Å–∏—è ${trade.buyerCommission} CES –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —ç—Å–∫—Ä–æ—É`);
        }
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤ —Ä—É–±–ª–µ–π —É –º–µ–π–∫–µ—Ä–∞
        const rubleReserveService = require('./rubleReserveService');
        await rubleReserveService.releaseTradeReserve(
          trade.buyerId._id.toString(),
          tradeId
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
        trade.status = 'completed';
        trade.escrowStatus = 'released';
        trade.timeTracking.completedAt = new Date();
        trade.timeTracking.escrowReleasedAt = new Date();
        
        await trade.save();
        
        console.log(`–°–¥–µ–ª–∫–∞ ${tradeId} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        console.log(`–ú–µ–π–∫–µ—Ä –ø–æ–ª—É—á–∏–ª ${cesAmountToTransfer} CES`);
        console.log(`–¢–µ–π–∫–µ—Ä –ø–æ–ª—É—á–∏–ª ‚ÇΩ${trade.totalValue}`);
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–π–∫–µ—Ä–∞
      try {
        await smartNotificationService.sendSmartTradeStatusNotification(
          trade.buyerId._id,
          trade,
          'trade_completed'
        );
      } catch (notifyError) {
        console.log('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      }
      
      return { success: true };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:', error);
      return { success: false, error: error.message };
    }
  }
  
  // Create a sell order (deprecated - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º —Ñ–ª–æ—É)
  async createSellOrder(chatId, amount, pricePerToken, paymentMethods = ['bank_transfer'], minTradeAmount = 1, maxTradeAmount = null) {
    try {
      console.log(`Creating sell order: ${amount} CES at ‚ÇΩ${pricePerToken} per token (chatId: ${chatId})`);
      
      const user = await User.findOne({ chatId });
      if (!user) {
        console.log(`User not found for chatId: ${chatId}`);
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (!user.walletAddress) {
        console.log(`User ${chatId} has no wallet`);
        throw new Error('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫');
      }
      
      // Validate input
      if (amount <= 0 || pricePerToken <= 0) {
        console.log(`Invalid input: amount=${amount}, price=${pricePerToken}`);
        throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      // Validate min/max trade amounts
      if (minTradeAmount <= 0) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      if (maxTradeAmount && maxTradeAmount <= 0) {
        throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      if (minTradeAmount > amount) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
      }
      
      if (maxTradeAmount && maxTradeAmount > amount) {
        throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
      }
      
      if (minTradeAmount > (maxTradeAmount || amount)) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
      }
      
      if (amount < this.minOrderAmount || amount > this.maxOrderAmount) {
        throw new Error(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${this.minOrderAmount} –¥–æ ${this.maxOrderAmount} CES`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç: —Ç–æ–ª—å–∫–æ 1 –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingSellOrder = await P2POrder.findOne({
        userId: user._id,
        type: 'sell',
        status: { $in: ['active', 'partial'] }
      });
      
      if (existingSellOrder) {
        throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É. –û—Ç–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.');
      }
      
      // Check available CES balance (excluding escrowed tokens)
      const walletInfo = await walletService.getUserWallet(user.chatId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
      // –ö–æ–º–∏—Å—Å–∏—è 1% –±–µ—Ä–µ—Ç—Å—è —Å –º–µ–π–∫–µ—Ä–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞, –∞ –Ω–µ –ø—Ä–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–∏
      if (walletInfo.cesBalance < amount) {
        console.log(`Insufficient available CES balance: ${walletInfo.cesBalance} < ${amount}`);
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${walletInfo.cesBalance.toFixed(4)} CES, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount.toFixed(4)} CES`);
      }

      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö sell –æ—Ä–¥–µ—Ä–æ–≤
      const activeSellOrders = await P2POrder.find({
        userId: user._id,
        type: 'sell',
        status: { $in: ['active', 'partial'] }
      });
      
      let totalEscrowedAmount = 0;
      activeSellOrders.forEach(order => {
        if (order.escrowLocked && order.escrowAmount > 0) {
          totalEscrowedAmount += order.escrowAmount;
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç—Å–∫—Ä–æ—É
      const totalRequired = totalEscrowedAmount + amount;
      
      if (totalRequired > walletInfo.cesBalance + (user.escrowCESBalance || 0)) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞. –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${(walletInfo.cesBalance + (user.escrowCESBalance || 0)).toFixed(4)} CES, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${totalRequired.toFixed(4)} CES`);
      }
      
      console.log(`‚úÖ Escrow validation passed: Total will be ${totalRequired.toFixed(4)} CES`);
      
      // Calculate total value before using it
      const totalValue = amount * pricePerToken;
      console.log(`Total order value: ‚ÇΩ${totalValue.toFixed(2)}`);
      
      // üîç ANTI-FRAUD: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
      console.log(`üîç [SECURITY] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ sell –æ—Ä–¥–µ—Ä–∞ –¥–ª—è ${chatId}`);
      const securityCheck = await antiFraudService.checkOrderSecurity(chatId, {
        type: 'sell',
        amount: amount,
        pricePerToken: pricePerToken,
        totalValue: totalValue
      });
      
      if (!securityCheck.allowed) {
        console.log(`‚ùå [SECURITY] –û—Ä–¥–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${securityCheck.reason}`);
        throw new Error(`üîí –û—Ä–¥–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. ${securityCheck.reason}`);
      }
      
      if (securityCheck.riskLevel === 'MEDIUM') {
        console.log(`‚ö†Ô∏è [SECURITY] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${securityCheck.reason}`);
      }
      
      // Lock tokens in escrow before creating order
      console.log(`Locking ${amount} CES in escrow`);
      await escrowService.lockTokensInEscrow(user._id, null, 'CES', amount);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userTradeTimeLimit = user.p2pProfile?.tradeTimeLimit || this.defaultTradeTimeout;
      console.log(`–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.chatId}: ${userTradeTimeLimit} –º–∏–Ω.`);
      
      // Create new sell order
      console.log(`Creating new sell order`);
      
      const sellOrder = new P2POrder({
        userId: user._id,
        type: 'sell',
        amount: amount,
        pricePerToken: pricePerToken,
        totalValue: totalValue,
        remainingAmount: amount,
        escrowLocked: true,
        escrowAmount: amount,
        paymentMethods: paymentMethods,
        tradeTimeLimit: userTradeTimeLimit, // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        minTradeAmount: minTradeAmount,
        maxTradeAmount: maxTradeAmount || amount
      });
      
      await sellOrder.save();
      
      console.log(`Sell order created: ${sellOrder._id}`);
      
      // Try to match with existing buy orders
      console.log(`Attempting to match orders...`);
      await this.matchOrders();
      
      return sellOrder;
      
    } catch (error) {
      console.error('Error creating sell order:', error);
      throw error;
    }
  }

  // Enhanced order matching with smart algorithms
  async matchOrders() {
    try {
      console.log('Matching orders with enhanced algorithm...');
      
      // Get active buy orders sorted by price (highest first) and trust score
      const buyOrders = await P2POrder.find({
        type: 'buy',
        status: { $in: ['active', 'partial'] },
        remainingAmount: { $gt: 0 }
      }).sort({ pricePerToken: -1, createdAt: 1 }).populate('userId');
      
      // Get active sell orders sorted by price (lowest first) and trust score
      const sellOrders = await P2POrder.find({
        type: 'sell',
        status: { $in: ['active', 'partial'] },
        remainingAmount: { $gt: 0 }
      }).sort({ pricePerToken: 1, createdAt: 1 }).populate('userId');
      
      // Smart matching algorithm
      for (const buyOrder of buyOrders) {
        // Add null check for buyOrder.userId
        if (!buyOrder.userId) {
          console.log('‚ö†Ô∏è Skipping buy order with missing user data');
          continue;
        }
        
        for (const sellOrder of sellOrders) {
          // Add null check for sellOrder.userId
          if (!sellOrder.userId) {
            console.log('‚ö†Ô∏è Skipping sell order with missing user data');
            continue;
          }
          
          // Skip if same user (no self-trading)
          if (buyOrder.userId._id.toString() === sellOrder.userId._id.toString()) {
            continue;
          }
          
          // Check price compatibility (buy price >= sell price)
          if (buyOrder.pricePerToken >= sellOrder.pricePerToken) {
            // Check payment method compatibility
            const compatibleMethods = buyOrder.paymentMethods.filter(method => 
              sellOrder.paymentMethods.includes(method)
            );
            
            if (compatibleMethods.length === 0) {
              // No compatible payment methods, skip this pair
              continue;
            }
            
            // Check user verification compatibility
            const buyUserTrust = buyOrder.userId.trustScore !== undefined ? buyOrder.userId.trustScore : 0;
            const sellUserTrust = sellOrder.userId.trustScore !== undefined ? sellOrder.userId.trustScore : 0;
            
            // Calculate trade amount (minimum of remaining amounts)
            const tradeAmount = Math.min(buyOrder.remainingAmount, sellOrder.remainingAmount);
            
            // Define tradePrice before it's used
            const tradePrice = sellOrder.pricePerToken;
            
            // üîß FIX BUG #8: Enhanced trading limit validation
            const tradeValue = PrecisionUtil.multiply(tradeAmount, tradePrice, 2);
            
            // Check user trading limits more thoroughly
            const buyerLimitCheck = this.checkEnhancedTradeLimits(buyOrder.userId, tradeAmount, tradeValue, 'buy');
            const sellerLimitCheck = this.checkEnhancedTradeLimits(sellOrder.userId, tradeAmount, tradeValue, 'sell');
            
            if (!buyerLimitCheck.allowed || !sellerLimitCheck.allowed) {
              console.log(`‚ö†Ô∏è Trading limits exceeded: Buyer - ${buyerLimitCheck.reason}, Seller - ${sellerLimitCheck.reason}`);
              continue; // Skip this pair and try next
            }
            
            // üîß FIX BUG #10: Enhanced payment method compatibility check
            const paymentMethodCompatible = this.checkPaymentMethodCompatibility(buyOrder, sellOrder);
            if (!paymentMethodCompatible.compatible) {
              console.log(`‚ö†Ô∏è Payment methods incompatible: ${paymentMethodCompatible.reason}`);
              continue; // Skip this pair and try next
            }
            
            // Use seller's price for the trade (already defined above)
            // const tradePrice = sellOrder.pricePerToken;  // REMOVED - already defined above
            const totalValue = tradeAmount * tradePrice;
            
            // üîß FIX BUG #1: Standardized commission logic across all trade creation paths
            // Use consistent maker/taker identification based on order creation time
            const buyOrderTime = new Date(buyOrder.createdAt).getTime();
            const sellOrderTime = new Date(sellOrder.createdAt).getTime();
            
            let buyerCommissionInRubles = 0;
            let sellerCommissionInRubles = 0;
            let makerCommissionInCES = 0;
            
            if (buyOrderTime < sellOrderTime) {
              // Buy order was created first ‚Üí Buyer is MAKER, Seller is TAKER
              makerCommissionInCES = PrecisionUtil.calculateCommission(tradeAmount, this.commissionRate, 4); // 1% from buyer (maker)
              buyerCommissionInRubles = PrecisionUtil.cesCommissionToRubles(makerCommissionInCES, tradePrice, 2);
              sellerCommissionInRubles = 0; // Seller (taker) pays nothing
              console.log(`üîë Buy order is maker (${new Date(buyOrder.createdAt).toISOString()}) vs sell order taker (${new Date(sellOrder.createdAt).toISOString()})`);
            } else {
              // Sell order was created first ‚Üí Seller is MAKER, Buyer is TAKER  
              makerCommissionInCES = PrecisionUtil.calculateCommission(tradeAmount, this.commissionRate, 4); // 1% from seller (maker)
              sellerCommissionInRubles = PrecisionUtil.cesCommissionToRubles(makerCommissionInCES, tradePrice, 2);
              buyerCommissionInRubles = 0; // Buyer (taker) pays nothing
              console.log(`üîë Sell order is maker (${new Date(sellOrder.createdAt).toISOString()}) vs buy order taker (${new Date(buyOrder.createdAt).toISOString()})`);
            }
            
            // üîß FIX BUG #2: Race condition protection in order matching
            // Double-check order availability before executing trade
            const currentBuyOrder = await P2POrder.findById(buyOrder._id);
            const currentSellOrder = await P2POrder.findById(sellOrder._id);
            
            if (!currentBuyOrder || !currentSellOrder || 
                currentBuyOrder.status !== 'active' || currentSellOrder.status !== 'active' ||
                currentBuyOrder.remainingAmount < tradeAmount || currentSellOrder.remainingAmount < tradeAmount) {
              console.log('‚ö†Ô∏è Orders no longer available for matching, skipping...');
              continue; // Skip this pair and try next
            }
            
            console.log(`üí∞ Executing trade: ${tradeAmount} CES at ‚ÇΩ${tradePrice} (maker commission: ${makerCommissionInCES.toFixed(4)} CES = ‚ÇΩ${Math.max(buyerCommissionInRubles, sellerCommissionInRubles).toFixed(2)}, taker commission: ‚ÇΩ0)`);
            
            // Send smart notifications to both users
            await smartNotificationService.sendSmartOrderMatchNotification(
              buyOrder.userId._id, 
              sellOrder, 
              buyOrder
            );
            
            await smartNotificationService.sendSmartOrderMatchNotification(
              sellOrder.userId._id, 
              buyOrder, 
              sellOrder
            );
            
            // Execute the trade with correct maker commission
            await this.executeTrade(buyOrder, sellOrder, tradeAmount, tradePrice, totalValue, buyerCommissionInRubles, sellerCommissionInRubles);
            
            // üîß FIX BUG #4: Atomic order updates to prevent inconsistent state
            const mongoose = require('mongoose');
            const session = await mongoose.startSession();
            
            try {
              await session.withTransaction(async () => {
                // Update both orders atomically
                await P2POrder.findByIdAndUpdate(
                  buyOrder._id,
                  {
                    $inc: { remainingAmount: -tradeAmount, filledAmount: tradeAmount },
                    $set: { 
                      status: buyOrder.remainingAmount - tradeAmount === 0 ? 'completed' : 'partial',
                      updatedAt: new Date()
                    }
                  },
                  { session }
                );
                
                await P2POrder.findByIdAndUpdate(
                  sellOrder._id,
                  {
                    $inc: { remainingAmount: -tradeAmount, filledAmount: tradeAmount },
                    $set: { 
                      status: sellOrder.remainingAmount - tradeAmount === 0 ? 'completed' : 'partial',
                      updatedAt: new Date()
                    }
                  },
                  { session }
                );
              });
            } catch (updateError) {
              console.error('‚ùå Failed to update orders atomically:', updateError);
              // The trade execution already happened, but order states may be inconsistent
              // The cleanup service will handle this
            } finally {
              await session.endSession();
            }
            
            // Update local order objects for loop continuation logic
            buyOrder.remainingAmount -= tradeAmount;
            buyOrder.filledAmount += tradeAmount;
            sellOrder.remainingAmount -= tradeAmount;
            sellOrder.filledAmount += tradeAmount;
            
            console.log(`‚úÖ Trade executed successfully between ${buyOrder._id} and ${sellOrder._id}`);
            
            // If buy order is completed, break inner loop
            if (buyOrder.remainingAmount === 0) {
              break;
            }
          }
        }
      }
      
    } catch (error) {
      console.error('Error matching orders:', error);
      throw error;
    }
  }

  // üîß FIX BUG #8: Enhanced user trade limits validation
  checkEnhancedTradeLimits(user, cesAmount, rubleValue, orderType) {
    try {
      const now = new Date();
      const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      
      // Check verification level requirements for high-value trades
      if (rubleValue > 50000 && (!user.verificationLevel || user.verificationLevel === 'unverified')) {
        return { allowed: false, reason: '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Å–¥–µ–ª–æ–∫ —Å–≤—ã—à–µ ‚ÇΩ50,000' };
      }
      
      // Check trust score requirements for very large trades
      const trustScore = user.trustScore || 5.0; // Default to good score if not set
      if (rubleValue > 100000 && trustScore < 4.0) {
        return { allowed: false, reason: '–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫' };
      }
      
      // Check if user has too many failed trades recently
      const recentFailures = user.tradeAnalytics?.failedTradesLast30Days || 0;
      if (recentFailures > 10) { // Increased threshold to be less restrictive
        return { allowed: false, reason: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫' };
      }
      
      // Check daily limits if configured
      if (user.tradingLimits && user.tradingLimits.dailyLimit && user.tradingLimits.dailyLimit > 0) {
        const dailyLimit = user.tradingLimits.dailyLimit;
        if (rubleValue > dailyLimit) {
          return { allowed: false, reason: '–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç' };
        }
      }
      
      // Check single trade limit if configured
      if (user.tradingLimits && user.tradingLimits.maxSingleTrade && user.tradingLimits.maxSingleTrade > 0) {
        if (cesAmount > user.tradingLimits.maxSingleTrade) {
          return { allowed: false, reason: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏' };
        }
      }
      
      // All checks passed
      return { allowed: true };
    } catch (error) {
      console.error('Error checking enhanced trade limits:', error);
      return { allowed: true }; // Allow trade if there's an error to avoid blocking
    }
  }
  
  // üîß FIX BUG #10: Enhanced payment method compatibility check
  checkPaymentMethodCompatibility(buyOrder, sellOrder) {
    try {
      // If no payment methods specified, assume compatible
      if (!buyOrder.paymentMethods || !sellOrder.paymentMethods) {
        return { compatible: true };
      }
      
      // Check for exact matches
      const compatibleMethods = buyOrder.paymentMethods.filter(method => 
        sellOrder.paymentMethods.includes(method)
      );
      
      if (compatibleMethods.length === 0) {
        return { 
          compatible: false, 
          reason: '–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã' 
        };
      }
      
      // Additional business logic checks
      // For example, some payment methods might have additional requirements
      
      return { compatible: true, methods: compatibleMethods };
    } catch (error) {
      console.error('Error checking payment method compatibility:', error);
      return { compatible: true }; // Default to compatible if error
    }
  }

  // Execute a trade between two orders with escrow
  async executeTrade(buyOrder, sellOrder, amount, pricePerToken, totalValue, buyerCommission, sellerCommission) {
    try {
      console.log(`Executing escrow trade: ${amount} CES at ‚ÇΩ${pricePerToken} (buyer commission: ‚ÇΩ${buyerCommission.toFixed(2)}, seller commission: ‚ÇΩ${sellerCommission.toFixed(2)})`);
      
      // Commission logic is now correctly handled by caller:
      // - If buyer created order first ‚Üí buyerCommission > 0, sellerCommission = 0
      // - If seller created order first ‚Üí sellerCommission > 0, buyerCommission = 0
      
      const totalCommission = buyerCommission + sellerCommission;
      
      // Create trade record with escrow status
      const trade = new P2PTrade({
        buyOrderId: buyOrder._id,
        sellOrderId: sellOrder._id,
        buyerId: buyOrder.userId._id,
        sellerId: sellOrder.userId._id,
        amount: amount,
        pricePerToken: pricePerToken,
        totalValue: totalValue,
        buyerCommission: buyerCommission, // Only > 0 if buyer is maker
        sellerCommission: sellerCommission, // Only > 0 if seller is maker  
        commission: totalCommission, // Total commission (should be just maker commission)
        status: 'escrow_locked',
        escrowStatus: 'locked',
        paymentMethod: buyOrder.paymentMethods ? buyOrder.paymentMethods[0] : 'bank_transfer',
        timeTracking: {
          createdAt: new Date(),
          escrowLockedAt: new Date(),
          expiresAt: new Date(Date.now() + this.defaultTradeTimeout * 60 * 1000)
        }
      });
      
      await trade.save();
      console.log(`Trade record created: ${trade._id}`);
      
      // Link escrow to trade (update existing escrow transaction)
      try {
        await escrowService.linkEscrowToTrade(sellOrder.userId._id, trade._id, 'CES', amount);
      } catch (escrowError) {
        console.log('Warning: Could not link escrow to trade, but trade continues');
      }
      
      // Set trade status to pending payment
      trade.status = 'payment_pending';
      await trade.save();
      
      console.log(`Escrow trade created successfully: ${trade._id}`);
      
      // Schedule automatic timeout handling
      setTimeout(() => {
        this.handleTradeTimeout(trade._id);
      }, this.defaultTradeTimeout * 60 * 1000);
      
      return trade;
      
    } catch (error) {
      console.error('Error executing escrow trade:', error);
      throw error;
    }
  }

  // Get market orders for display with pagination
  async getMarketOrders(limit = 20, offset = 0) {
    try {
      // Get active buy and sell orders with populated user data
      // Limit the fields we retrieve for better performance
      const [buyOrders, sellOrders] = await Promise.all([
        P2POrder.find({ 
          type: 'buy', 
          status: { $in: ['active', 'partial'] },
          remainingAmount: { $gt: 0 }
        })
        .sort({ pricePerToken: -1, createdAt: 1 }) // Sort by price (highest first), then by time
        .skip(offset)
        .limit(limit)
        .populate({
          path: 'userId',
          select: 'username firstName trustScore verificationLevel'
        }),
        
        P2POrder.find({ 
          type: 'sell', 
          status: { $in: ['active', 'partial'] },
          remainingAmount: { $gt: 0 }
        })
        .sort({ pricePerToken: 1, createdAt: 1 }) // Sort by price (lowest first), then by time
        .skip(offset)
        .limit(limit)
        .populate({
          path: 'userId',
          select: 'username firstName trustScore verificationLevel'
        })
      ]);
      
      // Get total count for pagination
      const [buyOrdersCount, sellOrdersCount] = await Promise.all([
        P2POrder.countDocuments({ 
          type: 'buy', 
          status: { $in: ['active', 'partial'] },
          remainingAmount: { $gt: 0 }
        }),
        P2POrder.countDocuments({ 
          type: 'sell', 
          status: { $in: ['active', 'partial'] },
          remainingAmount: { $gt: 0 }
        })
      ]);
      
      return {
        buyOrders,
        sellOrders,
        buyOrdersCount,
        sellOrdersCount
      };
    } catch (error) {
      console.error('Error getting market orders:', error);
      return {
        buyOrders: [],
        sellOrders: [],
        buyOrdersCount: 0,
        sellOrdersCount: 0
      };
    }
  }

  // Get user's P2P orders with pagination
  async getUserOrders(chatId, limit = 10, offset = 0) {
    try {
      const user = await User.findOne({ chatId });
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const [orders, totalCount] = await Promise.all([
        P2POrder.find({ userId: user._id })
          .sort({ createdAt: -1 }) // Most recent first
          .skip(offset)
          .limit(limit),
        
        P2POrder.countDocuments({ userId: user._id })
      ]);
      
      return {
        orders,
        totalCount
      };
      
    } catch (error) {
      console.error('Error getting user orders:', error);
      throw error;
    }
  }

  // Get user's P2P orders by user ID and type
  async getUserOrdersByUserId(userId, type, limit = 1) {
    try {
      const orders = await P2POrder.find({ 
        userId: userId,
        type: type,
        status: 'active'
      })
      .sort({ createdAt: -1 })
      .limit(limit);
      
      return orders;
      
    } catch (error) {
      console.error('Error getting user orders by user ID:', error);
      return [];
    }
  }

  // Get user's P2P trade history
  async getUserTrades(chatId, limit = 10) {
    try {
      const user = await User.findOne({ chatId });
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const trades = await P2PTrade.find({
        $or: [
          { buyerId: user._id },
          { sellerId: user._id }
        ]
      })
      .sort({ createdAt: -1 })
      .limit(limit)
      .populate('buyerId', 'username firstName trustScore')
      .populate('sellerId', 'username firstName trustScore');
      
      return trades;
      
    } catch (error) {
      console.error('Error getting user trades:', error);
      throw error;
    }
  }

  // Cancel an order
  async cancelOrder(chatId, orderId) {
    try {
      const user = await User.findOne({ chatId });
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const order = await P2POrder.findOne({
        _id: orderId,
        userId: user._id,
        status: { $in: ['active', 'partial'] }
      });
      
      if (!order) {
        throw new Error('–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
      
      // If it's a sell order with tokens locked in escrow, release them
      if (order.type === 'sell' && order.escrowLocked && order.escrowAmount > 0) {
        console.log(`üîì Releasing ${order.escrowAmount} CES from escrow for cancelled sell order ${orderId}`);
        
        try {
          await escrowService.refundTokensFromEscrow(
            user._id,
            null, // No trade ID for order cancellation
            'CES',
            order.escrowAmount,
            'Sell order cancelled by maker'
          );
          
          console.log(`‚úÖ Successfully released ${order.escrowAmount} CES from escrow`);
        } catch (escrowError) {
          console.error('Error releasing escrow during order cancellation:', escrowError);
          // Continue with order cancellation even if escrow release fails
          // Log the error for manual intervention
          console.error(`‚ö†Ô∏è MANUAL INTERVENTION REQUIRED: Failed to release ${order.escrowAmount} CES from escrow for order ${orderId}`);
        }
      }
      
      // Release ruble reserves for buy orders
      if (order.type === 'buy') {
        try {
          const rubleReserveService = require('./rubleReserveService');
          await rubleReserveService.releaseOrderReserve(
            user._id.toString(),
            orderId
          );
          console.log(`‚úÖ Released ruble reserves for cancelled buy order ${orderId}`);
        } catch (reserveError) {
          console.error('Error releasing ruble reserves during order cancellation:', reserveError);
        }
      }
      
      order.status = 'cancelled';
      await order.save();
      
      console.log(`Order cancelled: ${orderId}`);
      return order;
      
    } catch (error) {
      console.error('Error cancelling order:', error);
      throw error;
    }
  }

  // Get market price suggestion for P2P trading
  async getMarketPriceSuggestion() {
    try {
      // Get current CES price from price service (cached for performance)
      const cesPriceData = await priceService.getCESPrice();
      const currentPrice = cesPriceData.priceRub;
      
      // For better performance, use a simpler calculation for suggested price
      // Add a small premium for sellers, subtract a small discount for buyers
      const suggestedPrice = currentPrice;
      
      return {
        currentPrice: parseFloat(currentPrice.toFixed(2)),
        suggestedPrice: parseFloat(suggestedPrice.toFixed(2)),
        priceRange: {
          min: parseFloat((currentPrice * 0.95).toFixed(2)), // 5% below market
          max: parseFloat((currentPrice * 1.05).toFixed(2))  // 5% above market
        }
      };
    } catch (error) {
      console.error('Error getting market price suggestion:', error);
      // Return default values to prevent app crashes
      return {
        currentPrice: 0,
        suggestedPrice: 0,
        priceRange: { min: 0, max: 0 }
      };
    }
  }

  // Handle trade timeout
  async handleTradeTimeout(tradeId) {
    try {
      console.log(`Handling trade timeout for ${tradeId}`);
      
      // Get trade details before handling timeout
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
      
      // Handle escrow timeout
      await escrowService.handleEscrowTimeout(tradeId);
      
      // Send smart notification about timeout
      if (trade) {
        // Add null checks for buyerId and sellerId
        if (trade.buyerId && trade.sellerId) {
          const smartNotificationService = require('./smartNotificationService');
          await smartNotificationService.sendSmartTradeStatusNotification(
            trade.buyerId._id, 
            trade, 
            'timeout'
          );
          await smartNotificationService.sendSmartTradeStatusNotification(
            trade.sellerId._id, 
            trade, 
            'timeout'
          );
        } else {
          console.log('‚ö†Ô∏è Skipping timeout notifications due to missing buyerId or sellerId');
        }
      }
    } catch (error) {
      console.error('Error handling trade timeout:', error);
    }
  }

  // Confirm payment for a trade
  async confirmPayment(tradeId, buyerChatId, paymentProof = '') {
    try {
      console.log(`Confirming payment for trade ${tradeId}`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
      
      if (!trade) {
        return { success: false, error: '–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }
      
      // Add null checks for buyerId and sellerId
      if (!trade.buyerId || !trade.sellerId) {
        return { success: false, error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–¥–µ–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }
      
      // Check if user is the seller (who marks payment as completed)
      if (trade.sellerId.chatId !== userChatId) {
        return { success: false, error: '–¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π' };
      }
      
      if (trade.buyerId.chatId !== buyerChatId) {
        throw new Error('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ');
      }
      
      if (trade.status !== 'payment_pending') {
        throw new Error('–ù–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏');
      }
      
      // Update trade with payment confirmation
      trade.status = 'payment_confirmed';
      trade.paymentDetails.buyerProof = paymentProof;
      trade.timeTracking.paymentMadeAt = new Date();
      trade.timeTracking.paymentConfirmedAt = new Date();
      
      await trade.save();
      
      // Release tokens from escrow to buyer
      const releaseResult = await escrowService.releaseTokensFromEscrow(
        trade.sellerId._id,
        tradeId,
        'CES',
        trade.amount,
        trade.buyerId._id
      );
      
      // Complete the trade
      trade.status = 'completed';
      trade.escrowStatus = 'released';
      trade.cesTransferTxHash = releaseResult.txHash;
      trade.timeTracking.completedAt = new Date();
      
      await trade.save();
      
      // Transfer commission to admin wallet (ONLY from maker)
      try {
        // Determine who is the maker based on which commission is non-zero
        // In our new system: only one user should have commission > 0 (the maker)
        let makerChatId = null;
        let makerCommissionInCES = 0;
        
        if (trade.sellerCommission > 0) {
          // Seller is the maker
          makerChatId = trade.sellerId.chatId;
          makerCommissionInCES = trade.sellerCommission / trade.pricePerToken;
          console.log(`Seller is maker - transferring commission: ${makerCommissionInCES.toFixed(4)} CES to admin wallet`);
        } else if (trade.buyerCommission > 0) {
          // Buyer is the maker (this case happens when buyer's order was created first)
          makerChatId = trade.buyerId.chatId;
          makerCommissionInCES = trade.buyerCommission / trade.pricePerToken;
          console.log(`Buyer is maker - transferring commission: ${makerCommissionInCES.toFixed(4)} CES to admin wallet`);
        }
        
        if (makerChatId && makerCommissionInCES > 0) {
          await walletService.sendCESTokens(
            makerChatId, // Maker pays commission
            '0xC2D5FABd53F537A1225460AE30097198aB14FF32', // Admin wallet address
            makerCommissionInCES
          );
          console.log(`Maker commission transfer completed successfully: ${makerCommissionInCES.toFixed(4)} CES`);
        } else {
          console.log('No commission to transfer (both users are takers)');
        }
      } catch (commissionError) {
        console.error('Error transferring commission:', commissionError);
        // Don't fail the trade if commission transfer fails
      }
      
      // Update user statistics
      await this.updateUserStats(trade.buyerId._id, trade.sellerId._id, trade.totalValue, 'completed');
      
      // Send smart notifications
      await smartNotificationService.sendSmartTradeStatusNotification(
        trade.buyerId._id, 
        trade, 
        'completed'
      );
      await smartNotificationService.sendSmartTradeStatusNotification(
        trade.sellerId._id, 
        trade, 
        'completed'
      );
      
      return trade;
      
    } catch (error) {
      console.error('Error confirming payment:', error);
      throw error;
    }
  }

  // Cancel a trade
  async cancelTrade(tradeId, userChatId, reason = 'Cancelled by user') {
    try {
      console.log(`Cancelling trade ${tradeId}`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
      
      if (!trade) {
        throw new Error('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // Check if user is participant
      const isParticipant = trade.buyerId.chatId === userChatId || trade.sellerId.chatId === userChatId;
      if (!isParticipant) {
        throw new Error('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏');
      }
      
      if (!['escrow_locked', 'payment_pending'].includes(trade.status)) {
        throw new Error('–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É');
      }
      
      // Refund tokens from escrow to seller
      await escrowService.refundTokensFromEscrow(
        trade.sellerId._id,
        tradeId,
        'CES',
        trade.amount,
        reason
      );
      
      // Update trade status
      trade.status = 'cancelled';
      trade.escrowStatus = 'returned';
      trade.disputeReason = reason;
      
      await trade.save();
      
      // Update user statistics
      await this.updateUserStats(trade.buyerId._id, trade.sellerId._id, trade.totalValue, 'cancelled');
      
      // Send smart notifications
      await smartNotificationService.sendSmartTradeStatusNotification(
        trade.buyerId._id, 
        trade, 
        'cancelled'
      );
      await smartNotificationService.sendSmartTradeStatusNotification(
        trade.sellerId._id, 
        trade, 
        'cancelled'
      );
      
      console.log(`Trade ${tradeId} cancelled and refunded`);
      return trade;
      
    } catch (error) {
      console.error('Error cancelling trade:', error);
      throw error;
    }
  }

  // Create a trade with escrow for the selling flow
  async createTradeWithEscrow(tradeData) {
    try {
      const { buyerChatId, sellerChatId, cesAmount, pricePerToken, totalPrice, paymentMethod, tradeTimeLimit, orderNumber, buyOrderId } = tradeData;
      
      console.log(`Creating trade with escrow: ${cesAmount} CES for ‚ÇΩ${totalPrice}`);
      
      // Get buyer and seller
      const buyer = await User.findOne({ chatId: buyerChatId });
      const seller = await User.findOne({ chatId: sellerChatId });
      
      if (!buyer || !seller) {
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }
      
      // Check if both users have wallets
      if (!buyer.walletAddress) {
        return { success: false, error: '–£ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ —Å–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ —Å–Ω–∞—á–∞–ª–∞.' };
      }
      
      if (!seller.walletAddress) {
        return { success: false, error: '–£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ —Å–Ω–∞—á–∞–ª–∞.' };
      }
      
      // Check seller's available CES balance (excluding escrowed tokens)
      const walletInfo = await walletService.getUserWallet(sellerChatId);
      if (walletInfo.cesBalance < cesAmount) {
        return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CES –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Å–∫—Ä–æ—É' };
      }
      
      // Map bank codes to payment method enum values
      const paymentMethodMapping = {
        'sberbank': 'bank_transfer',
        'vtb': 'bank_transfer',
        'gazprombank': 'bank_transfer',
        'alfabank': 'bank_transfer',
        'rshb': 'bank_transfer',
        'mkb': 'bank_transfer',
        'sovcombank': 'bank_transfer',
        'tbank': 'bank_transfer',
        'domrf': 'bank_transfer',
        'otkritie': 'bank_transfer',
        'raiffeisenbank': 'bank_transfer',
        'rosbank': 'bank_transfer'
      };
      
      // Get the mapped payment method from the paymentMethod object
      let mappedPaymentMethod = 'bank_transfer'; // Default fallback
      if (paymentMethod && paymentMethod.bank) {
        mappedPaymentMethod = paymentMethodMapping[paymentMethod.bank] || 'bank_transfer';
      }
      
      // Create a temporary sell order for this trade
      const tempSellOrder = new P2POrder({
        userId: seller._id,
        type: 'sell',
        amount: cesAmount,
        pricePerToken: pricePerToken,
        totalValue: totalPrice,
        status: 'locked',
        filledAmount: cesAmount,
        remainingAmount: 0,
        escrowLocked: true,
        escrowAmount: cesAmount,
        minTradeAmount: cesAmount,
        maxTradeAmount: cesAmount,
        paymentMethods: ['bank_transfer'],
        tradeTimeLimit: tradeTimeLimit || 30
      });
      
      await tempSellOrder.save();
      const sellOrderId = tempSellOrder._id;
      
      // Use the provided buyOrderId or the temporary sell order ID as fallback
      const finalBuyOrderId = buyOrderId || sellOrderId;
      
      // Create trade record
      const trade = new P2PTrade({
        buyOrderId: finalBuyOrderId,
        sellOrderId: sellOrderId,
        buyerId: buyer._id,
        sellerId: seller._id,
        amount: cesAmount,
        pricePerToken: pricePerToken,
        totalValue: totalPrice,
        buyerCommission: 0, // Seller is maker, so buyer pays no commission
        sellerCommission: 0, // Commission is handled separately
        commission: 0, // Will be calculated later if needed
        status: 'escrow_locked', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        escrowStatus: 'locked', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        paymentMethod: mappedPaymentMethod,
        timeTracking: {
          createdAt: new Date(),
          expiresAt: new Date(Date.now() + (tradeTimeLimit || 30) * 60 * 1000)
        }
      });
      
      await trade.save();
      
      // Now lock CES tokens in escrow with the trade ID
      const escrowResult = await escrowService.lockTokensInEscrow(seller._id, trade._id, 'CES', cesAmount);
      if (!escrowResult.success) {
        // Rollback trade creation
        await P2PTrade.findByIdAndDelete(trade._id);
        await P2POrder.findByIdAndDelete(tempSellOrder._id);
        return { success: false, error: '–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —ç—Å–∫—Ä–æ—É' };
      }
      
      // Update escrow locked timestamp after successful escrow
      trade.timeTracking.escrowLockedAt = new Date();
      await trade.save();
      
      console.log(`Trade created with escrow: ${trade._id}`);
      return { success: true, tradeId: trade._id };
      
    } catch (error) {
      console.error('Error creating trade with escrow:', error);
      return { success: false, error: error.message };
    }
  }
  
  // Confirm payment received by seller
  async confirmPaymentReceived(tradeId, sellerChatId) {
    try {
      console.log(`Confirming payment received for trade ${tradeId}`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
      
      if (!trade) {
        return { success: false, error: '–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }
      
      // Check if user is the seller
      if (trade.sellerId.chatId !== sellerChatId) {
        return { success: false, error: '–¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞' };
      }
      
      if (!['escrow_locked', 'payment_pending', 'payment_made'].includes(trade.status)) {
        return { success: false, error: '–ù–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏' };
      }
      
      // Release tokens from escrow to buyer
      const escrowService = require('./escrowService');
      await escrowService.releaseTokensFromEscrow(
        trade.sellerId._id,
        tradeId,
        'CES',
        trade.amount,
        trade.buyerId._id
      );
      
      // Update trade status to completed
      trade.status = 'completed';
      trade.escrowStatus = 'released';
      trade.timeTracking.paymentConfirmedAt = new Date();
      trade.timeTracking.completedAt = new Date();
      
      await trade.save();
      
      // Notify buyer about completion
      try {
        const botInstance = require('../bot/telegramBot');
        const bot = botInstance.getInstance();
        const buyerMessage = `‚úÖ –°–î–ï–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!

` +
                             `–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.
` +
                             `${trade.amount} CES –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª—ë–∫!

` +
                             `–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ P2P –±–∏—Ä–∂–∏ !`;
        
        await bot.telegram.sendMessage(trade.buyerId.chatId, buyerMessage);
        console.log(`‚úÖ Completion notification sent to buyer ${trade.buyerId.chatId}`);
      } catch (notifyError) {
        console.error('‚ö†Ô∏è Failed to notify buyer about completion:', notifyError);
      }
      
      console.log(`Payment confirmed for trade ${tradeId}`);
      return { success: true };
      
    } catch (error) {
      console.error('Error confirming payment received:', error);
      return { success: false, error: error.message };
    }
  }

  // Mark payment as completed
  async markPaymentCompleted(tradeId, userChatId) {
    try {
      console.log(`Marking payment as completed for trade ${tradeId}`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
      
      if (!trade) {
        return { success: false, error: '–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }
      
      // Check if user is the seller (who marks payment as completed)
      if (trade.sellerId.chatId !== userChatId) {
        return { success: false, error: '–¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π' };
      }
      
      if (trade.status !== 'escrow_locked') {
        return { success: false, error: '–ù–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏' };
      }
      
      // Update trade status to payment pending confirmation
      trade.status = 'payment_pending';
      trade.timeTracking.paymentMadeAt = new Date();
      
      await trade.save();
      
      // Notify buyer about payment completion
      try {
        await smartNotificationService.sendSmartTradeStatusNotification(
          trade.buyerId._id,
          trade,
          'payment_completed'
        );
      } catch (notifyError) {
        console.log('Warning: Could not send notification');
      }
      
      console.log(`Payment marked as completed for trade ${tradeId}`);
      return { success: true };
      
    } catch (error) {
      console.error('Error marking payment as completed:', error);
      return { success: false, error: error.message };
    }
  }
  
  // Cancel trade by user request with enhanced safety
  async cancelTradeByUser(tradeId, userChatId) {
    try {
      console.log(`üõ°Ô∏è [ENHANCED] Starting safe trade cancellation: ${tradeId}`);
      
      // Use enhanced safety system for trade cancellation
      const escrowSafetySystem = require('./escrowSafetySystem');
      const result = await escrowSafetySystem.safeCancelTrade(
        tradeId, 
        '–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 
        userChatId
      );
      
      if (result.success) {
        const trade = result.trade;
        
        // Add null check for trade
        if (!trade) {
          console.log('‚ö†Ô∏è Trade data not available in cancellation result');
          return { success: false, error: '–î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
        }
        
        // Send notifications to both participants
        try {
          const smartNotificationService = require('./smartNotificationService');
          // Add null checks for buyerId and sellerId
          if (trade.buyerId && trade.sellerId) {
            const otherUserId = trade.buyerId.chatId === userChatId ? trade.sellerId._id : trade.buyerId._id;
            
            await smartNotificationService.sendSmartTradeStatusNotification(
              otherUserId,
              trade,
              'cancelled'
            );
          } else {
            console.log('‚ö†Ô∏è Skipping notifications due to missing buyerId or sellerId');
          }
        } catch (notifyError) {
          console.log('Warning: Could not send notification');
        }
        
        // Validate seller balance after cancellation
        try {
          const balanceValidationService = require('./balanceValidationService');
          // Add null check for sellerId
          if (trade.sellerId) {
            await balanceValidationService.validateAfterEscrowOperation(
              trade.sellerId._id,
              'cancel_trade',
              trade.amount,
              'CES'
            );
          } else {
            console.log('‚ö†Ô∏è Skipping balance validation due to missing sellerId');
          }
        } catch (validationError) {
          console.warn('‚ö†Ô∏è Balance validation after trade cancellation failed:', validationError.message);
        }
        
        console.log(`‚úÖ [ENHANCED] Trade ${tradeId} cancelled safely by user`);
        return { success: true };
      } else {
        console.error(`‚ùå [ENHANCED] Trade cancellation failed: ${result.error}`);
        return result; // Return the error details from safety system
      }
      
    } catch (error) {
      console.error('Error in enhanced trade cancellation:', error);
      return { success: false, error: error.message };
    }
  }
  
  // Cancel trade with timeout (automatic cancellation) with enhanced safety
  async cancelTradeWithTimeout(tradeId) {
    try {
      console.log(`üõ°Ô∏è [ENHANCED] Cancelling trade ${tradeId} due to timeout with safety checks`);
      
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId')
        .populate('sellerId');
      
      if (!trade) {
        console.log(`Trade ${tradeId} not found for timeout cancellation`);
        return;
      }
      
      // Add null checks for buyerId and sellerId
      if (!trade.buyerId || !trade.sellerId) {
        console.log(`Trade ${tradeId} missing user data for timeout cancellation`);
        return;
      }
      
      if (!['escrow_locked', 'payment_pending'].includes(trade.status)) {
        console.log(`Trade ${tradeId} cannot be cancelled (status: ${trade.status})`);
        return;
      }
      
      // Use enhanced safety system for timeout cancellation
      try {
        const escrowSafetySystem = require('./escrowSafetySystem');
        const result = await escrowSafetySystem.safeCancelTrade(
          tradeId, 
          '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ', 
          trade.sellerId.chatId // Use seller as the requesting user for timeout
        );
        
        if (result.success) {
          console.log(`‚úÖ [ENHANCED] Trade ${tradeId} cancelled safely due to timeout`);
        } else {
          console.error(`‚ùå [ENHANCED] Timeout cancellation failed: ${result.error}`);
          
          // For timeout cancellations, we may need special handling
          if (result.requiresManualIntervention) {
            console.error(`‚ö†Ô∏è MANUAL INTERVENTION REQUIRED: Timeout cancellation failed for trade ${tradeId}`);
            console.error(`Escrow details: ${result.error}`);
            
            // Create a timeout-specific manual intervention record
            const { EscrowTransaction } = require('../database/models');
            // Add null check for sellerId
            if (trade.sellerId) {
              const timeoutIntervention = new EscrowTransaction({
                userId: trade.sellerId._id,
                tradeId: tradeId,
                type: 'timeout_intervention_required',
                tokenType: 'CES',
                amount: trade.amount,
                status: 'pending',
                reason: `Timeout cancellation failed: ${result.error}`,
                createdAt: new Date()
              });
              
              await timeoutIntervention.save();
              console.log(`üìù [ENHANCED] Timeout intervention record created: ${timeoutIntervention._id}`);
            } else {
              console.log('‚ö†Ô∏è Skipping timeout intervention record creation due to missing sellerId');
            }
          }
          
          // Continue with trade status update in database even if escrow refund fails
          // This prevents trades from being stuck in pending status forever
          trade.status = 'cancelled';
          trade.escrowStatus = 'failed_refund';
          trade.disputeReason = `–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ`;
          
          await trade.save();
          console.log(`‚ö†Ô∏è [ENHANCED] Trade ${tradeId} marked as cancelled with failed refund status`);
        }
        
      } catch (safetyError) {
        console.error(`‚ùå [ENHANCED] Safety system error during timeout cancellation:`, safetyError);
        
        // Fallback: mark trade as cancelled in database to prevent permanent pending status
        trade.status = 'cancelled';
        trade.escrowStatus = 'system_error';
        trade.disputeReason = `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ: ${safetyError.message}`;
        
        await trade.save();
        console.log(`‚ö†Ô∏è [ENHANCED] Trade ${tradeId} marked as cancelled due to system error`);
      }
      
      // Notify both participants regardless of escrow status
      try {
        const smartNotificationService = require('./smartNotificationService');
        // Add null checks for buyerId and sellerId
        if (trade.buyerId && trade.sellerId) {
          await smartNotificationService.sendSmartTradeStatusNotification(
            trade.buyerId._id,
            trade,
            'timeout'
          );
          await smartNotificationService.sendSmartTradeStatusNotification(
            trade.sellerId._id,
            trade,
            'timeout'
          );
        } else {
          console.log('‚ö†Ô∏è Skipping timeout notifications due to missing buyerId or sellerId');
        }
      } catch (notifyError) {
        console.log('Warning: Could not send timeout notifications');
      }
      
      console.log(`‚úÖ [ENHANCED] Timeout cancellation process completed for trade ${tradeId}`);
      
    } catch (error) {
      console.error('Error in enhanced timeout cancellation:', error);
    }
  }

  // Update user trading statistics
  async updateUserStats(buyerId, sellerId, tradeValue, tradeStatus) {
    try {
      const updates = {
        $inc: {
          'tradeAnalytics.totalTrades': 1,
          'tradeAnalytics.successfulTrades': tradeStatus === 'completed' ? 1 : 0,
          'tradingVolumeLast30Days': tradeValue
        }
      };
      
      await Promise.all([
        User.findByIdAndUpdate(buyerId, updates),
        User.findByIdAndUpdate(sellerId, updates)
      ]);
      
      // Update trust scores
      await reputationService.updateRatingAfterTrade(buyerId, tradeStatus);
      await reputationService.updateRatingAfterTrade(sellerId, tradeStatus);
      
      console.log(`Updated trading stats and trust scores for users`);
      
    } catch (error) {
      console.error('Error updating user stats:', error);
    }
  }
}

module.exports = new P2PService();