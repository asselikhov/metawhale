/**
 * Ruble Reserve Service
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞–º–∏ —Ä—É–±–ª–µ–π —É –º–µ–π–∫–µ—Ä–æ–≤
 */

const { RubleReserve } = require('../database/models');

class RubleReserveService {
  constructor() {
    this.reserveAmounts = new Map(); // userId -> total reserved amount
  }

  /**
   * –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç —Ä—É–±–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ–π–∫–µ—Ä–∞)
   * @param {string} orderId - ID –æ—Ä–¥–µ—Ä–∞
   * @param {number} amount - –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {Promise<{success: boolean, message?: string}>}
   */
  async reserveForOrder(userId, orderId, amount) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
      const existingReserve = await RubleReserve.findOne({ 
        userId, 
        orderId, 
        status: 'reserved' 
      });
      
      if (existingReserve) {
        return { success: false, message: '–†–µ–∑–µ—Ä–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞' };
      }
      
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤
      const reserve = new RubleReserve({
        userId,
        orderId,
        amount,
        type: 'order_reserve',
        status: 'reserved',
        reason: '–†–µ–∑–µ—Ä–≤ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É CES'
      });
      
      await reserve.save();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ø–∞–º—è—Ç–∏
      const currentReserved = this.reserveAmounts.get(userId) || 0;
      this.reserveAmounts.set(userId, currentReserved + amount);
      
      console.log(`üí∞ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ ${amount} ‚ÇΩ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –æ—Ä–¥–µ—Ä ${orderId}`);
      return { success: true };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—É–±–ª–µ–π:', error);
      return { success: false, message: error.message };
    }
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä–µ–∑–µ—Ä–≤ –∏–∑ –æ—Ä–¥–µ—Ä–∞ –≤ —Å–¥–µ–ª–∫—É
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} orderId - ID –æ—Ä–¥–µ—Ä–∞
   * @param {string} tradeId - ID —Å–¥–µ–ª–∫–∏
   * @param {number} amount - –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
   * @returns {Promise<{success: boolean, message?: string}>}
   */
  async transferOrderToTrade(userId, orderId, tradeId, amount) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑–µ—Ä–≤ –æ—Ä–¥–µ—Ä–∞
      const orderReserve = await RubleReserve.findOne({
        userId,
        orderId,
        status: 'reserved',
        type: 'order_reserve'
      });
      
      if (!orderReserve) {
        return { success: false, message: '–†–µ–∑–µ—Ä–≤ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      if (orderReserve.amount < amount) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤' };
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ –æ—Ä–¥–µ—Ä–∞
      if (orderReserve.amount === amount) {
        orderReserve.status = 'used';
        orderReserve.releasedAt = new Date();
      } else {
        orderReserve.amount -= amount;
      }
      await orderReserve.save();
      
      // –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏
      const tradeReserve = new RubleReserve({
        userId,
        tradeId,
        amount,
        type: 'trade_reserve',
        status: 'reserved',
        reason: '–†–µ–∑–µ—Ä–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏'
      });
      
      await tradeReserve.save();
      
      console.log(`üí± –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${amount} ‚ÇΩ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Ä–¥–µ—Ä–∞ –≤ —Ä–µ–∑–µ—Ä–≤ —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return { success: true };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–µ–∑–µ—Ä–≤–∞:', error);
      return { success: false, message: error.message };
    }
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} orderId - ID –æ—Ä–¥–µ—Ä–∞
   * @returns {Promise<{success: boolean, message?: string}>}
   */
  async releaseOrderReserve(userId, orderId) {
    try {
      const reserve = await RubleReserve.findOne({
        userId,
        orderId,
        status: 'reserved',
        type: 'order_reserve'
      });
      
      if (!reserve) {
        return { success: false, message: '–†–µ–∑–µ—Ä–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      reserve.status = 'released';
      reserve.releasedAt = new Date();
      reserve.reason = '–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω';
      
      await reserve.save();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ø–∞–º—è—Ç–∏
      const currentReserved = this.reserveAmounts.get(userId) || 0;
      this.reserveAmounts.set(userId, Math.max(0, currentReserved - reserve.amount));
      
      console.log(`üí∞ –û—Å–≤–æ–±–æ–∂–¥—ë–Ω —Ä–µ–∑–µ—Ä–≤ ${reserve.amount} ‚ÇΩ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –æ—Ä–¥–µ—Ä ${orderId}`);
      return { success: true, amount: reserve.amount };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –æ—Ä–¥–µ—Ä–∞:', error);
      return { success: false, message: error.message };
    }
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} tradeId - ID —Å–¥–µ–ª–∫–∏
   * @returns {Promise<{success: boolean, message?: string}>}
   */
  async releaseTradeReserve(userId, tradeId) {
    try {
      const reserve = await RubleReserve.findOne({
        userId,
        tradeId,
        status: 'reserved',
        type: 'trade_reserve'
      });
      
      if (!reserve) {
        return { success: false, message: '–†–µ–∑–µ—Ä–≤ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      reserve.status = 'used';
      reserve.releasedAt = new Date();
      reserve.reason = '–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω—ã';
      
      await reserve.save();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ø–∞–º—è—Ç–∏
      const currentReserved = this.reserveAmounts.get(userId) || 0;
      this.reserveAmounts.set(userId, Math.max(0, currentReserved - reserve.amount));
      
      console.log(`üí∞ –†–µ–∑–µ—Ä–≤ —Å–¥–µ–ª–∫–∏ ${reserve.amount} ‚ÇΩ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return { success: true, amount: reserve.amount };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ —Å–¥–µ–ª–∫–∏:', error);
      return { success: false, message: error.message };
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} tradeId - ID —Å–¥–µ–ª–∫–∏
   * @returns {Promise<{success: boolean, message?: string}>}
   */
  async refundTradeReserve(userId, tradeId) {
    try {
      const reserve = await RubleReserve.findOne({
        userId,
        tradeId,
        status: 'reserved',
        type: 'trade_reserve'
      });
      
      if (!reserve) {
        return { success: false, message: '–†–µ–∑–µ—Ä–≤ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      reserve.status = 'released';
      reserve.releasedAt = new Date();
      reserve.reason = '–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã';
      
      await reserve.save();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ø–∞–º—è—Ç–∏
      const currentReserved = this.reserveAmounts.get(userId) || 0;
      this.reserveAmounts.set(userId, Math.max(0, currentReserved - reserve.amount));
      
      console.log(`üí∞ –í–æ–∑–≤—Ä–∞—â—ë–Ω —Ä–µ–∑–µ—Ä–≤ —Å–¥–µ–ª–∫–∏ ${reserve.amount} ‚ÇΩ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return { success: true, amount: reserve.amount };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞ —Å–¥–µ–ª–∫–∏:', error);
      return { success: false, message: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä—É–±–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<number>}
   */
  async getTotalReserved(userId) {
    try {
      const reserves = await RubleReserve.find({
        userId,
        status: 'reserved'
      });
      
      const total = reserves.reduce((sum, reserve) => sum + reserve.amount, 0);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      this.reserveAmounts.set(userId, total);
      
      return total;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä—É–±–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
   * –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ API
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<number>}
   */
  async getAvailableBalance(userId) {
    try {
      // –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è –¥–µ–º–æ
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
      const reservedAmount = await this.getTotalReserved(userId);
      const totalBalance = 1000000; // 1,000,000 —Ä—É–±–ª–µ–π –¥–ª—è –¥–µ–º–æ
      
      return Math.max(0, totalBalance - reservedAmount);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', error);
      return 0;
    }
  }
}

module.exports = new RubleReserveService();