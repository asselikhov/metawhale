/**
 * Fiat Reserve Service
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞–º–∏ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è P2P —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –ó–∞–º–µ–Ω—è–µ—Ç rubleReserveService –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç–∏
 */

const mongoose = require('mongoose');
const { FiatReserve, RubleReserve, User } = require('../database/models');
const fiatCurrencyService = require('./fiatCurrencyService');
const Decimal = require('decimal.js');

class FiatReserveService {
  constructor() {
    this.defaultCurrency = 'RUB'; // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  }

  /**
   * –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} orderId - ID –æ—Ä–¥–µ—Ä–∞
   * @param {number} amount - –°—É–º–º–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
   * @param {string} currency - –í–∞–ª—é—Ç–∞ (USD, RUB, EUR, etc.)
   * @param {number} amountInUSD - –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USD
   * @param {number} exchangeRate - –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ USD –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {Promise<{success: boolean, reserveId?: string, error?: string}>}
   */
  async reserveForOrder(userId, orderId, amount, currency = 'RUB', amountInUSD = null, exchangeRate = null) {
    try {
      console.log(`üí∞ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ ${fiatCurrencyService.formatAmount(amount, currency)} –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∞–ª—é—Ç—ã
      if (!fiatCurrencyService.isCurrencySupported(currency)) {
        return { success: false, error: `–í–∞–ª—é—Ç–∞ ${currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è` };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏ USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
      if (!amountInUSD || !exchangeRate) {
        try {
          exchangeRate = await fiatCurrencyService.getExchangeRate(currency, 'USD');
          amountInUSD = await fiatCurrencyService.convertAmount(amount, currency, 'USD');
        } catch (conversionError) {
          return { 
            success: false, 
            error: `–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç: ${conversionError.message}` 
          };
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const availableBalance = await this.getAvailableBalance(userId, currency);
      if (availableBalance < amount) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${fiatCurrencyService.formatAmount(availableBalance, currency)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${fiatCurrencyService.formatAmount(amount, currency)}` 
        };
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤
      const fiatReserve = new FiatReserve({
        userId: new mongoose.Types.ObjectId(userId),
        orderId: new mongoose.Types.ObjectId(orderId),
        amount: amount,
        currency: currency,
        amountInUSD: amountInUSD,
        exchangeRate: exchangeRate,
        type: 'order_reserve',
        status: 'reserved',
        reason: `–†–µ–∑–µ—Ä–≤ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId}`
      });

      await fiatReserve.save();

      console.log(`‚úÖ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ ${fiatCurrencyService.formatAmount(amount, currency)} (${fiatCurrencyService.formatAmount(amountInUSD, 'USD')}) ID: ${fiatReserve._id}`);
      
      return { 
        success: true, 
        reserveId: fiatReserve._id.toString(),
        amountReserved: amount,
        currency: currency,
        amountInUSD: amountInUSD
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏
   */
  async reserveForTrade(userId, tradeId, amount, currency = 'RUB', amountInUSD = null, exchangeRate = null) {
    try {
      console.log(`ü§ù –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ ${fiatCurrencyService.formatAmount(amount, currency)} –¥–ª—è —Å–¥–µ–ª–∫–∏ ${tradeId}`);
      
      // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ reserveForOrder, –Ω–æ —Å —Ç–∏–ø–æ–º 'trade_reserve'
      if (!fiatCurrencyService.isCurrencySupported(currency)) {
        return { success: false, error: `–í–∞–ª—é—Ç–∞ ${currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è` };
      }

      if (!amountInUSD || !exchangeRate) {
        try {
          exchangeRate = await fiatCurrencyService.getExchangeRate(currency, 'USD');
          amountInUSD = await fiatCurrencyService.convertAmount(amount, currency, 'USD');
        } catch (conversionError) {
          return { 
            success: false, 
            error: `–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç: ${conversionError.message}` 
          };
        }
      }

      const fiatReserve = new FiatReserve({
        userId: new mongoose.Types.ObjectId(userId),
        tradeId: new mongoose.Types.ObjectId(tradeId),
        amount: amount,
        currency: currency,
        amountInUSD: amountInUSD,
        exchangeRate: exchangeRate,
        type: 'trade_reserve',
        status: 'reserved',
        reason: `–†–µ–∑–µ—Ä–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ ${tradeId}`
      });

      await fiatReserve.save();

      console.log(`‚úÖ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–¥–µ–ª–∫–∏: ${fiatCurrencyService.formatAmount(amount, currency)}`);
      
      return { 
        success: true, 
        reserveId: fiatReserve._id.toString(),
        amountReserved: amount,
        currency: currency,
        amountInUSD: amountInUSD
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–¥–µ–ª–∫–∏:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥ —Ä–µ–∑–µ—Ä–≤–∞ –∏–∑ –æ—Ä–¥–µ—Ä–∞ –≤ —Å–¥–µ–ª–∫—É
   */
  async transferOrderToTrade(userId, orderId, tradeId, amount, currency = 'RUB') {
    try {
      console.log(`üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Ä–µ–∑–µ—Ä–≤–∞ –∏–∑ –æ—Ä–¥–µ—Ä–∞ ${orderId} –≤ —Å–¥–µ–ª–∫—É ${tradeId}`);

      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑–µ—Ä–≤ –æ—Ä–¥–µ—Ä–∞
      const orderReserve = await FiatReserve.findOne({
        userId: new mongoose.Types.ObjectId(userId),
        orderId: new mongoose.Types.ObjectId(orderId),
        currency: currency,
        type: 'order_reserve',
        status: 'reserved'
      });

      if (!orderReserve) {
        return { success: false, error: '–†–µ–∑–µ—Ä–≤ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      if (orderReserve.amount < amount) {
        return { 
          success: false, 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–µ–∑–µ—Ä–≤–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${fiatCurrencyService.formatAmount(orderReserve.amount, currency)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${fiatCurrencyService.formatAmount(amount, currency)}` 
        };
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤ —Å–¥–µ–ª–∫–∏
      const tradeReserve = new FiatReserve({
        userId: orderReserve.userId,
        tradeId: new mongoose.Types.ObjectId(tradeId),
        amount: amount,
        currency: currency,
        amountInUSD: amount * orderReserve.exchangeRate,
        exchangeRate: orderReserve.exchangeRate,
        type: 'trade_reserve',
        status: 'reserved',
        reason: `–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –æ—Ä–¥–µ—Ä–∞ ${orderId} –≤ —Å–¥–µ–ª–∫—É ${tradeId}`
      });

      await tradeReserve.save();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ –æ—Ä–¥–µ—Ä–∞
      if (orderReserve.amount === amount) {
        // –í–µ—Å—å —Ä–µ–∑–µ—Ä–≤ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è
        orderReserve.status = 'used';
        orderReserve.releasedAt = new Date();
      } else {
        // –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ - —É–º–µ–Ω—å—à–∞–µ–º —Å—É–º–º—É
        orderReserve.amount -= amount;
        orderReserve.amountInUSD -= (amount * orderReserve.exchangeRate);
      }

      await orderReserve.save();

      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω: ${fiatCurrencyService.formatAmount(amount, currency)}`);
      
      return { 
        success: true, 
        tradeReserveId: tradeReserve._id.toString(),
        remainingOrderReserve: orderReserve.amount
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–µ–∑–µ—Ä–≤–∞:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Ä–¥–µ—Ä–∞
   */
  async releaseOrderReserve(userId, orderId, currency = null) {
    try {
      console.log(`üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Ä–¥–µ—Ä–∞ ${orderId}`);

      const query = {
        userId: new mongoose.Types.ObjectId(userId),
        orderId: new mongoose.Types.ObjectId(orderId),
        type: 'order_reserve',
        status: 'reserved'
      };

      if (currency) {
        query.currency = currency;
      }

      const result = await FiatReserve.updateMany(
        query,
        {
          $set: {
            status: 'released',
            releasedAt: new Date(),
            reason: '–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Ä–¥–µ—Ä–∞'
          }
        }
      );

      console.log(`‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–æ–≤ –æ—Ä–¥–µ—Ä–∞: ${result.modifiedCount}`);
      
      return { 
        success: true, 
        releasedCount: result.modifiedCount 
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –æ—Ä–¥–µ—Ä–∞:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ —Å–¥–µ–ª–∫–∏
   */
  async releaseTradeReserve(userId, tradeId, currency = null) {
    try {
      console.log(`üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ —Å–¥–µ–ª–∫–∏ ${tradeId}`);

      const query = {
        userId: new mongoose.Types.ObjectId(userId),
        tradeId: new mongoose.Types.ObjectId(tradeId),
        type: 'trade_reserve',
        status: 'reserved'
      };

      if (currency) {
        query.currency = currency;
      }

      const result = await FiatReserve.updateMany(
        query,
        {
          $set: {
            status: 'released',
            releasedAt: new Date(),
            reason: '–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ —Å–¥–µ–ª–∫–∏'
          }
        }
      );

      console.log(`‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–æ–≤ —Å–¥–µ–ª–∫–∏: ${result.modifiedCount}`);
      
      return { 
        success: true, 
        releasedCount: result.modifiedCount 
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ —Å–¥–µ–ª–∫–∏:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
   */
  async getAvailableBalance(userId, currency = 'RUB') {
    try {
      // –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –≤–Ω–µ—à–Ω–µ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
      
      const mockBalances = {
        'USD': 1000.00,
        'RUB': 100000.00,
        'EUR': 850.00,
        'CNY': 7000.00,
        'INR': 83000.00,
        'NGN': 775000.00,
        'VND': 24000000.00,
        'KRW': 1320000.00,
        'JPY': 149000.00,
        'BRL': 5000.00
      };

      const totalBalance = mockBalances[currency] || 0;

      // –í—ã—á–∏—Ç–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
      const reservedAmount = await this.getReservedBalance(userId, currency);
      const availableBalance = totalBalance - reservedAmount;

      return Math.max(0, availableBalance); // –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
   */
  async getReservedBalance(userId, currency = 'RUB') {
    try {
      const result = await FiatReserve.aggregate([
        {
          $match: {
            userId: new mongoose.Types.ObjectId(userId),
            currency: currency,
            status: 'reserved'
          }
        },
        {
          $group: {
            _id: null,
            totalReserved: { $sum: '$amount' }
          }
        }
      ]);

      return result.length > 0 ? result[0].totalReserved : 0;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserReserveStats(userId) {
    try {
      const stats = await FiatReserve.aggregate([
        {
          $match: {
            userId: new mongoose.Types.ObjectId(userId)
          }
        },
        {
          $group: {
            _id: {
              currency: '$currency',
              status: '$status'
            },
            totalAmount: { $sum: '$amount' },
            totalAmountInUSD: { $sum: '$amountInUSD' },
            count: { $sum: 1 }
          }
        },
        {
          $group: {
            _id: '$_id.currency',
            byStatus: {
              $push: {
                status: '$_id.status',
                totalAmount: '$totalAmount',
                totalAmountInUSD: '$totalAmountInUSD',
                count: '$count'
              }
            }
          }
        }
      ]);

      return stats;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ú–∏–≥—Ä–∞—Ü–∏—è —Ä—É–±–ª–µ–≤–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –≤ —Ñ–∏–∞—Ç–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
   */
  async migrateRubleReserve(rubleReserveId) {
    try {
      const rubleReserve = await RubleReserve.findById(rubleReserveId);
      if (!rubleReserve) {
        return { success: false, error: '–†—É–±–ª–µ–≤—ã–π —Ä–µ–∑–µ—Ä–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      if (rubleReserve.isMigrated) {
        return { success: false, error: '–†–µ–∑–µ—Ä–≤ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω' };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å RUB/USD
      const exchangeRate = await fiatCurrencyService.getExchangeRate('RUB', 'USD');
      const amountInUSD = await fiatCurrencyService.convertAmount(rubleReserve.amount, 'RUB', 'USD');

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–∞—Ç–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
      const fiatReserve = new FiatReserve({
        userId: rubleReserve.userId,
        orderId: rubleReserve.orderId,
        tradeId: rubleReserve.tradeId,
        amount: rubleReserve.amount,
        currency: 'RUB',
        amountInUSD: amountInUSD,
        exchangeRate: exchangeRate,
        type: rubleReserve.type,
        status: rubleReserve.status,
        reason: rubleReserve.reason,
        createdAt: rubleReserve.createdAt,
        releasedAt: rubleReserve.releasedAt
      });

      await fiatReserve.save();

      // –ü–æ–º–µ—á–∞–µ–º —Ä—É–±–ª–µ–≤—ã–π —Ä–µ–∑–µ—Ä–≤ –∫–∞–∫ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      rubleReserve.isMigrated = true;
      rubleReserve.migratedToFiatReserveId = fiatReserve._id;
      await rubleReserve.save();

      console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Ä—É–±–ª–µ–≤—ã–π —Ä–µ–∑–µ—Ä–≤ ${rubleReserveId} ‚Üí ${fiatReserve._id}`);
      
      return { 
        success: true, 
        newFiatReserveId: fiatReserve._id.toString(),
        migratedAmount: rubleReserve.amount,
        currency: 'RUB'
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä—É–±–ª–µ–≤–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤
   */
  async getGlobalStats() {
    try {
      const stats = await FiatReserve.aggregate([
        {
          $group: {
            _id: {
              currency: '$currency',
              status: '$status'
            },
            totalAmount: { $sum: '$amount' },
            totalAmountInUSD: { $sum: '$amountInUSD' },
            count: { $sum: 1 }
          }
        },
        {
          $group: {
            _id: '$_id.currency',
            totalAmountInUSD: { $sum: '$totalAmountInUSD' },
            byStatus: {
              $push: {
                status: '$_id.status',
                totalAmount: '$totalAmount',
                totalAmountInUSD: '$totalAmountInUSD',
                count: '$count'
              }
            }
          }
        },
        {
          $sort: { totalAmountInUSD: -1 }
        }
      ]);

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const totalStats = await FiatReserve.aggregate([
        {
          $group: {
            _id: null,
            totalReservesInUSD: { $sum: '$amountInUSD' },
            totalReserves: { $sum: 1 },
            totalUsers: { $addToSet: '$userId' }
          }
        },
        {
          $project: {
            _id: 0,
            totalReservesInUSD: 1,
            totalReserves: 1,
            uniqueUsers: { $size: '$totalUsers' }
          }
        }
      ]);

      return {
        byCurrency: stats,
        totals: totalStats[0] || { totalReservesInUSD: 0, totalReserves: 0, uniqueUsers: 0 }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return { byCurrency: [], totals: { totalReservesInUSD: 0, totalReserves: 0, uniqueUsers: 0 } };
    }
  }
}

module.exports = new FiatReserveService();