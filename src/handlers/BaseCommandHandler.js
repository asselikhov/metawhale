/**
 * Base Command Handler
 * Handles basic commands like /start, /ces and message routing
 */

const { Markup } = require('telegraf');
const priceService = require('../services/priceService');
const commissionTrackingService = require('../services/commissionTrackingService');
const visitorStatsService = require('../services/visitorStatsService');
const { User, PriceHistory, isDatabaseConnected } = require('../database/models');
const sessionManager = require('./SessionManager');
const fs = require('fs').promises;
const LocalizationHelper = require('../utils/localizationHelper');

class BaseCommandHandler {
  constructor() {
    // Handlers will be injected to avoid circular imports
    this.walletHandler = null;
    this.p2pHandler = null;
    this.transferHandler = null;
  }

  // Method to inject handlers (called from MessageHandler)
  setHandlers(walletHandler, p2pHandler, transferHandler, dataHandler) {
    this.walletHandler = walletHandler;
    this.p2pHandler = p2pHandler;
    this.transferHandler = transferHandler;
    this.dataHandler = dataHandler;
  }

  // Handle /start command
  async handleStart(ctx) {
    try {
      console.log('üöÄ handleStart called');
      
      const chatId = ctx.chat.id.toString();
      console.log(`üöÄ Handling /start command for user ${chatId}`);
      
      // Register or update user in database (if available)
      let user = null;
      if (isDatabaseConnected()) {
        try {
          user = await User.findOneAndUpdate(
            { chatId },
            {
              username: ctx.from.username,
              firstName: ctx.from.first_name,
              lastName: ctx.from.last_name,
              isActive: true
            },
            { upsert: true, new: true }
          );
          console.log(`üë§ User registered/updated in database:`, user ? `User ${user.username || user.firstName}` : 'No user data');
        } catch (dbError) {
          console.error('Database error during user registration:', dbError);
        }
      }
      
      const welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !';
      console.log(`üí¨ Welcome message: ${welcomeMessage}`);
      
      // Main menu with regular keyboard buttons (4 buttons in 1 row)
      const mainMenu = Markup.keyboard(
        LocalizationHelper.getLocalizedMainMenu(chatId)
      ).resize();
      
      console.log(`üì§ Sending welcome message to user ${chatId}`);
      console.log(`‚å® Keyboard markup configured`);
      
      const result = await ctx.reply(welcomeMessage, mainMenu);
      console.log(`‚úÖ Welcome message sent successfully to user ${chatId}`);
      
    } catch (error) {
      console.error('Start command error:', error);
      try {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
  }

  // Handle price command for any token
  async handlePrice(ctx, tokenSymbol = 'CES') {
    try {
      console.log(`üí∞ handlePrice called for ${tokenSymbol}`);
      
      // Send immediate acknowledgment
      const sentMessage = await ctx.reply(`‚è≥ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É ${tokenSymbol}...`);
      console.log(`üí∞ Price command acknowledgment sent for ${tokenSymbol}`);
      
      // Process price data in background and update the message
      this.processPriceData(ctx, sentMessage, tokenSymbol);
      
    } catch (error) {
      console.error(`Error sending ${tokenSymbol} price to user:`, error);
      try {
        await ctx.reply(`‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ${tokenSymbol} –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
  }

  // Process price data in background
  async processPriceData(ctx, sentMessage, tokenSymbol = 'CES') {
    try {
      let priceData;
      
      // Get price data based on token symbol
      switch (tokenSymbol.toUpperCase()) {
        case 'CES':
          priceData = await priceService.getCESPrice();
          break;
        case 'POL':
          priceData = await priceService.getPOLPrice();
          break;
        case 'TRX':
          priceData = await priceService.getTRXPrice();
          break;
        case 'BNB':
          priceData = await priceService.getBNBPrice();
          break;
        case 'SOL':
          priceData = await priceService.getSOLPrice();
          break;
        case 'ETH':
          priceData = await priceService.getETHPrice();
          break;
        case 'ARB':
          priceData = await priceService.getARBPrice();
          break;
        case 'AVAX':
          priceData = await priceService.getAVAXPrice();
          break;
        case 'USDT':
          priceData = await priceService.getUSDTPrice();
          break;
        case 'USDC':
          priceData = await priceService.getUSDCPrice();
          break;
        case 'BUSD':
          priceData = await priceService.getBUSDPrice();
          break;
        case 'TON':
          priceData = await priceService.getTONPrice();
          break;
        case 'NOT':
          priceData = await priceService.getNOTPrice();
          break;
        default:
          throw new Error(`Unsupported token: ${tokenSymbol}`);
      }
      
      // Save data to database (only for CES and if database is available)
      if (isDatabaseConnected() && !priceData.cached && tokenSymbol === 'CES') {
        try {
          await new PriceHistory(priceData).save();
          console.log(`üíæ Price data saved: $${priceData.price.toFixed(2)} | ATH: $${priceData.ath ? priceData.ath.toFixed(2) : 'N/A'}`);
        } catch (dbError) {
          console.error('Database error during price saving:', dbError);
        }
      }
      
      // Determine emoji for price change
      const changeEmoji = priceData.change24h >= 0 ? 'üî∫' : 'üîª';
      const changeSign = priceData.change24h >= 0 ? '+' : '';
      
      // Token-specific display configuration
      const tokenConfig = this.getTokenDisplayConfig(tokenSymbol);
      
      // Check if current price is ATH (mainly for CES)
      let athDisplay = '';
      if (priceData.ath) {
        const isNewATH = priceData.price >= priceData.ath;
        athDisplay = ` ‚Ä¢ üÖêüÖ£üÖó ${isNewATH ? 'üèÜ' : ''} $ ${priceData.ath.toFixed(2)}`;
      }
      
      // Source indicator (only for database)
      const sourceEmoji = priceData.source === 'database' ? 'üóÑÔ∏è' : '';
      
      // Format volume if available
      let volumeDisplay = '';
      if (priceData.volume24h) {
        volumeDisplay = ` ‚Ä¢ üÖ• $ ${priceService.formatNumber(priceData.volume24h)}`;
      }
      
      // Message format - all tokens now show P2P promotion
      let message;
      if (tokenSymbol === 'CES') {
        // Special format for CES with P2P promotion
        message = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${tokenConfig.emoji} –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ ${tokenSymbol}: $ ${priceData.price.toFixed(tokenConfig.priceDecimals)} | ‚ÇΩ ${priceData.priceRub.toFixed(2)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${priceData.change24h.toFixed(1)}%${volumeDisplay}${athDisplay}

–¢–æ—Ä–≥—É–π CES —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ  
<a href="https://t.me/rogassistant_bot">P2P –ë–∏—Ä–∂–∞</a>: –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ ‚ÇΩ`;
      } else {
        // Standard format for ALL other tokens with P2P promotion using token name
        message = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${tokenConfig.emoji} –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ ${tokenSymbol}: $ ${priceData.price.toFixed(tokenConfig.priceDecimals)} | ‚ÇΩ ${priceData.priceRub.toFixed(2)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${priceData.change24h.toFixed(1)}%${volumeDisplay}${athDisplay}

–¢–æ—Ä–≥—É–π ${tokenSymbol} —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ  
<a href="https://t.me/rogassistant_bot">P2P –ë–∏—Ä–∂–∞</a>: –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ ‚ÇΩ`;
      }
      
      // Edit the original message
      await ctx.telegram.editMessageText(
        sentMessage.chat.id,
        sentMessage.message_id,
        null,
        message,
        { parse_mode: 'HTML' }
      );
      
    } catch (error) {
      console.error(`Error processing ${tokenSymbol} price data:`, error);
      // Update the message with error
      try {
        await ctx.telegram.editMessageText(
          sentMessage.chat.id,
          sentMessage.message_id,
          null,
          `‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ${tokenSymbol} –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
        );
      } catch (editError) {
        console.error('Error editing message:', editError);
        // If editing fails, send a new message
        try {
          await ctx.reply(`‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ${tokenSymbol} –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
        } catch (replyError) {
          console.error('Failed to send error message:', replyError);
        }
      }
    }
  }

  // Handle text messages from regular keyboard buttons
  async handleTextMessage(ctx) {
    try {
      console.log('üìù handleTextMessage called');
      
      // Skip processing if this is a callback query (button press)
      if (ctx.callbackQuery) {
        console.log('üìù Skipping text processing - this is a callback query');
        return;
      }
      
      const text = ctx.message.text;
      const chatId = ctx.chat.id.toString();
      
      console.log(`üìù Processing text message from ${chatId}: "${text}"`);
      
      // Check user state and delegate to appropriate handler
      const userState = sessionManager.getUserState(chatId);
      
      // Check if P2P data handler can process this text input
      if (this.dataHandler) {
        const handled = await this.dataHandler.processTextInput(ctx, text);
        if (handled) {
          return; // Text was processed by P2P data handler
        }
      }
      
      // üö® Check if DisputeHandler can process this text input
      try {
        const DisputeHandler = require('./DisputeHandler');
        const disputeHandler = new DisputeHandler();
        const disputeHandled = await disputeHandler.processTextInput(ctx, text);
        if (disputeHandled) {
          return; // Text was processed by dispute handler
        }
      } catch (disputeError) {
        console.error('Dispute handler error:', disputeError);
        // Continue with normal processing if dispute handler fails
      }
      
      // ‚öñÔ∏è Check if AdminDisputeHandler can process this text input
      try {
        const AdminDisputeHandler = require('./AdminDisputeHandler');
        const adminDisputeHandler = new AdminDisputeHandler();
        const adminHandled = await adminDisputeHandler.processTextInput(ctx, text);
        if (adminHandled) {
          return; // Text was processed by admin dispute handler
        }
      } catch (adminDisputeError) {
        console.error('Admin dispute handler error:', adminDisputeError);
        // Continue with normal processing if admin dispute handler fails
      }
      
      switch (userState) {
        case 'transfer':
          if (!this.transferHandler) {
            return await ctx.reply('‚ùå –û—à–∏–±–∫–∞: Transfer handler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          }
          const transferType = sessionManager.getSessionData(chatId, 'transferType') || 'CES';
          sessionManager.clearUserSession(chatId);
          return await this.transferHandler.processTransferCommand(ctx, text, transferType);
          
        case 'p2p_order':
          if (!this.p2pHandler) {
            return await ctx.reply('‚ùå –û—à–∏–±–∫–∞: P2P handler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          }
          const orderType = sessionManager.getSessionData(chatId, 'p2pOrderType') || 'buy';
          console.log(`üîÑ Processing P2P order: type=${orderType}, text="${text}"`);
          // NOTE: Don't clear session here - let processP2POrder handle it after successful processing
          return await this.p2pHandler.processP2POrder(ctx, text, orderType);
          
        case 'user_message':
          if (!this.p2pHandler) {
            return await ctx.reply('‚ùå –û—à–∏–±–∫–∞: P2P handler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          }
          console.log(`üîÑ Processing user message: text="${text}"`);
          sessionManager.clearUserSession(chatId);
          return await this.p2pHandler.processUserMessage(ctx, text);
      }
      
      // Handle main menu buttons
      if (text.includes('–õ–ö') || text.includes('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')) {
        console.log(`üè† Handling Personal Cabinet request from ${chatId}`);
        if (!this.walletHandler) {
          // Fallback - create WalletHandler instance
          const WalletHandler = require('./WalletHandler');
          const walletHandler = new WalletHandler();
          return await walletHandler.handlePersonalCabinetText(ctx);
        }
        return await this.walletHandler.handlePersonalCabinetText(ctx);
      }
      
      if (text.includes('P2P –ë–∏—Ä–∂–∞') || text.includes('üîÑ P2P') || text.includes('P2P')) {
        console.log(`üîÑ Handling P2P Menu request from ${chatId}`);
        if (!this.p2pHandler) {
          return await ctx.reply('‚ùå –û—à–∏–±–∫–∞: P2P handler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        return await this.p2pHandler.handleP2PMenu(ctx);
      }
      
      if (text.includes('Matrix CES') || text.includes('üí† Matrix') || text.includes('Matrix')) {
        console.log(`üí† Handling Matrix request from ${chatId}`);
        return await ctx.reply('‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\nüîî –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî –∑–∞–ø—É—Å–∫ —É–∂–µ —Å–∫–æ—Ä–æ!');
      }
      
      // Handle settings button
      if (text.includes('‚öôÔ∏è') || text.includes('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')) {
        console.log(`‚öôÔ∏è Handling Settings request from ${chatId}`);
        return await this.handleSettingsMenu(ctx);
      }
      
      // Check if message looks like a transfer command (address amount)
      const transferPattern = /^0x[a-fA-F0-9]{40}\s+\d+\.?\d*$/;
      if (transferPattern.test(text.trim())) {
        if (!this.transferHandler) {
          return await ctx.reply('‚ùå –û—à–∏–±–∫–∞: Transfer handler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        return await this.transferHandler.processTransferCommand(ctx, text, 'CES');
      }
      
      // Check if message looks like a P2P order (amount price)
      const p2pOrderPattern = /^\d+[,.]?\d*\s+\d+[,.]?\d*$/;
      if (p2pOrderPattern.test(text.trim())) {
        console.log(`ü§î Message looks like P2P order but no session found: "${text}"`);
        return await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (–ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞) —á–µ—Ä–µ–∑ –º–µ–Ω—é P2P.\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "P2P" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ.');
      }
      
      // Default response for unknown text
      console.log(`‚ùì Unknown command from ${chatId}: "${text}"`);
      await ctx.reply('üòï –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start');
      
    } catch (error) {
      console.error('Text message handler error:', error);
      try {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
  }

  // Handle /fees command (admin only)
  async handleFees(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üí∞ handleFees called by user ${chatId}`);
      
      // Check if user is admin
      const ADMIN_CHAT_ID = '942851377';
      if (chatId !== ADMIN_CHAT_ID) {
        console.log(`‚ùå Unauthorized fees command attempt by ${chatId}`);
        return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      }
      
      // Send immediate acknowledgment
      const sentMessage = await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–∏—Å—Å–∏—è–º...');
      console.log('üí∞ Fees command acknowledgment sent');
      
      // Process fee data in background and update the message
      this.processFeeData(ctx, sentMessage);
      
    } catch (error) {
      console.error('Error handling fees command:', error);
      try {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∏—Å—Å–∏—è–º.');
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
  }

  // Handle /stat command (admin only)
  async handleStat(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üìä handleStat called by user ${chatId}`);
      
      // Check if user is admin
      const ADMIN_CHAT_ID = '942851377';
      if (chatId !== ADMIN_CHAT_ID) {
        console.log(`‚ùå Unauthorized stat command attempt by ${chatId}`);
        return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      }
      
      // Send immediate acknowledgment
      const sentMessage = await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π...');
      console.log('üìä Stat command acknowledgment sent');
      
      // Process stat data in background and send Excel file
      this.processStatData(ctx, sentMessage);
      
    } catch (error) {
      console.error('Error handling stat command:', error);
      try {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π.');
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
  }

  // Process stat data in background and send Excel file
  async processStatData(ctx, sentMessage) {
    try {
      console.log('üìä Generating visitor statistics Excel report...');
      
      // Generate summary first
      const summary = await visitorStatsService.getVisitorStatsSummary();
      
      // Update message with progress
      await ctx.telegram.editMessageText(
        sentMessage.chat.id,
        sentMessage.message_id,
        null,
        `üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª...

üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${summary.totalMonthlyVisitors}
üìÖ –ü–µ—Ä–∏–æ–¥: ${summary.monthYear}`
      );
      
      // Generate Excel file
      const excelFilePath = await visitorStatsService.generateExcelReport();
      
      // Create caption for the Excel file
      const caption = `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–ï–¢–ò–¢–ï–õ–ï–ô
` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ

` +
                     `üìÖ –ü–µ—Ä–∏–æ–¥: ${summary.monthYear}
` +
                     `üë• –í—Å–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${summary.totalMonthlyVisitors}
` +
                     `üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ –Ω–µ–¥–µ–ª–µ: ${summary.recentlyActive}
` +
                     `üåÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${summary.todayActive}
` +
                     `‚≠ê –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${summary.newThisWeek}

` +
                     `üìù –°—Ç–æ–ª–±—Ü—ã:
` +
                     `1. ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
` +
                     `2. Username
` +
                     `3. –ò–º—è
` +
                     `4. –î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
` +
                     `5. –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

` +
                     `üï∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;
      
      // Send Excel file
      await ctx.replyWithDocument(
        { source: excelFilePath },
        { caption }
      );
      
      // Delete the original processing message
      try {
        await ctx.telegram.deleteMessage(sentMessage.chat.id, sentMessage.message_id);
      } catch (deleteError) {
        console.log('Note: Could not delete processing message:', deleteError.message);
      }
      
      // Clean up the temporary file
      try {
        await fs.unlink(excelFilePath);
        console.log('üóëÔ∏è Temporary Excel file cleaned up');
      } catch (cleanupError) {
        console.log('Note: Could not clean up temporary file:', cleanupError.message);
      }
      
      // Clean up old files
      await visitorStatsService.cleanupOldFiles();
      
      console.log('‚úÖ Visitor statistics Excel report sent successfully');
      
    } catch (error) {
      console.error('Error processing stat data:', error);
      
      // Update the message with error
      try {
        await ctx.telegram.editMessageText(
          sentMessage.chat.id,
          sentMessage.message_id,
          null,
          `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π.

‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
        );
      } catch (editError) {
        console.error('Error editing message:', editError);
        try {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } catch (replyError) {
          console.error('Failed to send error message:', replyError);
        }
      }
    }
  }

  // Process fee data in background
  async processFeeData(ctx, sentMessage) {
    try {
      console.log('üí∞ Generating comprehensive fee report...');
      
      const report = await commissionTrackingService.generateFeeReport();
      const formattedMessage = commissionTrackingService.formatFeeReport(report);
      
      // Edit the original message with the fee report
      await ctx.telegram.editMessageText(
        sentMessage.chat.id,
        sentMessage.message_id,
        null,
        formattedMessage
      );
      
      console.log('‚úÖ Fee report sent successfully');
      
    } catch (error) {
      console.error('Error processing fee data:', error);
      
      // Update the message with error
      try {
        await ctx.telegram.editMessageText(
          sentMessage.chat.id,
          sentMessage.message_id,
          null,
          '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∏—Å—Å–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
      } catch (editError) {
        console.error('Error editing message:', editError);
        try {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∏—Å—Å–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } catch (replyError) {
          console.error('Failed to send error message:', replyError);
        }
      }
    }
  }

  // Handle back to main menu
  async handleBackToMenu(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const mainMenu = Markup.keyboard(
        LocalizationHelper.getLocalizedMainMenu(chatId)
      ).resize();
      
      await ctx.reply(LocalizationHelper.getText(chatId, 'main_menu'), mainMenu);
    } catch (error) {
      console.error('Back to menu error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
    }
  }

  // Handle settings menu
  async handleSettingsMenu(ctx) {
    try {
      const languageService = require('../services/languageService');
      
      const message = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', 'select_language')],
        [Markup.button.callback('üîó –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å', 'select_network')],
        [Markup.button.callback('üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É', 'select_currency')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Settings menu error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
    }
  }

  // Handle language selection
  async handleLanguageSelection(ctx) {
    try {
      const languageService = require('../services/languageService');
      const languages = languageService.getSupportedLanguages();
      
      const message = 'üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:';
      
      // Create language buttons (2 per row)
      const languageButtons = [];
      for (let i = 0; i < languages.length; i += 2) {
        const row = [];
        
        // First language in row
        const lang1 = languages[i];
        row.push(Markup.button.callback(
          `${lang1.flag} ${lang1.country}`,
          `select_language_${lang1.code}`
        ));
        
        // Second language in row (if exists)
        if (i + 1 < languages.length) {
          const lang2 = languages[i + 1];
          row.push(Markup.button.callback(
            `${lang2.flag} ${lang2.country}`,
            `select_language_${lang2.code}`
          ));
        }
        
        languageButtons.push(row);
      }
      
      // Add back button
      languageButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings_menu')]);
      
      const keyboard = Markup.inlineKeyboard(languageButtons);
      
      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Language selection error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.');
    }
  }

  // Handle language selection confirmation
  async handleLanguageSelected(ctx, languageCode) {
    try {
      const chatId = ctx.chat.id.toString();
      const languageService = require('../services/languageService');
      
      // Set user language preference
      languageService.setUserLanguage(chatId, languageCode);
      
      // Get language config
      const languageConfig = languageService.getLanguageConfig(languageCode);
      
      const message = `‚úÖ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${languageConfig.flag} ${languageConfig.country}`;
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Language selection confirmation error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞.');
    }
  }

  // Handle network selection
  async handleNetworkSelection(ctx) {
    try {
      const userNetworkService = require('../services/userNetworkService');
      const multiChainService = require('../services/multiChainService');
      
      const chatId = ctx.chat.id.toString();
      const currentNetwork = await userNetworkService.getUserNetwork(chatId);
      
      const message = 'üåê –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç—å:';
      
      // Get network selector buttons
      const networkButtons = multiChainService.getNetworkSelectorButtons(currentNetwork);
      
      // Add back button
      networkButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings_menu')]);
      
      const keyboard = Markup.inlineKeyboard(networkButtons);
      
      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Network selection error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏.');
    }
  }

  // Handle network selection confirmation
  async handleNetworkSelected(ctx, networkId) {
    try {
      const chatId = ctx.chat.id.toString();
      const userNetworkService = require('../services/userNetworkService');
      const multiChainService = require('../services/multiChainService');
      
      // Set user network preference
      await userNetworkService.setUserNetwork(chatId, networkId);
      
      // Get network config
      const networkConfig = multiChainService.getNetworkConfig(networkId);
      const networkEmoji = multiChainService.getNetworkEmoji(networkId);
      
      const message = `‚úÖ –°–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${networkEmoji} ${networkConfig.name}`;
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Network selection confirmation error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ç–∏.');
    }
  }

  // Handle currency selection
  async handleCurrencySelection(ctx) {
    try {
      const fiatCurrencyService = require('../services/fiatCurrencyService');
      
      const chatId = ctx.chat.id.toString();
      const currentCurrency = await fiatCurrencyService.getUserCurrency(chatId);
      
      const message = 'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É:';
      
      // Get supported currencies
      const supportedCurrencies = [
        { code: 'RUB', name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', flag: 'üá∑üá∫' },
        { code: 'USD', name: '–î–æ–ª–ª–∞—Ä –°–®–ê', flag: 'üá∫üá∏' },
        { code: 'EUR', name: '–ï–≤—Ä–æ', flag: 'üá™üá∫' },
        { code: 'CNY', name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', flag: 'üá®üá≥' },
        { code: 'INR', name: '–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è', flag: 'üáÆüá≥' },
        { code: 'NGN', name: '–ù–∏–≥–µ—Ä–∏–π—Å–∫–∞—è –Ω–∞–π—Ä–∞', flag: 'üá≥üá¨' },
        { code: 'VND', name: '–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –¥–æ–Ω–≥', flag: 'üáªüá≥' },
        { code: 'KRW', name: '–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞', flag: 'üá∞üá∑' },
        { code: 'JPY', name: '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞', flag: 'üáØüáµ' },
        { code: 'BRL', name: '–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª', flag: 'üáßüá∑' }
      ];
      
      // Create currency buttons (2 per row)
      const currencyButtons = [];
      for (let i = 0; i < supportedCurrencies.length; i += 2) {
        const row = [];
        
        // First currency in row
        const currency1 = supportedCurrencies[i];
        const isSelected1 = currency1.code === currentCurrency;
        const buttonText1 = isSelected1 
          ? `${currency1.flag} ${currency1.name} (${currency1.code}) ‚úÖ` 
          : `${currency1.flag} ${currency1.name} (${currency1.code})`;
        row.push(Markup.button.callback(buttonText1, `select_currency_${currency1.code}`));
        
        // Second currency in row (if exists)
        if (i + 1 < supportedCurrencies.length) {
          const currency2 = supportedCurrencies[i + 1];
          const isSelected2 = currency2.code === currentCurrency;
          const buttonText2 = isSelected2 
            ? `${currency2.flag} ${currency2.name} (${currency2.code}) ‚úÖ` 
            : `${currency2.flag} ${currency2.name} (${currency2.code})`;
          row.push(Markup.button.callback(buttonText2, `select_currency_${currency2.code}`));
        }
        
        currencyButtons.push(row);
      }
      
      // Add back button
      currencyButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings_menu')]);
      
      const keyboard = Markup.inlineKeyboard(currencyButtons);
      
      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Currency selection error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã.');
    }
  }

  // Handle currency selection confirmation
  async handleCurrencySelected(ctx, currencyCode) {
    try {
      const chatId = ctx.chat.id.toString();
      const fiatCurrencyService = require('../services/fiatCurrencyService');
      
      // Set user currency preference
      await fiatCurrencyService.setUserCurrency(chatId, currencyCode);
      
      // Get currency info
      const supportedCurrencies = [
        { code: 'RUB', name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', flag: 'üá∑üá∫' },
        { code: 'USD', name: '–î–æ–ª–ª–∞—Ä –°–®–ê', flag: 'üá∫üá∏' },
        { code: 'EUR', name: '–ï–≤—Ä–æ', flag: 'üá™üá∫' },
        { code: 'CNY', name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', flag: 'üá®üá≥' },
        { code: 'INR', name: '–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è', flag: 'üáÆüá≥' },
        { code: 'NGN', name: '–ù–∏–≥–µ—Ä–∏–π—Å–∫–∞—è –Ω–∞–π—Ä–∞', flag: 'üá≥üá¨' },
        { code: 'VND', name: '–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –¥–æ–Ω–≥', flag: 'üáªüá≥' },
        { code: 'KRW', name: '–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞', flag: 'üá∞üá∑' },
        { code: 'JPY', name: '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞', flag: 'üáØüáµ' },
        { code: 'BRL', name: '–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª', flag: 'üáßüá∑' }
      ];
      
      const selectedCurrency = supportedCurrencies.find(c => c.code === currencyCode);
      
      const message = `‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${selectedCurrency.flag} ${selectedCurrency.name} (${selectedCurrency.code})`;
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'settings_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Currency selection confirmation error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã.');
    }
  }

  // Get token display configuration
  getTokenDisplayConfig(tokenSymbol) {
    const configs = {
      CES: {
        emoji: 'üí∞',
        priceDecimals: 2,
        description: '–¢–æ—Ä–≥—É–π CES —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞ P2P –±–∏—Ä–∂–µ!'
      },
      POL: {
        emoji: 'üü£',
        priceDecimals: 4,
        description: 'Polygon —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ ‚Ä¢ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
      },
      TRX: {
        emoji: 'üî¥',
        priceDecimals: 4,
        description: 'TRON –±–ª–æ–∫—á–µ–π–Ω ‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Ä¢ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å'
      },
      BNB: {
        emoji: 'üü°',
        priceDecimals: 2,
        description: 'Binance Smart Chain ‚Ä¢ DeFi —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ ‚Ä¢ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏'
      },
      SOL: {
        emoji: 'üü¢',
        priceDecimals: 2,
        description: 'Solana –±–ª–æ–∫—á–µ–π–Ω ‚Ä¢ –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Ä¢ NFT –∏ DeFi'
      },
      ETH: {
        emoji: 'üîµ',
        priceDecimals: 2,
        description: 'Ethereum ‚Ä¢ –ü–∏–æ–Ω–µ—Ä —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ‚Ä¢ DeFi –∏ NFT —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞'
      },
      ARB: {
        emoji: 'üîµ',
        priceDecimals: 4,
        description: 'Arbitrum One ‚Ä¢ Layer 2 Ethereum ‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–æ—Ç–µ—Ä—å'
      },
      AVAX: {
        emoji: 'üî∂',
        priceDecimals: 2,
        description: 'Avalanche ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞'
      },
      USDT: {
        emoji: 'üíµ',
        priceDecimals: 4,
        description: 'Tether USD ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞ ‚Ä¢ 1:1 –∫ USD'
      },
      USDC: {
        emoji: 'üíµ',
        priceDecimals: 4,
        description: 'USD Coin ‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞'
      },
      BUSD: {
        emoji: 'üü°',
        priceDecimals: 4,
        description: 'Binance USD ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞ Binance'
      },
      TON: {
        emoji: 'üíé',
        priceDecimals: 2,
        description: 'TON Network ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –±–ª–æ–∫—á–µ–π–Ω'
      },
      NOT: {
        emoji: 'üíé',
        priceDecimals: 6,
        description: 'Notcoin ‚Ä¢ –ú–µ–º-–∫–æ–∏–Ω –Ω–∞ TON ‚Ä¢ –ö–æ–º–º—é–Ω–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç'
      }
    };
    
    return configs[tokenSymbol.toUpperCase()] || {
      emoji: 'üí∞',
      priceDecimals: 4,
      description: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'
    };
  }
}

module.exports = BaseCommandHandler;