/**
 * P2P Data Handler
 * Handles P2P profile data management including editing, payment methods, and user information
 */

const { Markup } = require('telegraf');
const { User } = require('../database/models');
const sessionManager = require('./SessionManager');

class P2PDataHandler {
  // Handle edit data menu
  async handleP2PEditData(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      const message = '‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                     '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üë§ –§–ò–û', 'p2p_edit_fullname')],
        [Markup.button.callback('üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã', 'p2p_edit_payment_methods')],
        [Markup.button.callback('üìû –ö–æ–Ω—Ç–∞–∫—Ç', 'p2p_edit_contact')],
        [Markup.button.callback('‚öôÔ∏è –£—Å–ª–æ–≤–∏—è –º–µ–π–∫–µ—Ä–∞', 'p2p_edit_conditions')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_my_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('P2P Edit Data error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
  }

  // Handle full name editing
  async handleP2PEditFullName(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      const message = 'üë§ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–û\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                     '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ –±–∞–Ω–∫–µ\n\n' +
                     'üí° –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n' +
                     '–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á';
      
      // Set session state for text input
      sessionManager.setSessionData(chatId, 'editingField', 'fullName');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Edit full name error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û.');
    }
  }

  // Handle payment methods editing
  async handleP2PEditPaymentMethods(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const profile = user.p2pProfile || {};
      const selectedBanks = profile.paymentMethods || [];
      
      const bankNames = {
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'vtb': '–í–¢–ë',
        'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
        'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫ (–†–°–•–ë)',
        'mkb': '–ú–æ—Å–∫. –∫—Ä–µ–¥. –±–∞–Ω–∫ (–ú–ö–ë)',
        'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
        'tbank': '–¢-–±–∞–Ω–∫',
        'domrf': '–î–û–ú.–†–§',
        'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
        'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
        'rosbank': '–†–æ—Å–±–∞–Ω–∫'
      };
      
      let message = 'üí≥ –°–ü–û–°–û–ë–´ –û–ü–õ–ê–¢–´\n' +
                   '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                   '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫–∏, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É:\n\n';
      
      const buttons = [];
      
      // Create buttons for each bank
      Object.keys(bankNames).forEach(bankCode => {
        const isSelected = selectedBanks.some(method => method.bank === bankCode && method.isActive);
        const emoji = isSelected ? '‚úÖ' : '‚ùå';
        const bankName = bankNames[bankCode];
        
        buttons.push([Markup.button.callback(`${emoji} ${bankName}`, `p2p_toggle_bank_${bankCode}`)]);
      });
      
      // Add save button if at least one bank is selected
      const hasSelectedBanks = selectedBanks.some(method => method.isActive);
      if (hasSelectedBanks) {
        buttons.push([Markup.button.callback('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'p2p_save_payment_methods')]);
      }
      
      buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_data')]);
      
      const keyboard = Markup.inlineKeyboard(buttons);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Edit payment methods error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.');
    }
  }

  // Handle bank toggle
  async handleP2PToggleBank(ctx, bankCode) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Initialize profile if not exists
      if (!user.p2pProfile) {
        user.p2pProfile = {};
      }
      
      if (!user.p2pProfile.paymentMethods) {
        user.p2pProfile.paymentMethods = [];
      }
      
      // Find existing method or create new
      let existingMethod = user.p2pProfile.paymentMethods.find(method => method.bank === bankCode);
      
      if (existingMethod) {
        // Toggle existing method
        existingMethod.isActive = !existingMethod.isActive;
      } else {
        // Add new method
        user.p2pProfile.paymentMethods.push({
          bank: bankCode,
          cardNumber: '',
          isActive: true
        });
      }
      
      await user.save();
      
      // Refresh the payment methods menu
      await this.handleP2PEditPaymentMethods(ctx);
      
    } catch (error) {
      console.error('Toggle bank error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–Ω–∫–∞.');
    }
  }

  // Handle saving payment methods and requesting card details
  async handleP2PSavePaymentMethods(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user || !user.p2pProfile || !user.p2pProfile.paymentMethods) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      const activeMethods = user.p2pProfile.paymentMethods.filter(method => method.isActive);
      
      if (activeMethods.length === 0) {
        return await ctx.reply('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–∞–Ω–∫.');
      }
      
      const bankNames = {
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'vtb': '–í–¢–ë',
        'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
        'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫ (–†–°–•–ë)',
        'mkb': '–ú–æ—Å–∫. –∫—Ä–µ–¥. –±–∞–Ω–∫ (–ú–ö–ë)',
        'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
        'tbank': '–¢-–±–∞–Ω–∫',
        'domrf': '–î–û–ú.–†–§',
        'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
        'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
        'rosbank': '–†–æ—Å–±–∞–Ω–∫'
      };
      
      let message = 'üí≥ –£–ö–ê–ó–ê–ù–ò–ï –†–ï–ö–í–ò–ó–ò–¢–û–í\n' +
                   '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                   '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.\n\n';
      
      activeMethods.forEach(method => {
        const bankName = bankNames[method.bank];
        message += `üí≥ ${bankName} ‚Äî —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Å—á—ë—Ç–∞.\n`;
      });
      
      message += '\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n';
      message += '–ë–∞–Ω–∫: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n';
      message += '–ü—Ä–∏–º–µ—Ä:\n';
      message += '–°–±–µ—Ä–±–∞–Ω–∫: 5469 1234 5678 9012\n';
      message += '–í–¢–ë: 2200 5678 9012 3456';
      
      // Set session for card input
      sessionManager.setSessionData(chatId, 'editingField', 'cardNumbers');
      sessionManager.setSessionData(chatId, 'activeBanks', activeMethods.map(m => m.bank));
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_payment_methods')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Save payment methods error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.');
    }
  }

  // Handle contact editing
  async handleP2PEditContact(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      const message = 'üìû –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                     '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏\n\n' +
                     '–ü—Ä–∏–º–µ—Ä—ã:\n' +
                     '‚Ä¢ +79001234567\n' +
                     '‚Ä¢ @username\n' +
                     '‚Ä¢ Telegram: @username';
      
      // Set session state for text input
      sessionManager.setSessionData(chatId, 'editingField', 'contactInfo');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Edit contact error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.');
    }
  }

  // Handle conditions editing
  async handleP2PEditConditions(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      const message = '‚öôÔ∏è –£–°–õ–û–í–ò–Ø –ú–ï–ô–ö–ï–†–ê\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                     '–£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–≤–∏–¥–∏—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç\n\n' +
                     '–ü—Ä–∏–º–µ—Ä—ã:\n' +
                     '‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–ª—å–∫–æ —Å –ª–∏—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞\n' +
                     '‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç —é—Ä–ª–∏—Ü\n' +
                     '‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç';
      
      // Set session state for text input
      sessionManager.setSessionData(chatId, 'editingField', 'makerConditions');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Edit conditions error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–∏–π.');
    }
  }

  // Handle toggle use in orders
  async handleP2PToggleUseInOrders(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Initialize profile if not exists
      if (!user.p2pProfile) {
        user.p2pProfile = {};
      }
      
      // Toggle use in orders
      user.p2pProfile.useInOrders = !user.p2pProfile.useInOrders;
      await user.save();
      
      const status = user.p2pProfile.useInOrders ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ';
      await ctx.reply(`‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ä–¥–µ—Ä–∞—Ö ${status}.`);
      
      // Refresh my data view
      setTimeout(async () => {
        const p2pHandler = require('./P2PHandler');
        const handler = new p2pHandler();
        await handler.handleP2PMyData(ctx);
      }, 1000);
      
    } catch (error) {
      console.error('Toggle use in orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
  }

  // Handle buyer view
  async handleP2PBuyerView(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user || !user.p2pProfile) {
        return await ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const profile = user.p2pProfile;
      
      const message = 'üëÄ –ö–ê–ö –í–ò–î–Ø–¢ –ü–û–ö–£–ü–ê–¢–ï–õ–ò\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                     '–¢–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ä–¥–µ—Ä–∞—Ö:\n\n' +
                     'üìã –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:\n' +
                     `üë§ ${profile.fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                     `üìû ${profile.contactInfo || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
                     'üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n';
      
      if (profile.paymentMethods && profile.paymentMethods.length > 0) {
        const bankNames = {
          'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
          'vtb': '–í–¢–ë',
          'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
          'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
          'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
          'mkb': '–ú–ö–ë',
          'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
          'tbank': '–¢-–±–∞–Ω–∫',
          'domrf': '–î–û–ú.–†–§',
          'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
          'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
          'rosbank': '–†–æ—Å–±–∞–Ω–∫'
        };
        
        const activeMethods = profile.paymentMethods.filter(pm => pm.isActive);
        activeMethods.forEach(pm => {
          const bankName = bankNames[pm.bank];
          message += `üí≥ ${bankName}: ${pm.cardNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        });
      } else {
        message += '–ù–µ —É–∫–∞–∑–∞–Ω–æ\n';
      }
      
      if (profile.makerConditions) {
        message += `\n‚öôÔ∏è –£—Å–ª–æ–≤–∏—è: ${profile.makerConditions}`;
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –¥–∞–Ω–Ω—ã–º', 'p2p_my_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Buyer view error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.');
    }
  }

  // Process text input based on current editing field
  async processTextInput(ctx, text) {
    try {
      const chatId = ctx.chat.id.toString();
      const editingField = sessionManager.getSessionData(chatId, 'editingField');
      
      if (!editingField) {
        return false; // Not handling text input
      }
      
      const user = await User.findOne({ chatId });
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return true;
      }
      
      // Initialize profile if not exists
      if (!user.p2pProfile) {
        user.p2pProfile = {};
      }
      
      switch (editingField) {
        case 'fullName':
          user.p2pProfile.fullName = text.trim();
          await user.save();
          sessionManager.setSessionData(chatId, 'editingField', null);
          await ctx.reply('‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
          break;
          
        case 'contactInfo':
          user.p2pProfile.contactInfo = text.trim();
          await user.save();
          sessionManager.setSessionData(chatId, 'editingField', null);
          await ctx.reply('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
          break;
          
        case 'makerConditions':
          user.p2pProfile.makerConditions = text.trim();
          await user.save();
          sessionManager.setSessionData(chatId, 'editingField', null);
          await ctx.reply('‚úÖ –£—Å–ª–æ–≤–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
          break;
          
        case 'cardNumbers':
          await this.processCardNumbers(ctx, text);
          break;
          
        default:
          return false;
      }
      
      // Check if profile is complete
      await this.checkProfileCompletion(user);
      
      return true;
      
    } catch (error) {
      console.error('Process text input error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.');
      return true;
    }
  }

  // Process card numbers input
  async processCardNumbers(ctx, text) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      const activeBanks = sessionManager.getSessionData(chatId, 'activeBanks');
      
      if (!user || !activeBanks) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      const bankNames = {
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'vtb': '–í–¢–ë',
        'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
        'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
        'mkb': '–ú–ö–ë',
        'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
        'tbank': '–¢-–±–∞–Ω–∫',
        'domrf': '–î–û–ú.–†–§',
        'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
        'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
        'rosbank': '–†–æ—Å–±–∞–Ω–∫'
      };
      
      // Parse card numbers from text
      const lines = text.split('\n');
      let saved = 0;
      
      for (const line of lines) {
        const parts = line.split(':');
        if (parts.length === 2) {
          const bankName = parts[0].trim();
          const cardNumber = parts[1].trim();
          
          // Find bank code by name
          const bankCode = Object.keys(bankNames).find(code => 
            bankNames[code].toLowerCase() === bankName.toLowerCase()
          );
          
          if (bankCode && activeBanks.includes(bankCode)) {
            // Update card number
            const method = user.p2pProfile.paymentMethods.find(m => m.bank === bankCode);
            if (method) {
              method.cardNumber = cardNumber;
              saved++;
            }
          }
        }
      }
      
      if (saved > 0) {
        await user.save();
        sessionManager.setSessionData(chatId, 'editingField', null);
        sessionManager.setSessionData(chatId, 'activeBanks', null);
        await ctx.reply(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: ${saved}`);
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.');
      }
      
    } catch (error) {
      console.error('Process card numbers error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.');
    }
  }

  // Check if profile is complete
  async checkProfileCompletion(user) {
    try {
      const profile = user.p2pProfile || {};
      
      const isComplete = profile.fullName && 
                        profile.contactInfo && 
                        profile.paymentMethods && 
                        profile.paymentMethods.some(pm => pm.isActive && pm.cardNumber);
      
      if (isComplete !== profile.isProfileComplete) {
        user.p2pProfile.isProfileComplete = isComplete;
        await user.save();
      }
      
    } catch (error) {
      console.error('Check profile completion error:', error);
    }
  }
}

module.exports = P2PDataHandler;