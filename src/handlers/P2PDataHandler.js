/**
 * P2P Data Handler
 * Handles P2P profile data management including editing, payment methods, and user information
 */

const { Markup } = require('telegraf');
const { User } = require('../database/models');
const sessionManager = require('./SessionManager');
const antiFraudService = require('../services/antiFraudService');

class P2PDataHandler {
  // Handle edit data menu
  async handleP2PEditData(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      const message = '‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üë§ –§–ò–û', 'p2p_edit_fullname')],
        [Markup.button.callback('üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã', 'p2p_edit_payment_methods')],
        [Markup.button.callback('üìû –ö–æ–Ω—Ç–∞–∫—Ç', 'p2p_edit_contact')],
        [Markup.button.callback('‚öôÔ∏è –£—Å–ª–æ–≤–∏—è –º–µ–π–∫–µ—Ä–∞', 'p2p_edit_conditions')],
        [Markup.button.callback('‚è∞ –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏', 'p2p_edit_trade_time')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_my_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('P2P Edit Data error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
  }

  // Handle full name editing
  async handleP2PEditFullName(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      const message = 'üë§ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–û\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n' +
                     '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ –±–∞–Ω–∫–µ\n\n' +
                     'üí° –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á';
      
      // Set session state for text input
      sessionManager.setSessionData(chatId, 'editingField', 'fullName');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Edit full name error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û.');
    }
  }

  // Handle payment methods editing
  async handleP2PEditPaymentMethods(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const profile = user.p2pProfile || {};
      const selectedBanks = profile.paymentMethods || [];
      
      const bankNames = {
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'vtb': '–í–¢–ë',
        'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
        'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫ (–†–°–•–ë)',
        'mkb': '–ú–æ—Å–∫. –∫—Ä–µ–¥. –±–∞–Ω–∫ (–ú–ö–ë)',
        'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
        'tbank': '–¢-–±–∞–Ω–∫',
        'domrf': '–î–û–ú.–†–§',
        'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
        'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
        'rosbank': '–†–æ—Å–±–∞–Ω–∫'
      };
      
      let message = 'üí≥ –°–ü–û–°–û–ë–´ –û–ü–õ–ê–¢–´\n' +
                   '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n';
      
      const buttons = [];
      
      // Create buttons for each bank
      Object.keys(bankNames).forEach(bankCode => {
        const isSelected = selectedBanks.some(method => method.bank === bankCode && method.isActive);
        const emoji = isSelected ? '‚úÖ' : '‚ùå';
        const bankName = bankNames[bankCode];
        
        buttons.push([Markup.button.callback(`${emoji} ${bankName}`, `p2p_toggle_bank_${bankCode}`)]);
      });
      
      // Add save button if at least one bank is selected
      const hasSelectedBanks = selectedBanks.some(method => method.isActive);
      if (hasSelectedBanks) {
        buttons.push([Markup.button.callback('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'p2p_save_payment_methods')]);
      }
      
      buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_data')]);
      
      const keyboard = Markup.inlineKeyboard(buttons);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Edit payment methods error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.');
    }
  }

  // Handle bank toggle
  async handleP2PToggleBank(ctx, bankCode) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Initialize profile if not exists
      if (!user.p2pProfile) {
        user.p2pProfile = {};
      }
      
      if (!user.p2pProfile.paymentMethods) {
        user.p2pProfile.paymentMethods = [];
      }
      
      // Find existing method or create new
      let existingMethod = user.p2pProfile.paymentMethods.find(method => method.bank === bankCode);
      
      if (existingMethod) {
        // Toggle existing method
        existingMethod.isActive = !existingMethod.isActive;
      } else {
        // Add new method
        user.p2pProfile.paymentMethods.push({
          bank: bankCode,
          cardNumber: '',
          isActive: true
        });
      }
      
      await user.save();
      
      // Refresh the payment methods menu
      await this.handleP2PEditPaymentMethods(ctx);
      
    } catch (error) {
      console.error('Toggle bank error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–Ω–∫–∞.');
    }
  }

  // Handle saving payment methods and requesting card details
  async handleP2PSavePaymentMethods(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user || !user.p2pProfile || !user.p2pProfile.paymentMethods) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      const activeMethods = user.p2pProfile.paymentMethods.filter(method => method.isActive);
      
      if (activeMethods.length === 0) {
        return await ctx.reply('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–∞–Ω–∫.');
      }
      
      const bankNames = {
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'vtb': '–í–¢–ë',
        'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
        'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫ (–†–°–•–ë)',
        'mkb': '–ú–æ—Å–∫. –∫—Ä–µ–¥. –±–∞–Ω–∫ (–ú–ö–ë)',
        'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
        'tbank': '–¢-–±–∞–Ω–∫',
        'domrf': '–î–û–ú.–†–§',
        'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
        'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
        'rosbank': '–†–æ—Å–±–∞–Ω–∫'
      };
      
      let message = 'üí≥ –£–ö–ê–ó–ê–ù–ò–ï –†–ï–ö–í–ò–ó–ò–¢–û–í\n' +
                   '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                   '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.\n\n';
      
      activeMethods.forEach(method => {
        const bankName = bankNames[method.bank];
        message += `üí≥ ${bankName} ‚Äî —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Å—á—ë—Ç–∞.\n`;
      });
      
      message += '\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n';
      message += '–ë–∞–Ω–∫: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n';
      message += '–ü—Ä–∏–º–µ—Ä:\n';
      message += '–°–±–µ—Ä–±–∞–Ω–∫: 5469 1234 5678 9012\n';
      message += '–í–¢–ë: 2200 5678 9012 3456';
      
      // Set session for card input
      sessionManager.setSessionData(chatId, 'editingField', 'cardNumbers');
      sessionManager.setSessionData(chatId, 'activeBanks', activeMethods.map(m => m.bank));
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_payment_methods')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Save payment methods error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.');
    }
  }

  // Handle contact editing
  async handleP2PEditContact(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      const message = 'üìû –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n' +
                     '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n' +
                     'üí° –ü—Ä–∏–º–µ—Ä: +79001234567';
      
      // Set session state for text input
      sessionManager.setSessionData(chatId, 'editingField', 'contactInfo');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Edit contact error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.');
    }
  }

  // Handle conditions editing
  async handleP2PEditConditions(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      const message = '‚öôÔ∏è –£–°–õ–û–í–ò–Ø –ú–ï–ô–ö–ï–†–ê\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n' +
                     '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–≤–∏–¥–∏—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç\n\n' +
                     'üí° –ü—Ä–∏–º–µ—Ä:\n' +
                     '‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–ª—å–∫–æ —Å –ª–∏—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞\n' +
                     '‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç —é—Ä–ª–∏—Ü\n' +
                     '‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç';
      
      // Set session state for text input
      sessionManager.setSessionData(chatId, 'editingField', 'makerConditions');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Edit conditions error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–∏–π.');
    }
  }

  // Handle trade time editing
  async handleP2PEditTradeTime(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Initialize profile if not exists
      if (!user.p2pProfile) {
        user.p2pProfile = {};
      }
      
      const currentTime = user.p2pProfile.tradeTimeLimit || 30;
      
      const message = '‚è∞ –í–†–ï–ú–Ø –°–î–ï–õ–ö–ò\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                     `–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: ${currentTime} –º–∏–Ω.\n\n` +
                     '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Å–¥–µ–ª–∫–∞—Ö:\n\n' +
                     'üü¢ –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–¥–µ–ª–∫–∏: 10-15 –º–∏–Ω.\n' +
                     'üü† –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ: 30 –º–∏–Ω.\n' +
                     'üü° –î–ª–∏–Ω–Ω—ã–µ: 60 –º–∏–Ω.';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(`${currentTime === 10 ? '‚úÖ' : '‚ö´'} 10 –º–∏–Ω.`, 'p2p_set_time_10')],
        [Markup.button.callback(`${currentTime === 15 ? '‚úÖ' : '‚ö´'} 15 –º–∏–Ω.`, 'p2p_set_time_15')],
        [Markup.button.callback(`${currentTime === 30 ? '‚úÖ' : '‚ö´'} 30 –º–∏–Ω. (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ)`, 'p2p_set_time_30')],
        [Markup.button.callback(`${currentTime === 60 ? '‚úÖ' : '‚ö´'} 60 –º–∏–Ω.`, 'p2p_set_time_60')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_edit_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Edit trade time error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–∏.');
    }
  }

  // Handle setting specific trade time
  async handleP2PSetTradeTime(ctx, timeMinutes) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Initialize profile if not exists
      if (!user.p2pProfile) {
        user.p2pProfile = {};
      }
      
      user.p2pProfile.tradeTimeLimit = timeMinutes;
      await user.save();
      
      const timeDescription = {
        10: '–±—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏',
        15: '—Å–∫–æ—Ä—ã–µ —Å–¥–µ–ª–∫–∏',
        30: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏',
        60: '–¥–ª–∏–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏'
      };
      
      await ctx.reply(`‚úÖ –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${timeMinutes} –º–∏–Ω.\nüìù –¢–∏–ø: ${timeDescription[timeMinutes] || '–æ–±—ã—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏'}`);
      
      // Refresh the trade time menu
      setTimeout(() => this.handleP2PEditTradeTime(ctx), 1500);
      
    } catch (error) {
      console.error('Set trade time error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.');
    }
  }

  // Handle toggle use in orders
  async handleP2PToggleUseInOrders(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Initialize profile if not exists
      if (!user.p2pProfile) {
        user.p2pProfile = {};
      }
      
      // Toggle use in orders
      user.p2pProfile.useInOrders = !user.p2pProfile.useInOrders;
      await user.save();
      
      const status = user.p2pProfile.useInOrders ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ';
      await ctx.reply(`‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ä–¥–µ—Ä–∞—Ö ${status}.`);
      
      // Refresh my data view
      setTimeout(async () => {
        const P2PHandler = require('./P2PHandler');
        const handler = new P2PHandler();
        await handler.handleP2PMyData(ctx);
      }, 1000);
      
    } catch (error) {
      console.error('Toggle use in orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
  }

  // Handle buyer view
  async handleP2PBuyerView(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user || !user.p2pProfile) {
        return await ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const profile = user.p2pProfile;
      
      let message = 'üëÄ –ö–ê–ö –í–ò–î–Ø–¢ –ü–û–ö–£–ü–ê–¢–ï–õ–ò\n' +
                   '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                   `–§–ò–û: ${profile.fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                   `–ö–æ–Ω—Ç–∞–∫—Ç: ${profile.contactInfo || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
                   'üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n';
      
      if (profile.paymentMethods && profile.paymentMethods.length > 0) {
        const bankNames = {
          'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
          'vtb': '–í–¢–ë',
          'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
          'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
          'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
          'mkb': '–ú–ö–ë',
          'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
          'tbank': '–¢-–±–∞–Ω–∫',
          'domrf': '–î–û–ú.–†–§',
          'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
          'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
          'rosbank': '–†–æ—Å–±–∞–Ω–∫'
        };
        
        const activeMethods = profile.paymentMethods.filter(pm => pm.isActive);
        activeMethods.forEach(pm => {
          const bankName = bankNames[pm.bank];
          message += `${bankName}: ${pm.cardNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        });
      } else {
        message += '–ù–µ —É–∫–∞–∑–∞–Ω–æ\n';
      }
      
      if (profile.makerConditions) {
        message += `\n‚öôÔ∏è –£—Å–ª–æ–≤–∏—è: \n${profile.makerConditions}`;
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –¥–∞–Ω–Ω—ã–º', 'p2p_my_data')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Buyer view error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.');
    }
  }

  // Process text input based on current editing field
  async processTextInput(ctx, text) {
    try {
      // Skip processing if this is a callback query (button press)
      if (ctx.callbackQuery) {
        console.log('üìù P2PDataHandler: Skipping text processing - this is a callback query');
        return false;
      }
      
      // Skip processing if no actual text message
      if (!ctx.message || !ctx.message.text) {
        return false;
      }
      
      const chatId = ctx.chat.id.toString();
      const editingField = sessionManager.getSessionData(chatId, 'editingField');
      
      if (!editingField) {
        return false; // Not handling text input - let main handler deal with menu buttons
      }
      
      // ONLY handle main menu buttons if we're actually in an editing session
      // Check for main menu buttons - handle them instead of treating as text input
      if (text.includes('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç') || text.includes('üë§')) {
        console.log('üìù P2PDataHandler: Detected main menu button - Personal Cabinet');
        sessionManager.clearUserSession(chatId);
        const BaseCommandHandler = require('./BaseCommandHandler');
        const WalletHandler = require('./WalletHandler');
        const handler = new WalletHandler();
        return await handler.handlePersonalCabinetText(ctx);
      }
      
      if (text.includes('P2P –ë–∏—Ä–∂–∞') || text.includes('üîÑ P2P')) {
        console.log('üìù P2PDataHandler: Detected main menu button - P2P Exchange');
        sessionManager.clearUserSession(chatId);
        const P2PHandler = require('./P2PHandler');
        const handler = new P2PHandler();
        return await handler.handleP2PMenu(ctx);
      }
      
      const user = await User.findOne({ chatId });
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return true;
      }
      
      // Initialize profile if not exists
      if (!user.p2pProfile) {
        user.p2pProfile = {};
      }
      
      switch (editingField) {
        case 'fullName':
          user.p2pProfile.fullName = text.trim();
          await user.save();
          sessionManager.setSessionData(chatId, 'editingField', null);
          await ctx.reply('‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
          // Redirect back to edit data menu
          setTimeout(() => this.handleP2PEditData(ctx), 1000);
          break;
          
        case 'contactInfo':
          user.p2pProfile.contactInfo = text.trim();
          await user.save();
          sessionManager.setSessionData(chatId, 'editingField', null);
          await ctx.reply('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
          // Redirect back to edit data menu
          setTimeout(() => this.handleP2PEditData(ctx), 1000);
          break;
          
        case 'makerConditions':
          user.p2pProfile.makerConditions = text.trim();
          await user.save();
          sessionManager.setSessionData(chatId, 'editingField', null);
          await ctx.reply('‚úÖ –£—Å–ª–æ–≤–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
          // Redirect back to edit data menu
          setTimeout(() => this.handleP2PEditData(ctx), 1000);
          break;
          
        case 'cardNumbers':
          await this.processCardNumbers(ctx, text);
          break;
          
        default:
          return false;
      }
      
      // Check if profile is complete
      await this.checkProfileCompletion(user);
      
      return true;
      
    } catch (error) {
      console.error('Process text input error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.');
      return true;
    }
  }

  // Process card numbers input
  async processCardNumbers(ctx, text) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      const activeBanks = sessionManager.getSessionData(chatId, 'activeBanks');
      
      if (!user || !activeBanks) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      const bankNames = {
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'vtb': '–í–¢–ë',
        'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
        'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
        'mkb': '–ú–ö–ë',
        'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
        'tbank': '–¢-–±–∞–Ω–∫',
        'domrf': '–î–û–ú.–†–§',
        'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
        'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
        'rosbank': '–†–æ—Å–±–∞–Ω–∫'
      };
      
      // Parse card numbers from text
      const lines = text.split('\n');
      let saved = 0;
      
      for (const line of lines) {
        const parts = line.split(':');
        if (parts.length === 2) {
          const bankName = parts[0].trim();
          const cardNumber = parts[1].trim();
          
          // Find bank code by name
          const bankCode = Object.keys(bankNames).find(code => 
            bankNames[code].toLowerCase() === bankName.toLowerCase()
          );
          
          if (bankCode && activeBanks.includes(bankCode)) {
            // Update card number
            const method = user.p2pProfile.paymentMethods.find(m => m.bank === bankCode);
            if (method) {
              method.cardNumber = cardNumber;
              saved++;
            }
          }
        }
      }
      
      if (saved > 0) {
        await user.save();
        sessionManager.setSessionData(chatId, 'editingField', null);
        sessionManager.setSessionData(chatId, 'activeBanks', null);
        await ctx.reply(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: ${saved}`);
        // Redirect back to edit data menu
        setTimeout(() => this.handleP2PEditData(ctx), 1000);
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.');
      }
      
    } catch (error) {
      console.error('Process card numbers error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.');
    }
  }

  // Check if profile is complete
  async checkProfileCompletion(user) {
    try {
      const profile = user.p2pProfile || {};
      
      // Conditions field is optional per user requirement
      const isComplete = profile.fullName && 
                        profile.contactInfo && 
                        profile.paymentMethods && 
                        profile.paymentMethods.some(pm => pm.isActive && pm.cardNumber);
      
      if (isComplete !== profile.isProfileComplete) {
        user.p2pProfile.isProfileComplete = isComplete;
        await user.save();
      }
      
    } catch (error) {
      console.error('Check profile completion error:', error);
    }
  }

  /**
   * üîí –ú–µ—Ç–æ–¥ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
   */
  async validateBankDetailsWithSecurity(user) {
    if (!user.p2pProfile || !user.p2pProfile.paymentMethods || user.p2pProfile.paymentMethods.length === 0) {
      return {
        valid: false,
        issues: ['–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã']
      };
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π antiFraudService
    const bankDetails = {};
    user.p2pProfile.paymentMethods.forEach((method, index) => {
      if (method.type === 'bank_card' && method.isActive) {
        bankDetails[`card_${index}`] = {
          cardNumber: method.cardNumber,
          cardHolder: method.cardHolder,
          bankName: method.bankName
        };
      }
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º antiFraudService –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const validation = antiFraudService.validateBankDetails(bankDetails);
    
    if (!validation.valid) {
      return {
        valid: false,
        issues: validation.issues.map(issue => `${issue.bank}: ${issue.issue}`)
      };
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const securityIssues = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    const activeMethods = user.p2pProfile.paymentMethods.filter(method => method.isActive);
    if (activeMethods.length === 0) {
      securityIssues.push('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    activeMethods.forEach((method, index) => {
      if (method.type === 'bank_card') {
        if (!method.cardNumber || method.cardNumber.length < 16) {
          securityIssues.push(`–ö–∞—Ä—Ç–∞ ${index + 1}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä`);
        }
        if (!method.cardHolder || method.cardHolder.length < 2) {
          securityIssues.push(`–ö–∞—Ä—Ç–∞ ${index + 1}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞`);
        }
        if (!method.bankName || method.bankName.length < 2) {
          securityIssues.push(`–ö–∞—Ä—Ç–∞ ${index + 1}: –ù–µ —É–∫–∞–∑–∞–Ω –±–∞–Ω–∫`);
        }
      }
    });
    
    return {
      valid: securityIssues.length === 0,
      issues: securityIssues
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è P2P –ø—Ä–æ—Ñ–∏–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é (–∑–∞–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥)
   */
  async validateUserForP2POperationsEnhanced(chatId) {
    try {
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return {
          valid: false,
          message: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
          keyboard: [[
            { text: 'üè† –ú–µ–Ω—é', callback_data: 'main_menu' }
          ]]
        };
      }
      
      if (!user.p2pProfile) {
        return {
          valid: false,
          message: '‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å P2P –ø—Ä–æ—Ñ–∏–ª—å.',
          keyboard: [[
            { text: 'üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', callback_data: 'p2p_my_data' },
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'p2p_menu' }
          ]]
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
      const profile = user.p2pProfile;
      const missingFields = [];
      
      if (!profile.fullName || profile.fullName.length < 2) {
        missingFields.push('–§–ò–û');
      }
      
      if (!profile.contactInfo || profile.contactInfo.length < 5) {
        missingFields.push('–ö–æ–Ω—Ç–∞–∫—Ç');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
      const bankValidation = await this.validateBankDetailsWithSecurity(user);
      
      if (!bankValidation.valid) {
        missingFields.push('–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã');
      }
      
      if (missingFields.length > 0) {
        let message = '‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:\n\n';
        message += missingFields.map(field => `‚Ä¢ ${field}`).join('\n');
        
        if (!bankValidation.valid && bankValidation.issues) {
          message += '\n\nüîí –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:\n';
          message += bankValidation.issues.map(issue => `‚Ä¢ ${issue}`).join('\n');
        }
        
        return {
          valid: false,
          message,
          keyboard: [[
            { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'p2p_edit_data' },
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'p2p_menu' }
          ]]
        };
      }
      
      return {
        valid: true,
        user: user
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ P2P –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return {
        valid: false,
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.'
      };
    }
  }

  // Validate if user can create orders or interact with makers
  async validateUserForP2POperations(chatId) {
    try {
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return {
          valid: false,
          message: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        };
      }
      
      const profile = user.p2pProfile || {};
      
      // Check if profile is complete (excluding makerConditions as it's optional)
      const isComplete = profile.fullName && 
                        profile.contactInfo && 
                        profile.paymentMethods && 
                        profile.paymentMethods.some(pm => pm.isActive && pm.cardNumber);
      
      if (!isComplete) {
        return {
          valid: false,
          message: '‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n' +
                  'üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üìë –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ:\n' +
                  '‚Ä¢ –§–ò–û\n' +
                  '‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n' +
                  '‚Ä¢ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏',
          keyboard: [
            [{ text: 'üìë –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'p2p_my_data' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'p2p_menu' }]
          ]
        };
      }
      
      return {
        valid: true,
        user: user
      };
      
    } catch (error) {
      console.error('P2P validation error:', error);
      return {
        valid: false,
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.'
      };
    }
  }
}

module.exports = P2PDataHandler;