/**
 * Message Handlers
 * Handles all Telegram bot message and callback processing
 */

const { Markup } = require('telegraf');
const priceService = require('../services/priceService');
const walletService = require('../services/walletService');
const { User, PriceHistory } = require('../database/models');

class MessageHandler {
  // Handle /start command
  async handleStart(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Register or update user in database
      const user = await User.findOneAndUpdate(
        { chatId },
        {
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          isActive: true
        },
        { upsert: true, new: true }
      );
      
      const welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !';
      
      // Main menu with regular keyboard buttons (only 2 buttons as requested)
      const mainMenu = Markup.keyboard([
        ['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üîÑ P2P']
      ]).resize();
      
      await ctx.reply(welcomeMessage, mainMenu);
      
    } catch (error) {
      console.error('Start command error:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // Handle price command and button
  async handlePrice(ctx) {
    try {
      const priceData = await priceService.getCESPrice();
      
      // Save data to database (only when calling /price)
      if (!priceData.cached) {
        await new PriceHistory(priceData).save();
        console.log(`üíæ Price data saved: $${priceData.price.toFixed(2)} | ATH: $${priceData.ath.toFixed(2)}`);
      }
      
      // Determine emoji for price change
      const changeEmoji = priceData.change24h >= 0 ? 'üî∫' : 'üîª';
      const changeSign = priceData.change24h >= 0 ? '+' : '';
      
      // Check if current price is ATH
      const isNewATH = priceData.price >= priceData.ath;
      const athDisplay = isNewATH ? `üèÜ $ ${priceData.ath.toFixed(2)}` : `$ ${priceData.ath.toFixed(2)}`;
      
      // Source indicator (only for database)
      const sourceEmoji = priceData.source === 'database' ? 'üóÑÔ∏è' : '';
      
      // Message format exactly as in example
      const message = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ CES: $ ${priceData.price.toFixed(2)} | ‚ÇΩ ${priceData.priceRub.toFixed(2)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${priceData.change24h.toFixed(2)}% ‚Ä¢ üÖ• $ ${priceService.formatNumber(priceData.volume24h)} ‚Ä¢ üÖêüÖ£üÖó ${athDisplay}`;
      
      // Send text message for maximum speed
      await ctx.reply(message);
      
    } catch (error) {
      console.error('Error sending price to user:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É CES –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle text messages from regular keyboard buttons
  async handleTextMessage(ctx) {
    try {
      const text = ctx.message.text;
      
      // Check if user is in transfer mode
      if (ctx.session && ctx.session.awaitingTransfer) {
        const transferType = ctx.session.transferType || 'CES';
        ctx.session.awaitingTransfer = false;
        ctx.session.transferType = null;
        return await this.processTransferCommand(ctx, text, transferType);
      }
      
      if (text.includes('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')) {
        return await this.handlePersonalCabinetText(ctx);
      }
      
      if (text.includes('P2P')) {
        return await this.handleP2PMenuText(ctx);
      }
      
      // Check if message looks like a transfer command (address amount)
      const transferPattern = /^0x[a-fA-F0-9]{40}\s+\d+\.?\d*$/;
      if (transferPattern.test(text.trim())) {
        return await this.processTransferCommand(ctx, text, 'CES');
      }
      
      // Default response for unknown text
      await ctx.reply('üòï –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start');
      
    } catch (error) {
      console.error('Text message handler error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // Handle Personal Cabinet from text message
  async handlePersonalCabinetText(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
      }
      
      let message = 'üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n';
      
      if (walletInfo.hasWallet) {
        // Get current price data for display
        const priceData = await priceService.getCESPrice();
        const cesUsdPrice = priceData ? priceData.price.toFixed(2) : '0.00';
        const cesRubPrice = priceData ? priceData.priceRub.toFixed(2) : '0.00';
        
        // For POL, we'll use a placeholder price for now (could be enhanced later)
        const polUsdPrice = '0.45'; // Placeholder POL price
        const polRubPrice = '45.00'; // Placeholder POL price in RUB
        
        message += `–ë–∞–ª–∞–Ω—Å CES: ${walletInfo.cesBalance.toFixed(4)} ‚Ä¢ $ ${cesUsdPrice} ‚Ä¢ ‚ÇΩ ${cesRubPrice}\n`;
        message += `–ë–∞–ª–∞–Ω—Å POL: ${walletInfo.polBalance.toFixed(4)} ‚Ä¢ $ ${polUsdPrice} ‚Ä¢ ‚ÇΩ ${polRubPrice}`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üí≥ –ö–æ—à–µ–ª–µ–∫', 'wallet_details')],
          [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–æ–¥', 'transfer_menu')],
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_balance')]
        ]);
        
        await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
        
      } else {
        message += '‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω\n\n';
        message += '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ CES –∏ POL';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫', 'create_wallet')],
          [Markup.button.callback('üí∞ –¶–µ–Ω–∞ CES', 'get_price')]
        ]);
        
        await ctx.reply(message, keyboard);
      }
      
    } catch (error) {
      console.error('Error showing personal cabinet:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle P2P from text message
  async handleP2PMenuText(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
      }
      
      // Redirect to transfer menu
      const message = 'üí∏ –ü–µ—Ä–µ–≤–æ–¥';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ CES', 'send_ces_tokens')],
        [Markup.button.callback('üíé –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ POL', 'send_pol_tokens')],
        [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤', 'transaction_history')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('P2P menu error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ P2P –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  async handlePersonalCabinet(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo) {
        return await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
      }
      
      let message = 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n';
      
      if (walletInfo.hasWallet) {
        // Get current price data for display
        const priceData = await priceService.getCESPrice();
        const cesUsdPrice = priceData ? priceData.price.toFixed(2) : '0.00';
        const cesRubPrice = priceData ? priceData.priceRub.toFixed(2) : '0.00';
        
        // For POL, we'll use a placeholder price for now
        const polUsdPrice = '0.45';
        const polRubPrice = '45.00';
        
        message += `–ë–∞–ª–∞–Ω—Å CES: ${walletInfo.cesBalance.toFixed(4)} ‚Ä¢ $ ${cesUsdPrice} ‚Ä¢ ‚ÇΩ ${cesRubPrice}\n`;
        message += `–ë–∞–ª–∞–Ω—Å POL: ${walletInfo.polBalance.toFixed(4)} ‚Ä¢ $ ${polUsdPrice} ‚Ä¢ ‚ÇΩ ${polRubPrice}`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üí≥ –ö–æ—à–µ–ª–µ–∫', 'wallet_details')],
          [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–æ–¥', 'transfer_menu')],
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_balance')]
        ]);
        
        await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
        
      } else {
        message += '‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω\n\n';
        message += '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ CES –∏ POL';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫', 'create_wallet')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
        ]);
        
        await ctx.editMessageText(message, keyboard);
      }
      
    } catch (error) {
      console.error('Error showing personal cabinet:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle wallet creation
  async handleCreateWallet(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletResult = await walletService.createUserWallet(chatId);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
      ]);
      
      await ctx.editMessageText(
        `‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
        `üìç –ê–¥—Ä–µ—Å: \`${walletResult.address}\`\n` +
        `üåê –°–µ—Ç—å: Polygon\n\n` +
        `‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ:\n` +
        `üîê \`${walletResult.privateKey}\`\n\n` +
        `üö® –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!`,
        keyboard
      );
      
    } catch (error) {
      console.error('Wallet creation error:', error);
      await ctx.editMessageText(`‚ùå ${error.message}`);
    }
  }

  // Handle wallet editing menu
  async handleWalletEdit(ctx) {
    try {
      const message = '‚öôÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞**\n\n' +
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîë –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á', 'show_private_key')],
        [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞', 'export_wallet')],
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', 'delete_wallet')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Wallet edit menu error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle wallet details view
  async handleWalletDetails(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.editMessageText('‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const message = 'üí≥ –ö–æ—à–µ–ª–µ–∫\n\n' +
                     `\`${walletInfo.address}\``;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîë –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á', 'show_private_key')],
        [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞', 'export_wallet')],
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', 'delete_wallet')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Wallet details error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞.');
    }
  }

  // Handle transfer menu
  async handleTransferMenu(ctx) {
    try {
      const message = 'üí∏ –ü–µ—Ä–µ–≤–æ–¥';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ CES', 'send_ces_tokens')],
        [Markup.button.callback('üíé –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ POL', 'send_pol_tokens')],
        [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤', 'transaction_history')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.editMessageText(message, keyboard);
      
    } catch (error) {
      console.error('Transfer menu error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤.');
    }
  }

  // Show private key
  async handleShowPrivateKey(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const privateKey = await walletService.getUserPrivateKey(chatId);
      
      const message = `üîë **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á**\n\n` +
                     `‚ö†Ô∏è **–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!** –ù–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á!\n\n` +
                     `üîê \`${privateKey}\``;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', 'edit_wallet')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Show private key error:', error);
      await ctx.editMessageText(`‚ùå ${error.message}`);
    }
  }

  // Handle P2P menu
  async handleP2PMenu(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        const message = 'üí∏ –ü–µ—Ä–µ–≤–æ–¥\n\n' +
                       '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞.\n\n' +
                       '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è P2P —Ñ—É–Ω–∫—Ü–∏–π.';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
        ]);
        
        return await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      }
      
      // Redirect to transfer menu
      const message = 'üí∏ –ü–µ—Ä–µ–≤–æ–¥';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ CES', 'send_ces_tokens')],
        [Markup.button.callback('üíé –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ POL', 'send_pol_tokens')],
        [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤', 'transaction_history')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.editMessageText(message, keyboard);
      
    } catch (error) {
      console.error('P2P menu error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ P2P –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle back to main menu
  async handleBackToMenu(ctx) {
    try {
      const mainMenu = Markup.keyboard([
        ['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üîÑ P2P']
      ]).resize();
      
      await ctx.editMessageText('üåæ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenu);
    } catch (error) {
      console.error('Back to menu error:', error);
      // Fallback: send new message if editing fails
      try {
        const mainMenu = Markup.keyboard([
          ['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üîÑ P2P']
        ]).resize();
        
        await ctx.reply('üåæ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenu);
      } catch (fallbackError) {
        console.error('Fallback menu error:', fallbackError);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
      }
    }
  }

  // Refresh balance
  async handleRefreshBalance(ctx) {
    await this.handlePersonalCabinet(ctx);
  }

  // Handle CES token transfer initiation
  async handleSendCESTokens(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
      }
      
      if (walletInfo.cesBalance <= 0) {
        const message = 'üí∏ **–ü–µ—Ä–µ–≤–æ–¥ CES —Ç–æ–∫–µ–Ω–æ–≤**\n\n' +
                       '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n' +
                       `üíº –í–∞—à –±–∞–ª–∞–Ω—Å: **${walletInfo.cesBalance.toFixed(4)} CES**`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'refresh_balance')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
        ]);
        
        return await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      }
      
      const message = 'üí∏ **–ü–µ—Ä–µ–≤–æ–¥ CES —Ç–æ–∫–µ–Ω–æ–≤**\n\n' +
                     `üíº –î–æ—Å—Ç—É–ø–Ω–æ: **${walletInfo.cesBalance.toFixed(4)} CES**\n\n` +
                     'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
                     '`–ê–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞ –°—É–º–º–∞`\n\n' +
                     'üìù **–ü—Ä–∏–º–µ—Ä:**\n' +
                     '`0x742d35Cc6734C0532925a3b8D4321F...89 10.5`\n\n' +
                     '‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.001 CES';
      
      // Store state to handle next user message
      ctx.session = ctx.session || {};
      ctx.session.awaitingTransfer = true;
      ctx.session.transferType = 'CES';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error initiating CES transfer:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle POL token transfer initiation
  async handleSendPOLTokens(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
      }
      
      if (walletInfo.polBalance <= 0.001) {
        const message = 'üíé **–ü–µ—Ä–µ–≤–æ–¥ POL —Ç–æ–∫–µ–Ω–æ–≤**\n\n' +
                       '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n' +
                       `üíé –í–∞—à –±–∞–ª–∞–Ω—Å: **${walletInfo.polBalance.toFixed(4)} POL**\n\n` +
                       '‚ÑπÔ∏è –ú–∏–Ω–∏–º—É–º 0.001 POL –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'refresh_balance')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
        ]);
        
        return await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      }
      
      const maxTransfer = (walletInfo.polBalance - 0.001).toFixed(4);
      const message = 'üíé **–ü–µ—Ä–µ–≤–æ–¥ POL —Ç–æ–∫–µ–Ω–æ–≤**\n\n' +
                     `üíé –î–æ—Å—Ç—É–ø–Ω–æ: **${maxTransfer} POL**\n` +
                     `üíº –í—Å–µ–≥–æ: **${walletInfo.polBalance.toFixed(4)} POL**\n\n` +
                     'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
                     '`–ê–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞ –°—É–º–º–∞`\n\n' +
                     'üìù **–ü—Ä–∏–º–µ—Ä:**\n' +
                     '`0x742d35Cc6734C0532925a3b8D4321F...89 0.1`\n\n' +
                     '‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.001 POL\n' +
                     '‚ö†Ô∏è 0.001 POL –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏';
      
      // Store state to handle next user message
      ctx.session = ctx.session || {};
      ctx.session.awaitingTransfer = true;
      ctx.session.transferType = 'POL';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error initiating POL transfer:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle transaction history
  async handleTransactionHistory(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const transactions = await walletService.getUserTransactions(chatId, 5);
      
      let message = 'üìä **–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤**\n\n';
      
      if (transactions.length === 0) {
        message += 'üìù –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ\n\n' +
                  '–ù–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å CES —Ç–æ–∫–µ–Ω—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!';
      } else {
        const user = await walletService.findUserByAddress(transactions[0].fromAddress) || 
                    await walletService.findUserByAddress(transactions[0].toAddress);
        
        transactions.forEach((tx, index) => {
          const isOutgoing = tx.fromUserId && tx.fromUserId.toString() === user._id.toString();
          const direction = isOutgoing ? 'üü¢ –ò—Å—Ö–æ–¥—è—â–∏–π' : 'üîµ –í—Ö–æ–¥—è—â–∏–π';
          const statusEmoji = tx.status === 'completed' ? '‚úÖ' : 
                             tx.status === 'pending' ? '‚è≥' : '‚ùå';
          
          message += `${index + 1}. ${direction}\n`;
          message += `üí∞ ${tx.amount} CES ${statusEmoji}\n`;
          message += `üìÖ ${tx.createdAt.toLocaleString('ru-RU')}\n`;
          
          if (tx.txHash) {
            const shortHash = tx.txHash.substring(0, 10) + '...';
            message += `üîó ${shortHash}\n`;
          }
          
          message += '\n';
        });
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ P2P', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error showing transaction history:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Process transfer command from user message
  async processTransferCommand(ctx, transferData, tokenType = 'CES') {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Parse transfer data (address amount)
      const parts = transferData.trim().split(/\s+/);
      
      if (parts.length !== 2) {
        return await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`–∞–¥—Ä–µ—Å —Å—É–º–º–∞\``, {
          parse_mode: 'Markdown'
        });
      }
      
      const [toAddress, amountStr] = parts;
      const amount = parseFloat(amountStr);
      
      if (isNaN(amount) || amount <= 0) {
        return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
      }
      
      if (amount < 0.001) {
        return await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: 0.001 ${tokenType}`);
      }
      
      // Show confirmation
      const recipient = await walletService.findUserByAddress(toAddress);
      const recipientInfo = recipient ? 
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${recipient.username || recipient.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}` :
        'üë§ –í–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫';
      
      const tokenEmoji = tokenType === 'POL' ? 'üíé' : 'üí∞';
      const message = `${tokenEmoji} **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞**\n\n` +
                     `${tokenEmoji} –°—É–º–º–∞: **${amount} ${tokenType}**\n` +
                     `üì´ –ö–æ–º—É: \`${toAddress}\`\n` +
                     `${recipientInfo}\n\n` +
                     '‚ùó –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_transfer_${tokenType}_${toAddress}_${amount}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error processing transfer command:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞.');
    }
  }

  // Handle transfer confirmation
  async handleTransferConfirmation(ctx, transferParams) {
    try {
      const parts = transferParams.split('_');
      if (parts.length < 4) {
        throw new Error('Invalid transfer parameters');
      }
      
      const [, , tokenType, toAddress, amountStr] = parts;
      const amount = parseFloat(amountStr);
      const chatId = ctx.chat.id.toString();
      
      await ctx.editMessageText('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ.');
      
      let result;
      if (tokenType === 'POL') {
        result = await walletService.sendPOLTokens(chatId, toAddress, amount);
      } else {
        result = await walletService.sendCESTokens(chatId, toAddress, amount);
      }
      
      if (result.success) {
        const tokenEmoji = tokenType === 'POL' ? 'üíé' : 'üí∞';
        const message = `‚úÖ **–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω!**\n\n` +
                       `${tokenEmoji} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: **${amount} ${tokenType}**\n` +
                       `üì´ –ö–æ–º—É: \`${toAddress}\`\n` +
                       `üîó Hash: \`${result.txHash}\`\n\n` +
                       'üîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback(`üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â–µ ${tokenType}`, tokenType === 'POL' ? 'send_pol_tokens' : 'send_ces_tokens')],
          [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
        ]);
        
        await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      }
      
    } catch (error) {
      console.error('Transfer confirmation error:', error);
      
      const errorMessage = '‚ùå **–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞**\n\n' +
                          `‚ÑπÔ∏è ${error.message}`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(errorMessage, { parse_mode: 'Markdown', ...keyboard });
    }
  }
}

module.exports = new MessageHandler();