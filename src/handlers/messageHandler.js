/**
 * Message Handlers
 * Handles all Telegram bot message and callback processing
 */

const { Markup } = require('telegraf');
const priceService = require('../services/priceService');
const walletService = require('../services/walletService');
const p2pService = require('../services/p2pService');
const { User, PriceHistory } = require('../database/models');

// Simple session storage for user states
const userSessions = new Map();

class MessageHandler {
  // Get or create user session
  getUserSession(chatId) {
    if (!userSessions.has(chatId)) {
      userSessions.set(chatId, {});
    }
    return userSessions.get(chatId);
  }

  // Clear user session
  clearUserSession(chatId) {
    userSessions.delete(chatId);
  }

  // Set session data
  setSessionData(chatId, key, value) {
    const session = this.getUserSession(chatId);
    session[key] = value;
  }

  // Get session data
  getSessionData(chatId, key) {
    const session = this.getUserSession(chatId);
    return session[key];
  }
  // Handle /start command
  async handleStart(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Register or update user in database
      const user = await User.findOneAndUpdate(
        { chatId },
        {
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          isActive: true
        },
        { upsert: true, new: true }
      );
      
      const welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !';
      
      // Main menu with regular keyboard buttons (only 2 buttons as requested)
      const mainMenu = Markup.keyboard([
        ['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üîÑ P2P']
      ]).resize();
      
      await ctx.reply(welcomeMessage, mainMenu);
      
    } catch (error) {
      console.error('Start command error:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // Handle price command and button
  async handlePrice(ctx) {
    try {
      const priceData = await priceService.getCESPrice();
      
      // Save data to database (only when calling /price)
      if (!priceData.cached) {
        await new PriceHistory(priceData).save();
        console.log(`üíæ Price data saved: $${priceData.price.toFixed(2)} | ATH: $${priceData.ath.toFixed(2)}`);
      }
      
      // Determine emoji for price change
      const changeEmoji = priceData.change24h >= 0 ? 'üî∫' : 'üîª';
      const changeSign = priceData.change24h >= 0 ? '+' : '';
      
      // Check if current price is ATH
      const isNewATH = priceData.price >= priceData.ath;
      const athDisplay = isNewATH ? `üèÜ $ ${priceData.ath.toFixed(2)}` : `$ ${priceData.ath.toFixed(2)}`;
      
      // Source indicator (only for database)
      const sourceEmoji = priceData.source === 'database' ? 'üóÑÔ∏è' : '';
      
      // Message format exactly as in example
      const message = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ CES: $ ${priceData.price.toFixed(2)} | ‚ÇΩ ${priceData.priceRub.toFixed(2)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${priceData.change24h.toFixed(2)}% ‚Ä¢ üÖ• $ ${priceService.formatNumber(priceData.volume24h)} ‚Ä¢ üÖêüÖ£üÖó ${athDisplay}`;
      
      // Send text message for maximum speed
      await ctx.reply(message);
      
    } catch (error) {
      console.error('Error sending price to user:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É CES –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle text messages from regular keyboard buttons
  async handleTextMessage(ctx) {
    try {
      const text = ctx.message.text;
      const chatId = ctx.chat.id.toString();
      
      console.log(`üìù Processing text message from ${chatId}: "${text}"`);
      
      // Check if user is in transfer mode
      const awaitingTransfer = this.getSessionData(chatId, 'awaitingTransfer');
      if (awaitingTransfer) {
        const transferType = this.getSessionData(chatId, 'transferType') || 'CES';
        this.clearUserSession(chatId);
        return await this.processTransferCommand(ctx, text, transferType);
      }
      
      // Check if user is in P2P order mode
      const awaitingP2POrder = this.getSessionData(chatId, 'awaitingP2POrder');
      if (awaitingP2POrder) {
        const orderType = this.getSessionData(chatId, 'p2pOrderType') || 'buy';
        console.log(`üîÑ Processing P2P order: type=${orderType}, text="${text}"`);
        this.clearUserSession(chatId);
        return await this.processP2POrder(ctx, text, orderType);
      }
      
      if (text.includes('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')) {
        return await this.handlePersonalCabinetText(ctx);
      }
      
      if (text.includes('P2P')) {
        return await this.handleP2PMenuText(ctx);
      }
      
      // Check if message looks like a transfer command (address amount)
      const transferPattern = /^0x[a-fA-F0-9]{40}\s+\d+\.?\d*$/;
      if (transferPattern.test(text.trim())) {
        return await this.processTransferCommand(ctx, text, 'CES');
      }
      
      // Check if message looks like a P2P order (amount price) - but only if in P2P session
      const p2pOrderPattern = /^\d+[,.]?\d*\s+\d+[,.]?\d*$/;
      if (p2pOrderPattern.test(text.trim())) {
        console.log(`ü§î Message looks like P2P order but no session found: "${text}"`);
        return await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (–ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞) —á–µ—Ä–µ–∑ –º–µ–Ω—é P2P.\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "P2P" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ.');
      }
      
      // Default response for unknown text
      console.log(`‚ùì Unknown command from ${chatId}: "${text}"`);
      await ctx.reply('üòï –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start');
      
    } catch (error) {
      console.error('Text message handler error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // Handle Personal Cabinet from text message
  async handlePersonalCabinetText(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
      }
      
      let message = 'üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n';
      
      if (walletInfo.hasWallet) {
        // Get current price data for both tokens
        const [cesData, polData] = await Promise.all([
          priceService.getCESPrice(),
          priceService.getPOLPrice()
        ]);
        
        const cesTokenPrice = cesData ? cesData.price : 0;
        const cesTokenPriceRub = cesData ? cesData.priceRub : 0;
        const polTokenPrice = polData ? polData.price : 0.45;
        const polTokenPriceRub = polData ? polData.priceRub : 45.0;
        
        // Calculate total value of tokens on wallet
        const cesTotalUsd = (walletInfo.cesBalance * cesTokenPrice).toFixed(2);
        const cesTotalRub = (walletInfo.cesBalance * cesTokenPriceRub).toFixed(2);
        const polTotalUsd = (walletInfo.polBalance * polTokenPrice).toFixed(2);
        const polTotalRub = (walletInfo.polBalance * polTokenPriceRub).toFixed(2);
        
        message += `–ë–∞–ª–∞–Ω—Å CES: ${walletInfo.cesBalance.toFixed(4)} ‚Ä¢ $ ${cesTotalUsd} ‚Ä¢ ‚ÇΩ ${cesTotalRub}\n`;
        message += `–ë–∞–ª–∞–Ω—Å POL: ${walletInfo.polBalance.toFixed(4)} ‚Ä¢ $ ${polTotalUsd} ‚Ä¢ ‚ÇΩ ${polTotalRub}`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üí≥ –ö–æ—à–µ–ª–µ–∫', 'wallet_details')],
          [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–æ–¥', 'transfer_menu')],
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_balance')]
        ]);
        
        await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
        
      } else {
        message += '‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω\n\n';
        message += 'üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ CES –∏ POL';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫', 'create_wallet')]
        ]);
        
        await ctx.reply(message, keyboard);
      }
      
    } catch (error) {
      console.error('Error showing personal cabinet:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle P2P from text message
  async handleP2PMenuText(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üîÑ Handling P2P menu text for user ${chatId}`);
      
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        const message = 'P2P –±–∏—Ä–∂–∞\n\n' +
                       '–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞.\n\n' +
                       '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è P2P —Ñ—É–Ω–∫—Ü–∏–π.';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
        ]);
        
        return await ctx.reply(message, keyboard);
      }
      
      // Get user reputation data
      const reputationService = require('../services/reputationService');
      const user = await User.findOne({ chatId });
      const reputation = await reputationService.getUserReputation(user._id);
      
      // Show P2P Exchange menu with required format
      const message = 'P2P –±–∏—Ä–∂–∞\n\n' +
                     `–†–µ–π—Ç–∏–Ω–≥: ${reputation.trustScore}/1000\n` +
                     `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${reputation.completionRate}%\n` +
                     `–°–ø–æ—Ä–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${reputation.disputeRate}%\n` +
                     `–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${reputation.totalTrades}\n\n` +
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìà –ö—É–ø–∏—Ç—å CES', 'p2p_buy_ces'), Markup.button.callback('üìâ –ü—Ä–æ–¥–∞—Ç—å CES', 'p2p_sell_ces')],
        [Markup.button.callback('üìä –†—ã–Ω–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤', 'p2p_market_orders'), Markup.button.callback('üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞', 'p2p_my_orders')],
        [Markup.button.callback('üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'p2p_analytics')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('P2P menu text error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ P2P –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  async handlePersonalCabinet(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo) {
        return await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
      }
      
      let message = '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n';
      
      if (walletInfo.hasWallet) {
        // Get current price data for both tokens
        const [cesData, polData] = await Promise.all([
          priceService.getCESPrice(),
          priceService.getPOLPrice()
        ]);
        
        const cesTokenPrice = cesData ? cesData.price : 0;
        const cesTokenPriceRub = cesData ? cesData.priceRub : 0;
        const polTokenPrice = polData ? polData.price : 0.45;
        const polTokenPriceRub = polData ? polData.priceRub : 45.0;
        
        // Calculate total value of tokens on wallet
        const cesTotalUsd = (walletInfo.cesBalance * cesTokenPrice).toFixed(2);
        const cesTotalRub = (walletInfo.cesBalance * cesTokenPriceRub).toFixed(2);
        const polTotalUsd = (walletInfo.polBalance * polTokenPrice).toFixed(2);
        const polTotalRub = (walletInfo.polBalance * polTokenPriceRub).toFixed(2);
        
        message += `–ë–∞–ª–∞–Ω—Å CES: ${walletInfo.cesBalance.toFixed(4)} ‚Ä¢ $ ${cesTotalUsd} ‚Ä¢ ‚ÇΩ ${cesTotalRub}\n`;
        message += `–ë–∞–ª–∞–Ω—Å POL: ${walletInfo.polBalance.toFixed(4)} ‚Ä¢ $ ${polTotalUsd} ‚Ä¢ ‚ÇΩ ${polTotalRub}`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üí≥ –ö–æ—à–µ–ª–µ–∫', 'wallet_details')],
          [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–æ–¥', 'transfer_menu')],
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_balance')]
        ]);
        
        await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
        
      } else {
        message += '‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω\n\n';
        message += 'üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ CES –∏ POL';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫', 'create_wallet')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
        ]);
        
        await ctx.editMessageText(message, keyboard);
      }
      
    } catch (error) {
      console.error('Error showing personal cabinet:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle wallet creation
  async handleCreateWallet(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletResult = await walletService.createUserWallet(chatId);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
      ]);
      
      await ctx.editMessageText(
        `–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
        `–ê–¥—Ä–µ—Å: \`${walletResult.address}\`\n` +
        `–°–µ—Ç—å: Polygon\n\n` +
        `–í–∞–∂–Ω–æ: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ:\n` +
        `\`${walletResult.privateKey}\`\n\n` +
        `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!`,
        keyboard
      );
      
    } catch (error) {
      console.error('Wallet creation error:', error);
      await ctx.editMessageText(`‚ùå ${error.message}`);
    }
  }

  // Handle wallet editing menu
  async handleWalletEdit(ctx) {
    try {
      const message = '‚öôÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞**\n\n' +
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîë –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á', 'show_private_key')],
        [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞', 'export_wallet')],
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', 'delete_wallet')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Wallet edit menu error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle wallet details view
  async handleWalletDetails(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.editMessageText('‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const message = '–ö–æ—à–µ–ª–µ–∫\n\n' +
                     `\`${walletInfo.address}\``;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîë –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á', 'show_private_key')],
        [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞', 'export_wallet')],
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', 'delete_wallet')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Wallet details error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞.');
    }
  }

  // Handle transfer menu
  async handleTransferMenu(ctx) {
    try {
      const message = 'üí∏ –ü–µ—Ä–µ–≤–æ–¥';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ CES', 'send_ces_tokens')],
        [Markup.button.callback('üíé –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ POL', 'send_pol_tokens')],
        [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤', 'transaction_history')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.editMessageText(message, keyboard);
      
    } catch (error) {
      console.error('Transfer menu error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤.');
    }
  }

  // Show private key
  async handleShowPrivateKey(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const privateKey = await walletService.getUserPrivateKey(chatId);
      
      const message = `üîë **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á**\n\n` +
                     `‚ö†Ô∏è **–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!** –ù–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á!\n\n` +
                     `üîê \`${privateKey}\``;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', 'edit_wallet')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Show private key error:', error);
      await ctx.editMessageText(`‚ùå ${error.message}`);
    }
  }

  // Handle wallet export
  async handleExportWallet(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      const privateKey = await walletService.getUserPrivateKey(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.editMessageText('‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const message = `üì§ **–≠–∫—Å–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞**\n\n` +
                     `üí≥ –ê–¥—Ä–µ—Å: \`${walletInfo.address}\`\n` +
                     `üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: \`${privateKey}\`\n\n` +
                     `‚ö†Ô∏è **–í–∞–∂–Ω–æ:**\n` +
                     `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ\n` +
                     `‚Ä¢ –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á\n` +
                     `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ –∫–æ—à–µ–ª—å–∫–∏`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', 'edit_wallet')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Export wallet error:', error);
      await ctx.editMessageText(`‚ùå ${error.message}`);
    }
  }

  // Handle wallet deletion
  async handleDeleteWallet(ctx) {
    try {
      const message = `‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n` +
                     `üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫?\n\n` +
                     `‚ùó **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**\n` +
                     `‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n` +
                     `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å—Ä–µ–¥—Å—Ç–≤–∞–º –±—É–¥–µ—Ç —É—Ç—Ä–∞—á–µ–Ω`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'confirm_delete_wallet')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'edit_wallet')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Delete wallet confirmation error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  }

  // Confirm wallet deletion
  async handleConfirmDeleteWallet(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      await walletService.deleteUserWallet(chatId);
      
      const message = `‚úÖ **–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω**\n\n` +
                     `üóë –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ —É–¥–∞–ª–µ–Ω—ã\n` +
                     `üîÑ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π', 'create_wallet')],
        [Markup.button.callback('üîô –ö –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Confirm delete wallet error:', error);
      await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
    }
  }

  // Handle P2P menu
  async handleP2PMenu(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üîÑ Handling P2P menu callback for user ${chatId}`);
      
      // Clear any existing session when entering P2P menu
      this.clearUserSession(chatId);
      
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        const message = 'P2P –±–∏—Ä–∂–∞\n\n' +
                       '–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞.\n\n' +
                       '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è P2P —Ñ—É–Ω–∫—Ü–∏–π.';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
        ]);
        
        return await ctx.editMessageText(message, keyboard);
      }
      
      // Get user reputation data
      const reputationService = require('../services/reputationService');
      const user = await User.findOne({ chatId });
      const reputation = await reputationService.getUserReputation(user._id);
      
      // Show P2P Exchange menu with required format
      const message = 'P2P –±–∏—Ä–∂–∞\n\n' +
                     `–†–µ–π—Ç–∏–Ω–≥: ${reputation.trustScore}/1000\n` +
                     `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${reputation.completionRate}%\n` +
                     `–°–ø–æ—Ä–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${reputation.disputeRate}%\n` +
                     `–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${reputation.totalTrades}\n\n` +
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìà –ö—É–ø–∏—Ç—å CES', 'p2p_buy_ces'), Markup.button.callback('üìâ –ü—Ä–æ–¥–∞—Ç—å CES', 'p2p_sell_ces')],
        [Markup.button.callback('üìä –†—ã–Ω–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤', 'p2p_market_orders'), Markup.button.callback('üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞', 'p2p_my_orders')],
        [Markup.button.callback('üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'p2p_analytics')]
      ]);
      
      await ctx.editMessageText(message, keyboard);
      
    } catch (error) {
      console.error('P2P menu error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ P2P –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle user profile
  async handleP2PMyProfile(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Get reputation data
      const reputationService = require('../services/reputationService');
      const reputation = await reputationService.getUserReputation(user._id);
      
      // Get user's recent trades
      const recentTrades = await p2pService.getUserTrades(chatId, 5);
      
      const verificationText = {
        'unverified': '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
        'phone_verified': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É',
        'document_verified': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º',
        'premium': '–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      };
      
      const message = `üë§ **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å P2P** üë§\n\n` +
                     `‚≠ê *–†–µ–π—Ç–∏–Ω–≥ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è:*\n` +
                     `üèÜ –†–µ–π—Ç–∏–Ω–≥: ${reputation.trustScore}/1000\n` +
                     `üèÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ${verificationText[reputation.verificationLevel]}\n` +
                     `üìä –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: ${reputation.completionRate}%\n` +
                     `‚ö†Ô∏è –°–ø–æ—Ä–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${reputation.disputeRate}%\n` +
                     `üí∞ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${reputation.totalTrades}\n\n` +
                     `üìà *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*\n` +
                     (recentTrades.length > 0 
                       ? recentTrades.map((trade, index) => 
                           `${index + 1}. üí∞ ${trade.amount.toFixed(2)} CES –∑–∞ ‚ÇΩ${trade.totalValue.toFixed(2)} (${trade.status === 'completed' ? '‚úÖ' : '‚ùå'})`
                         ).join('\n')
                       : 'üìù –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'p2p_my_profile')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ P2P', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Profile error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle back to main menu
  async handleBackToMenu(ctx) {
    try {
      const mainMenu = Markup.keyboard([
        ['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üîÑ P2P']
      ]).resize();
      
      await ctx.editMessageText('üåæ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenu);
    } catch (error) {
      console.error('Back to menu error:', error);
      // Fallback: send new message if editing fails
      try {
        const mainMenu = Markup.keyboard([
          ['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üîÑ P2P']
        ]).resize();
        
        await ctx.reply('üåæ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenu);
      } catch (fallbackError) {
        console.error('Fallback menu error:', fallbackError);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
      }
    }
  }

  // Refresh balance
  async handleRefreshBalance(ctx) {
    try {
      await this.handlePersonalCabinet(ctx);
    } catch (error) {
      // Handle "message not modified" error gracefully
      if (error.response && error.response.error_code === 400 && 
          error.response.description.includes('message is not modified')) {
        console.log('Ignoring "message not modified" error during refresh');
        // Message is already up to date, no need to show error
      } else {
        console.error('Refresh balance error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  }

  // Handle CES token transfer initiation
  async handleSendCESTokens(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
      }
      
      if (walletInfo.cesBalance <= 0) {
        const message = 'üí∏ **–ü–µ—Ä–µ–≤–æ–¥ CES —Ç–æ–∫–µ–Ω–æ–≤**\n\n' +
                       '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n' +
                       `üíº –í–∞—à –±–∞–ª–∞–Ω—Å: **${walletInfo.cesBalance.toFixed(4)} CES**`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'refresh_balance')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
        ]);
        
        return await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      }
      
      const message = 'üí∏ **–ü–µ—Ä–µ–≤–æ–¥ CES —Ç–æ–∫–µ–Ω–æ–≤**\n\n' +
                     `üíº –î–æ—Å—Ç—É–ø–Ω–æ: **${walletInfo.cesBalance.toFixed(4)} CES**\n\n` +
                     'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
                     '`–ê–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞ –°—É–º–º–∞`\n\n' +
                     'üìù **–ü—Ä–∏–º–µ—Ä:**\n' +
                     '`0x742d35Cc6734C0532925a3b8D4321F...89 10.5`\n\n' +
                     '‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.001 CES';
      
      // Store state to handle next user message
      this.setSessionData(chatId, 'awaitingTransfer', true);
      this.setSessionData(chatId, 'transferType', 'CES');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error initiating CES transfer:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle POL token transfer initiation
  async handleSendPOLTokens(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
      }
      
      if (walletInfo.polBalance <= 0.001) {
        const message = 'üíé **–ü–µ—Ä–µ–≤–æ–¥ POL —Ç–æ–∫–µ–Ω–æ–≤**\n\n' +
                       '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n' +
                       `üíé –í–∞—à –±–∞–ª–∞–Ω—Å: **${walletInfo.polBalance.toFixed(4)} POL**\n\n` +
                       '‚ÑπÔ∏è –ú–∏–Ω–∏–º—É–º 0.001 POL –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'refresh_balance')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
        ]);
        
        return await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      }
      
      const maxTransfer = (walletInfo.polBalance - 0.001).toFixed(4);
      const message = 'üíé **–ü–µ—Ä–µ–≤–æ–¥ POL —Ç–æ–∫–µ–Ω–æ–≤**\n\n' +
                     `üíé –î–æ—Å—Ç—É–ø–Ω–æ: **${maxTransfer} POL**\n` +
                     `üíº –í—Å–µ–≥–æ: **${walletInfo.polBalance.toFixed(4)} POL**\n\n` +
                     'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
                     '`–ê–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞ –°—É–º–º–∞`\n\n' +
                     'üìù **–ü—Ä–∏–º–µ—Ä:**\n' +
                     '`0x742d35Cc6734C0532925a3b8D4321F...89 0.1`\n\n` +
                     '‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.001 POL\n' +
                     '‚ö†Ô∏è 0.001 POL –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏';
      
      // Store state to handle next user message
      this.setSessionData(chatId, 'awaitingTransfer', true);
      this.setSessionData(chatId, 'transferType', 'POL');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error initiating POL transfer:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle transaction history
  async handleTransactionHistory(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const transactions = await walletService.getUserTransactions(chatId, 5);
      
      let message = 'üìä **–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤**\n\n';
      
      if (transactions.length === 0) {
        message += 'üìù –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ\n\n' +
                  '–ù–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å CES —Ç–æ–∫–µ–Ω—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!';
      } else {
        const user = await walletService.findUserByAddress(transactions[0].fromAddress) || 
                    await walletService.findUserByAddress(transactions[0].toAddress);
        
        transactions.forEach((tx, index) => {
          const isOutgoing = tx.fromUserId && tx.fromUserId.toString() === user._id.toString();
          const direction = isOutgoing ? 'üü¢ –ò—Å—Ö–æ–¥—è—â–∏–π' : 'üîµ –í—Ö–æ–¥—è—â–∏–π';
          const statusEmoji = tx.status === 'completed' ? '‚úÖ' : 
                             tx.status === 'pending' ? '‚è≥' : '‚ùå';
          
          message += `${index + 1}. ${direction}\n`;
          message += `üí∞ ${tx.amount} CES ${statusEmoji}\n`;
          message += `üìÖ ${tx.createdAt.toLocaleString('ru-RU')}\n`;
          
          if (tx.txHash) {
            const shortHash = tx.txHash.substring(0, 10) + '...';
            message += `üîó ${shortHash}\n`;
          }
          
          message += '\n';
        });
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ P2P', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error showing transaction history:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Process transfer command from user message
  async processTransferCommand(ctx, transferData, tokenType = 'CES') {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Parse transfer data (address amount)
      const parts = transferData.trim().split(/\s+/);
      
      if (parts.length !== 2) {
        return await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`–∞–¥—Ä–µ—Å —Å—É–º–º–∞\``, {
          parse_mode: 'Markdown'
        });
      }
      
      const [toAddress, amountStr] = parts;
      const amount = parseFloat(amountStr);
      
      if (isNaN(amount) || amount <= 0) {
        return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
      }
      
      if (amount < 0.001) {
        return await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: 0.001 ${tokenType}`);
      }
      
      // Show confirmation
      const recipient = await walletService.findUserByAddress(toAddress);
      const recipientInfo = recipient ? 
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${recipient.username || recipient.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}` :
        'üë§ –í–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫';
      
      const tokenEmoji = tokenType === 'POL' ? 'üíé' : 'üí∞';
      const message = `${tokenEmoji} **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞**\n\n` +
                     `${tokenEmoji} –°—É–º–º–∞: **${amount} ${tokenType}**\n` +
                     `üì´ –ö–æ–º—É: \`${toAddress}\`\n` +
                     `${recipientInfo}\n\n` +
                     '‚ùó –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_transfer_${tokenType}_${toAddress}_${amount}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error processing transfer command:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞.');
    }
  }

  // Handle transfer confirmation
  async handleTransferConfirmation(ctx, transferParams) {
    try {
      const parts = transferParams.split('_');
      if (parts.length < 4) {
        throw new Error('Invalid transfer parameters');
      }
      
      const [, , tokenType, toAddress, amountStr] = parts;
      const amount = parseFloat(amountStr);
      const chatId = ctx.chat.id.toString();
      
      await ctx.editMessageText('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ.');
      
      let result;
      if (tokenType === 'POL') {
        result = await walletService.sendPOLTokens(chatId, toAddress, amount);
      } else {
        result = await walletService.sendCESTokens(chatId, toAddress, amount);
      }
      
      if (result.success) {
        const tokenEmoji = tokenType === 'POL' ? 'üíé' : 'üí∞';
        const message = `‚úÖ **–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω!**\n\n` +
                       `${tokenEmoji} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: **${amount} ${tokenType}**\n` +
                       `üì´ –ö–æ–º—É: \`${toAddress}\`\n` +
                       `üîó Hash: \`${result.txHash}\`\n\n` +
                       'üîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback(`üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â–µ ${tokenType}`, tokenType === 'POL' ? 'send_pol_tokens' : 'send_ces_tokens')],
          [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
        ]);
        
        await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      }
      
    } catch (error) {
      console.error('Transfer confirmation error:', error);
      
      const errorMessage = '‚ùå **–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞**\n\n' +
                          `‚ÑπÔ∏è ${error.message}`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(errorMessage, { parse_mode: 'Markdown', ...keyboard });
    }
  }

  // Handle P2P Buy CES
  async handleP2PBuyCES(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const priceData = await p2pService.getMarketPriceSuggestion();
      
      const message = `üíé **–ü–æ–∫—É–ø–∫–∞ CES —Ç–æ–∫–µ–Ω–æ–≤** üíé\n\n` +
                     `üè¶ *–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞:*\n` +
                     `üí∞ ${priceData.currentPrice.toFixed(2)} ‚ÇΩ –∑–∞ 1 CES\n\n` +
                     `üìä *–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞:*\n` +
                     `‚≠ê ${priceData.suggestedPrice.toFixed(2)} ‚ÇΩ –∑–∞ 1 CES\n\n` +
                     `üìù *–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω—É:*\n` +
                     `üîπ –§–æ—Ä–º–∞—Ç: \`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω\`\n` +
                     `üî∏ –ü—Ä–∏–º–µ—Ä: \`10 ${priceData.suggestedPrice.toFixed(2)}\`\n\n` +
                     `‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
                     `üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 CES\n` +
                     `üî∏ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%\n` +
                     `üîπ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Å–∫—Ä–æ—É\n` +
                     `üî∏ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç CES –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n\n` +
                     `üõ°Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n` +
                     `üîí –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π`;
      
      // Store state to handle next user message
      console.log(`üîÑ Setting P2P buy order session for ${chatId}`);
      this.setSessionData(chatId, 'awaitingP2POrder', true);
      this.setSessionData(chatId, 'p2pOrderType', 'buy');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('P2P Buy CES error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
    }
  }

  // Handle P2P Sell CES
  async handleP2PSellCES(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (walletInfo.cesBalance <= 0) {
        const message = `üìâ **–ü—Ä–æ–¥–∞—Ç—å CES —Ç–æ–∫–µ–Ω—ã**\n\n` +
                       `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.\n` +
                       `üíº –í–∞—à –±–∞–ª–∞–Ω—Å: **${walletInfo.cesBalance.toFixed(4)} CES**\n\n` +
                       `üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å CES –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'refresh_balance')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
        ]);
        
        return await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      }
      
      const priceData = await p2pService.getMarketPriceSuggestion();
      
      const message = `üíé **–ü—Ä–æ–¥–∞–∂–∞ CES —Ç–æ–∫–µ–Ω–æ–≤** üíé\n\n` +
                     ` Bakan *–í–∞—à –±–∞–ª–∞–Ω—Å:*\n` +
                     `üí∞ ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                     `üìä *–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞:*\n` +
                     `‚≠ê ${priceData.currentPrice.toFixed(2)} ‚ÇΩ –∑–∞ 1 CES\n\n` +
                     `üìà *–†–µ–∫–æ–º–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞:*\n` +
                     `üî• ${priceData.suggestedPrice.toFixed(2)} ‚ÇΩ –∑–∞ 1 CES\n\n` +
                     `üìù *–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω—É:*\n` +
                     `üîπ –§–æ—Ä–º–∞—Ç: \`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω\`\n` +
                     `üî∏ –ü—Ä–∏–º–µ—Ä: \`5 ${priceData.suggestedPrice.toFixed(2)}\`\n\n` +
                     `‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
                     `üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 CES\n` +
                     `üî∏ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%\n` +
                     `üîπ CES —Ç–æ–∫–µ–Ω—ã –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Å–∫—Ä–æ—É\n` +
                     `üî∏ –ü–æ–ª—É—á–∏—Ç–µ —Ä—É–±–ª–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n\n` +
                     `üõ°Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n` +
                     `üîí –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π`;
      
      // Store state to handle next user message
      console.log(`üîÑ Setting P2P sell order session for ${chatId}`);
      this.setSessionData(chatId, 'awaitingP2POrder', true);
      this.setSessionData(chatId, 'p2pOrderType', 'sell');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('P2P Sell CES error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
    }
  }

  // Handle market orders display
  async handleP2PMarketOrders(ctx) {
    try {
      const orders = await p2pService.getMarketOrders(10);
      
      let message = `üåü **–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞** üåü\n\n`;
      
      if (orders.buyOrders.length > 0) {
        message += `üìà **–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É:**\n`;
        orders.buyOrders.slice(0, 5).forEach((order, index) => {
          const username = order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          message += `${index + 1}. üí∞ ${order.remainingAmount.toFixed(2)} CES –ø–æ ‚ÇΩ${order.pricePerToken.toFixed(2)} (@${username})\n`;
        });
        message += `\n`;
      }
      
      if (orders.sellOrders.length > 0) {
        message += `.DataGridViewColumn **–ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:**\n`;
        orders.sellOrders.slice(0, 5).forEach((order, index) => {
          const username = order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          message += `${index + 1}. üíé ${order.remainingAmount.toFixed(2)} CES –ø–æ ‚ÇΩ${order.pricePerToken.toFixed(2)} (@${username})\n`;
        });
      }
      
      if (orders.buyOrders.length === 0 && orders.sellOrders.length === 0) {
        message += `üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É!`;
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'p2p_market_orders')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ P2P', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Market orders error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤.');
    }
  }

  // Handle user's orders
  async handleP2PMyOrders(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const orders = await p2pService.getUserOrders(chatId, 10);
      
      let message = `üìã **–ú–æ–∏ –æ—Ä–¥–µ—Ä–∞** üìã\n\n`;
      
      if (orders.length === 0) {
        message += `üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É CES!`;
      } else {
        orders.forEach((order, index) => {
          const typeEmoji = order.type === 'buy' ? 'üìà' : 'üìâ';
          const typeText = order.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞';
          const statusText = order.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                           order.status === 'partial' ? '–ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω' : 
                           order.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω';
          
          message += `${index + 1}. ${typeEmoji} **${typeText}**\n`;
          message += `üí∞ ${order.remainingAmount.toFixed(2)}/${order.amount.toFixed(2)} CES\n`;
          message += `üíµ ‚ÇΩ${order.pricePerToken.toFixed(2)} –∑–∞ —Ç–æ–∫–µ–Ω\n`;
          message += `üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n`;
          message += `üìÖ ${order.createdAt.toLocaleDateString('ru-RU')}\n\n`;
        });
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'p2p_my_orders')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ P2P', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('My orders error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤.');
    }
  }

  // Process P2P order from user message
  async processP2POrder(ctx, orderData, orderType) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Parse order data (amount pricePerToken)
      const parts = orderData.trim().split(/\s+/);
      
      if (parts.length !== 2) {
        return await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω\`\n\n**–ü—Ä–∏–º–µ—Ä:** \`10 250.50\` –∏–ª–∏ \`10 250,50\``, {
          parse_mode: 'Markdown'
        });
      }
      
      const [amountStr, priceStr] = parts;
      
      // Normalize decimal separators (replace comma with dot)
      const normalizedAmountStr = amountStr.replace(',', '.');
      const normalizedPriceStr = priceStr.replace(',', '.');
      
      const amount = parseFloat(normalizedAmountStr);
      const pricePerToken = parseFloat(normalizedPriceStr);
      
      if (isNaN(amount) || amount <= 0 || isNaN(pricePerToken) || pricePerToken <= 0) {
        return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.\n\n**–ü—Ä–∏–º–µ—Ä:** `10 250.50` –∏–ª–∏ `10 250,50`', {
          parse_mode: 'Markdown'
        });
      }
      
      if (amount < 1) {
        console.log(`‚ùå Amount too small: ${amount}`);
        return await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 CES');
      }
      
      const totalValue = amount * pricePerToken;
      const commission = totalValue * 0.01;
      
      console.log(`üí∞ Processing P2P order: ${amount} CES at ‚ÇΩ${pricePerToken} (total: ‚ÇΩ${totalValue.toFixed(2)}, commission: ‚ÇΩ${commission.toFixed(2)})`);
      
      // Show confirmation
      const typeEmoji = orderType === 'buy' ? 'üìà' : '.DataGridViewColumn';
      const typeText = orderType === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
      
      const message = `üíé **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ ${typeText}** üíé\n\n` +
                     `üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: **${amount} CES**\n` +
                     `üíµ –¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω: **‚ÇΩ${pricePerToken.toFixed(2)}**\n` +
                     `üí∏ –û–±—â–∞—è —Å—É–º–º–∞: **‚ÇΩ${totalValue.toFixed(2)}**\n` +
                     ` Bakan –ö–æ–º–∏—Å—Å–∏—è: **‚ÇΩ${commission.toFixed(2)} (1%)**\n\n` +
                     `üõ°Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n` +
                     `üîí –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π\n\n` +
                     `‚ùó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞?`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_p2p_order_${orderType}_${amount}_${pricePerToken}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      console.log(`‚úÖ Sending P2P order confirmation to user`);
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error processing P2P order:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  // Handle P2P order confirmation
  async handleP2POrderConfirmation(ctx, orderParams) {
    try {
      console.log(`üîÑ Processing P2P order confirmation: ${orderParams}`);
      
      const parts = orderParams.split('_');
      if (parts.length < 5) {
        console.log(`‚ùå Invalid order parameters: ${orderParams}`);
        throw new Error('Invalid order parameters');
      }
      
      const [, , , orderType, amountStr, priceStr] = parts;
      const amount = parseFloat(amountStr);
      const pricePerToken = parseFloat(priceStr);
      const chatId = ctx.chat.id.toString();
      
      console.log(`üìä Order details: type=${orderType}, amount=${amount}, price=${pricePerToken}, chatId=${chatId}`);
      
      await ctx.editMessageText('‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ.');
      
      let result;
      if (orderType === 'buy') {
        console.log(`üìà Creating buy order...`);
        result = await p2pService.createBuyOrder(chatId, amount, pricePerToken);
      } else {
        console.log(`üìâ Creating sell order...`);
        result = await p2pService.createSellOrder(chatId, amount, pricePerToken);
      }
      
      console.log(`‚úÖ Order created successfully: ${result._id}`);
      
      const typeEmoji = orderType === 'buy' ? 'üìà' : '.DataGridViewColumn';
      const typeText = orderType === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
      const totalValue = amount * pricePerToken;
      
      const message = `üéâ **–û—Ä–¥–µ—Ä –Ω–∞ ${typeText} —Å–æ–∑–¥–∞–Ω!** üéâ\n\n` +
                     `üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: **${amount} CES**\n` +
                     `üíµ –¶–µ–Ω–∞: **‚ÇΩ${pricePerToken.toFixed(2)} –∑–∞ —Ç–æ–∫–µ–Ω**\n` +
                     `üí∏ –û–±—â–∞—è —Å—É–º–º–∞: **‚ÇΩ${totalValue.toFixed(2)}**\n\n` +
                     `üîç *–ß—Ç–æ –¥–∞–ª—å—à–µ:*\n` +
                     `‚úÖ –û—Ä–¥–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!\n` +
                     `üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ—Ä–¥–µ—Ä–∞"\n\n` +
                     `üõ°Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n` +
                     `üîí –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞', 'p2p_my_orders')],
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('P2P order confirmation error:', error);
      
      const errorMessage = '‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞**\n\n' +
                          `‚ÑπÔ∏è ${error.message}`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(errorMessage, { parse_mode: 'Markdown', ...keyboard });
    }
  }

  // Handle market analytics
  async handleP2PAnalytics(ctx) {
    try {
      const analyticsService = require('../services/analyticsService');
      
      // Get market analytics
      const analytics = await analyticsService.getAIInsights();
      const marketStats = await analyticsService.getTradingStatistics('24h');
      
      const message = `üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ P2P –ë–∏—Ä–∂–∏** üìà\n\n` +
                     `ü§ñ *–ò–ò –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n` +
                     `üìä –¢—Ä–µ–Ω–¥: ${analytics.trend}\n` +
                     `üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò: ${(analytics.confidence * 100).toFixed(0)}%\n` +
                     `üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${analytics.recommendation}\n\n` +
                     `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:*\n` +
                     `üí∞ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ‚ÇΩ${(analytics.volume || marketStats.volume.totalRubles || 0).toLocaleString('ru-RU')}\n` +
                     `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${marketStats.trades.completed || 0}\n` +
                     `üìà –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${analytics.completionRate || marketStats.trades.completionRate || 0}%\n` +
                     `üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã: ${marketStats.users.uniqueTraders || 0}\n\n` +
                     `üõ°Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n` +
                     `üîí –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'p2p_analytics')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ P2P', 'p2p_menu')]
      ]);
      
      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Analytics error:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}

module.exports = new MessageHandler();