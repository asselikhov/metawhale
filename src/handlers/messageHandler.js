/**
 * Main Message Handler (Refactored)
 * Delegates to specialized handlers for different functionality areas
 */

const { Markup } = require('telegraf');
const BaseCommandHandler = require('./BaseCommandHandler');
const WalletHandler = require('./WalletHandler');
const TransferHandler = require('./TransferHandler');
const P2PHandler = require('./P2PHandler');
const P2POrdersHandler = require('./P2POrdersHandler');
const P2PDataHandler = require('./P2PDataHandler');
const sessionManager = require('./SessionManager');

class MessageHandler {
  constructor() {
    this.baseHandler = new BaseCommandHandler();
    this.walletHandler = new WalletHandler();
    this.transferHandler = new TransferHandler();
    this.p2pHandler = new P2PHandler();
    this.ordersHandler = new P2POrdersHandler();
    this.dataHandler = new P2PDataHandler();
    
    // Inject handlers into baseHandler to avoid circular imports
    this.baseHandler.setHandlers(this.walletHandler, this.p2pHandler, this.transferHandler, this.dataHandler);
  }

  // Session management methods (backward compatibility)
  getUserSession(chatId) {
    return sessionManager.getUserSession(chatId);
  }

  clearUserSession(chatId) {
    return sessionManager.clearUserSession(chatId);
  }

  setSessionData(chatId, key, value) {
    return sessionManager.setSessionData(chatId, key, value);
  }

  getSessionData(chatId, key) {
    return sessionManager.getSessionData(chatId, key);
  }

  // Delegate basic commands
  async handleStart(ctx) {
    return this.baseHandler.handleStart(ctx);
  }

  async handlePrice(ctx) {
    return this.baseHandler.handlePrice(ctx);
  }

  async handleTextMessage(ctx) {
    const chatId = ctx.chat.id.toString();
    const sessionData = sessionManager.getUserSession(chatId);
    
    // Handle CES amount input in selling flow
    if (sessionData && sessionData.waitingForAmount) {
      return this.handleCESAmountInput(ctx, ctx.message.text);
    }
    
    return this.baseHandler.handleTextMessage(ctx);
  }

  async handleBackToMenu(ctx) {
    return this.baseHandler.handleBackToMenu(ctx);
  }

  // Delegate wallet operations
  async handlePersonalCabinetText(ctx) {
    return this.walletHandler.handlePersonalCabinetText(ctx);
  }

  async handleUserProfile(ctx) {
    return this.walletHandler.handleUserProfile(ctx);
  }

  async handleCreateWallet(ctx) {
    return this.walletHandler.handleCreateWallet(ctx);
  }

  async handleWalletDetails(ctx) {
    return this.walletHandler.handleWalletDetails(ctx);
  }

  async handleWalletEdit(ctx) {
    return this.walletHandler.handleWalletEdit(ctx);
  }

  async handleShowPrivateKey(ctx) {
    return this.walletHandler.handleShowPrivateKey(ctx);
  }

  async handleExportWallet(ctx) {
    return this.walletHandler.handleExportWallet(ctx);
  }

  async handleDeleteWallet(ctx) {
    return this.walletHandler.handleDeleteWallet(ctx);
  }

  async handleConfirmDeleteWallet(ctx) {
    return this.walletHandler.handleConfirmDeleteWallet(ctx);
  }

  async handleRefreshBalance(ctx) {
    return this.walletHandler.handleRefreshBalance(ctx);
  }

  // Delegate transfer operations
  async handleTransferMenu(ctx) {
    return this.transferHandler.handleTransferMenu(ctx);
  }

  async handleSendCESTokens(ctx) {
    return this.transferHandler.handleSendCESTokens(ctx);
  }

  async handleSendPOLTokens(ctx) {
    return this.transferHandler.handleSendPOLTokens(ctx);
  }

  async handleTransactionHistory(ctx) {
    return this.transferHandler.handleTransactionHistory(ctx);
  }

  async handleTransferConfirmation(ctx) {
    return this.transferHandler.handleTransferConfirmation(ctx);
  }

  async processTransferCommand(ctx, transferData, tokenType) {
    return this.transferHandler.processTransferCommand(ctx, transferData, tokenType);
  }

  // Delegate P2P operations
  async handleP2PMenu(ctx) {
    return this.p2pHandler.handleP2PMenu(ctx);
  }

  async handleP2PBuyCES(ctx) {
    return this.p2pHandler.handleP2PBuyCES(ctx);
  }

  async handleP2PSellCES(ctx) {
    return this.p2pHandler.handleP2PSellCES(ctx);
  }

  async handleP2PMarketOrders(ctx) {
    return this.p2pHandler.handleP2PMarketOrders(ctx);
  }

  async handleP2PTopTraders(ctx) {
    return this.p2pHandler.handleP2PTopTraders(ctx);
  }

  async handleP2PMyData(ctx) {
    return this.p2pHandler.handleP2PMyData(ctx);
  }
  
  // Handle real-time price refresh
  async handlePriceRefresh(ctx, orderType) {
    return this.p2pHandler.handlePriceRefresh(ctx, orderType);
  }

  // Delegate P2P data operations
  async handleP2PEditData(ctx) {
    return this.dataHandler.handleP2PEditData(ctx);
  }

  async handleP2PEditFullName(ctx) {
    return this.dataHandler.handleP2PEditFullName(ctx);
  }

  async handleP2PEditPaymentMethods(ctx) {
    return this.dataHandler.handleP2PEditPaymentMethods(ctx);
  }

  async handleP2PToggleBank(ctx, bankCode) {
    return this.dataHandler.handleP2PToggleBank(ctx, bankCode);
  }

  async handleP2PSavePaymentMethods(ctx) {
    return this.dataHandler.handleP2PSavePaymentMethods(ctx);
  }

  async handleP2PEditContact(ctx) {
    return this.dataHandler.handleP2PEditContact(ctx);
  }

  async handleP2PEditConditions(ctx) {
    return this.dataHandler.handleP2PEditConditions(ctx);
  }

  async handleP2PToggleUseInOrders(ctx) {
    return this.dataHandler.handleP2PToggleUseInOrders(ctx);
  }

  async handleP2PBuyerView(ctx) {
    return this.dataHandler.handleP2PBuyerView(ctx);
  }

  async processP2POrder(ctx, orderData, orderType) {
    return this.p2pHandler.processP2POrder(ctx, orderData, orderType);
  }

  async processUserMessage(ctx, text) {
    return this.p2pHandler.processUserMessage(ctx, text);
  }

  // Delegate P2P orders operations
  async handleP2PBuyOrders(ctx, page) {
    return this.ordersHandler.handleP2PBuyOrders(ctx, page);
  }

  async handleP2PSellOrders(ctx, page) {
    return this.ordersHandler.handleP2PSellOrders(ctx, page);
  }

  async handleP2PMyOrders(ctx, page) {
    return this.ordersHandler.handleP2PMyOrders(ctx, page);
  }

  // Placeholder methods for future implementation
  async handleP2PAnalytics(ctx) {
    await ctx.reply('üöß –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  async handleUserMessaging(ctx, targetUserId) {
    await ctx.reply('üöß –§—É–Ω–∫—Ü–∏—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  async handleCancelOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Cancel the order using P2P service
      const p2pService = require('../services/p2pService');
      const cancelledOrder = await p2pService.cancelOrder(chatId, orderId);
      
      // Send simple success message
      await ctx.reply('‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!');
      
      // Automatically return to P2P exchange page
      const P2PHandler = require('./P2PHandler');
      const p2pHandler = new P2PHandler();
      await p2pHandler.handleP2PMenu(ctx);
      
    } catch (error) {
      console.error('Cancel order error:', error);
      
      // Handle specific error cases
      if (error.message === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω') {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      } else if (error.message === '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω') {
        await ctx.reply('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.');
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞.');
      }
    }
  }

  async handleP2POrderConfirmation(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const sessionManager = require('./SessionManager');
      const pendingOrder = sessionManager.getPendingP2POrder(chatId);
      
      if (!pendingOrder) {
        return await ctx.reply('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä –∑–∞–Ω–æ–≤–æ.');
      }
      
      const { orderType, amount, pricePerToken, minAmount, maxAmount } = pendingOrder;
      
      // Validate user profile completion before order creation
      const validation = await this.dataHandler.validateUserForP2POperations(chatId);
      
      if (!validation.valid) {
        const keyboard = Markup.inlineKeyboard(validation.keyboard || [[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]]);
        return await ctx.reply(validation.message, keyboard);
      }
      
      // Get user
      const { User } = require('../database/models');
      const user = await User.findOne({ chatId });
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Check wallet
      const walletService = require('../services/walletService');
      const walletInfo = await walletService.getUserWallet(chatId);
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫.');
      }
      
      // For sell orders, check CES balance
      if (orderType === 'sell') {
        if (walletInfo.cesBalance < amount) {
          return await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES —Ç–æ–∫–µ–Ω–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${walletInfo.cesBalance.toFixed(4)} CES`);
        }
      }
      
      // Create order
      const p2pService = require('../services/p2pService');
      let order;
      
      try {
        if (orderType === 'buy') {
          order = await p2pService.createBuyOrder(chatId, amount, pricePerToken, minAmount, maxAmount);
        } else {
          // Get payment methods for sell order
          const paymentMethods = user.p2pProfile?.paymentMethods?.filter(pm => pm.isActive) || [];
          order = await p2pService.createSellOrder(chatId, amount, pricePerToken, paymentMethods, minAmount, maxAmount);
        }
      } catch (error) {
        console.error('Order creation error:', error);
        return await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: ${error.message}`);
      }
      
      // Clear pending order from session
      sessionManager.clearUserSession(chatId);
      
      // Send simple success message
      await ctx.reply('‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      
      // Automatically return to P2P exchange page
      const P2PHandler = require('./P2PHandler');
      const p2pHandler = new P2PHandler();
      await p2pHandler.handleP2PMenu(ctx);
      
    } catch (error) {
      console.error('P2P order confirmation error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞.');
    }
  }

  async handleP2PMyProfile(ctx) {
    await ctx.reply('üöß –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  async handleCreateOrderWithUser(ctx, userId) {
    await ctx.reply('üöß –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  async handleCreateBuyOrderWithUser(ctx, userId) {
    await ctx.reply('üöß –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  async handleCreateSellOrderWithUser(ctx, userId) {
    await ctx.reply('üöß –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  async handleConfirmCancelOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Cancel the order using P2P service
      const p2pService = require('../services/p2pService');
      const cancelledOrder = await p2pService.cancelOrder(chatId, orderId);
      
      // Send simple success message
      await ctx.reply('‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!');
      
      // Automatically return to P2P exchange page
      const P2PHandler = require('./P2PHandler');
      const p2pHandler = new P2PHandler();
      await p2pHandler.handleP2PMenu(ctx);
      
    } catch (error) {
      console.error('Confirm cancel order error:', error);
      
      // Handle specific error cases
      if (error.message === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω') {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      } else if (error.message === '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω') {
        await ctx.reply('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.');
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞.');
      }
    }
  }

  async handleP2PUserProfile(ctx, userId) {
    await ctx.reply('üöß –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  async handleEnterAmount(ctx, userId) {
    await ctx.reply('üöß –§—É–Ω–∫—Ü–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  async handleContinueSellOrder(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const sessionManager = require('./SessionManager');
      const buyOrderData = sessionManager.getSessionData(chatId, 'currentBuyOrder');
      
      if (!buyOrderData) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      const message = `üí∞ –í–í–û–î –ö–û–õ–ò–ß–ï–°–¢–í–ê\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–¶–µ–Ω–∞: ${buyOrderData.pricePerToken.toFixed(2)} ‚ÇΩ –∑–∞ CES\n` +
                     `–î–æ—Å—Ç—É–ø–Ω–æ: ${buyOrderData.availableAmount.toFixed(2)} CES\n` +
                     `–õ–∏–º–∏—Ç—ã: ${buyOrderData.minAmount}-${buyOrderData.maxAmount} CES\n\n` +
                     `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CES:`;
      
      sessionManager.setSessionData(chatId, 'waitingForCESAmount', true);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_sell_orders')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.');
    }
  }

  async handleBuyOrderDetails(ctx, userId, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –º–µ–π–∫–µ—Ä–∞–º–∏
      const validation = await this.dataHandler.validateUserForP2POperations(chatId);
      
      if (!validation.valid) {
        const keyboard = Markup.inlineKeyboard(validation.keyboard || [[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_sell_orders')]]);
        return await ctx.reply(validation.message, keyboard);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –º–µ–π–∫–µ—Ä–∞ (–æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É CES)
      const { P2POrder, User } = require('../database/models');
      const reputationService = require('../services/reputationService');
      
      const buyOrder = await P2POrder.findById(orderId).populate('userId');
      if (!buyOrder || buyOrder.type !== 'buy' || buyOrder.status !== 'active') {
        return await ctx.reply('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.');
      }
      
      const maker = buyOrder.userId; // –ú–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å CES)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –æ—Ä–¥–µ—Ä–æ–º
      const currentUser = await User.findOne({ chatId });
      if (!currentUser) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      if (maker._id.toString() === currentUser._id.toString()) {
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_sell_orders')]
        ]);
        return await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä', keyboard);
      }
      
      const stats = await reputationService.getStandardizedUserStats(maker._id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ–π–∫–µ—Ä–∞
      let makerName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      if (maker.p2pProfile && maker.p2pProfile.fullName) {
        makerName = maker.p2pProfile.fullName;
      } else if (maker.firstName) {
        makerName = maker.firstName;
        if (maker.lastName) {
          makerName += ` ${maker.lastName}`;
        }
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
      const minAmount = buyOrder.minTradeAmount || 1;
      const maxAmount = Math.min(buyOrder.maxTradeAmount || buyOrder.remainingAmount, buyOrder.remainingAmount);
      const minRubles = (minAmount * buyOrder.pricePerToken).toFixed(2);
      const maxRubles = (maxAmount * buyOrder.pricePerToken).toFixed(2);
      
      // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –º–µ–π–∫–µ—Ä–∞
      const makerConditions = (maker.p2pProfile && maker.p2pProfile.makerConditions) ? 
                              maker.p2pProfile.makerConditions : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –º–µ–π–∫–µ—Ä–∞
      let paymentMethods = [];
      if (maker.p2pProfile && maker.p2pProfile.paymentMethods) {
        paymentMethods = maker.p2pProfile.paymentMethods.filter(pm => pm.isActive && pm.cardNumber);
      }

      const message = `–¶–µ–Ω–∞: ${buyOrder.pricePerToken.toFixed(2)} ‚ÇΩ –∑–∞ CES\n` +
                     `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${buyOrder.remainingAmount.toFixed(2)} CES\n` +
                     `–õ–∏–º–∏—Ç—ã: ${minRubles}-${maxRubles} ‚ÇΩ\n` +
                     `–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥\n` +
                     `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã: ${buyOrder.tradeTimeLimit || 30} –º–∏–Ω.\n\n` +
                     `–£—Å–ª–æ–≤–∏—è –º–µ–π–∫–µ—Ä–∞:\n` +
                     `${makerConditions}\n\n` +
                     `–°–≤–µ–¥–µ–Ω–∏—è –æ –º–µ–π–∫–µ—Ä–µ:\n` +
                     `${makerName}\n` +
                     `–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ 30 –¥–Ω–µ–π: ${stats.ordersLast30Days} —à—Ç.\n` +
                     `–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 30 –¥–Ω–µ–π: ${stats.completionRateLast30Days}%\n` +
                     `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞: ${stats.avgTransferTime} –º–∏–Ω.\n` +
                     `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: ${stats.avgPaymentTime} –º–∏–Ω.\n` +
                     `–†–µ–π—Ç–∏–Ω–≥: ${stats.rating}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–µ—Å—Å–∏–∏
      const sessionManager = require('./SessionManager');
      sessionManager.setSessionData(chatId, 'currentBuyOrder', {
        buyOrderId: buyOrder._id,
        makerId: maker._id,
        makerChatId: maker.chatId,
        pricePerToken: buyOrder.pricePerToken,
        availableAmount: buyOrder.remainingAmount,
        minAmount: minAmount,
        maxAmount: maxAmount,
        minRubles: parseFloat(minRubles),
        maxRubles: parseFloat(maxRubles),
        paymentMethods: paymentMethods,
        tradeTimeLimit: buyOrder.tradeTimeLimit || 30
      });
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue_sell_order')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_sell_orders')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞.');
    }
  }

  async handleSellOrderDetails(ctx, userId, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –º–µ–π–∫–µ—Ä–∞–º–∏
      if (this.dataHandler) {
        const validation = await this.dataHandler.validateUserForP2POperations(chatId);
        
        if (!validation.valid) {
          const keyboard = Markup.inlineKeyboard(validation.keyboard || [[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_sell_orders')]]);
          return await ctx.reply(validation.message, keyboard);
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –º–µ–π–∫–µ—Ä–∞ (–æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É CES - –º–µ–π–∫–µ—Ä —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å)
      const { P2POrder, User } = require('../database/models');
      const reputationService = require('../services/reputationService');
      
      const buyOrder = await P2POrder.findById(orderId).populate('userId');
      if (!buyOrder || buyOrder.type !== 'buy' || buyOrder.status !== 'active') {
        return await ctx.reply('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.');
      }
      
      const maker = buyOrder.userId; // –ú–µ–π–∫–µ—Ä (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å CES)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –æ—Ä–¥–µ—Ä–æ–º
      const currentUser = await User.findOne({ chatId });
      if (!currentUser) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      if (maker._id.toString() === currentUser._id.toString()) {
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_sell_orders')]
        ]);
        return await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä', keyboard);
      }
      
      const stats = await reputationService.getStandardizedUserStats(maker._id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ–π–∫–µ—Ä–∞
      let makerName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      if (maker.p2pProfile && maker.p2pProfile.fullName) {
        makerName = maker.p2pProfile.fullName;
      } else if (maker.firstName) {
        makerName = maker.firstName;
        if (maker.lastName) {
          makerName += ` ${maker.lastName}`;
        }
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
      const minAmount = buyOrder.minTradeAmount || 1;
      const maxAmount = Math.min(buyOrder.maxTradeAmount || buyOrder.remainingAmount, buyOrder.remainingAmount);
      const minRubles = (minAmount * buyOrder.pricePerToken).toFixed(2);
      const maxRubles = (maxAmount * buyOrder.pricePerToken).toFixed(2);
      
      // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –º–µ–π–∫–µ—Ä–∞
      const makerConditions = (maker.p2pProfile && maker.p2pProfile.makerConditions) ? 
                              maker.p2pProfile.makerConditions : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –º–µ–π–∫–µ—Ä–∞
      let paymentMethods = [];
      if (maker.p2pProfile && maker.p2pProfile.paymentMethods) {
        paymentMethods = maker.p2pProfile.paymentMethods.filter(pm => pm.isActive && pm.cardNumber);
      }
      
      const message = `–¶–µ–Ω–∞: ${buyOrder.pricePerToken.toFixed(2)} ‚ÇΩ –∑–∞ CES\n` +
                     `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${buyOrder.remainingAmount.toFixed(2)} CES\n` +
                     `–õ–∏–º–∏—Ç—ã: ${minRubles}-${maxRubles} ‚ÇΩ\n` +
                     `–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥\n` +
                     `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã: ${buyOrder.tradeTimeLimit || 30} –º–∏–Ω.\n\n` +
                     `–£—Å–ª–æ–≤–∏—è –º–µ–π–∫–µ—Ä–∞:\n` +
                     `${makerConditions}\n\n` +
                     `–°–≤–µ–¥–µ–Ω–∏—è –æ –º–µ–π–∫–µ—Ä–µ:\n` +
                     `${makerName}\n` +
                     `–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ 30 –¥–Ω–µ–π: ${stats.ordersLast30Days} —à—Ç.\n` +
                     `–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 30 –¥–Ω–µ–π: ${stats.completionRateLast30Days}%\n` +
                     `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞: ${stats.avgTransferTime} –º–∏–Ω.\n` +
                     `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: ${stats.avgPaymentTime} –º–∏–Ω.\n` +
                     `–†–µ–π—Ç–∏–Ω–≥: ${stats.rating}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–µ—Å—Å–∏–∏
      const sessionManager = require('./SessionManager');
      sessionManager.setSessionData(chatId, 'currentBuyOrder', {
        buyOrderId: buyOrder._id,
        makerId: maker._id,
        makerChatId: maker.chatId,
        pricePerToken: buyOrder.pricePerToken,
        availableAmount: buyOrder.remainingAmount,
        minAmount: minAmount,
        maxAmount: maxAmount,
        minRubles: parseFloat(minRubles),
        maxRubles: parseFloat(maxRubles),
        paymentMethods: paymentMethods,
        tradeTimeLimit: buyOrder.tradeTimeLimit || 30
      });
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue_sell_order')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_sell_orders')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞.');
    }
  }
  
  // New handlers for sell CES flow
  async handleContinueSellOrder(ctx) {
    const chatId = ctx.chat.id.toString();
    const sessionManager = require('./SessionManager');
    const orderData = sessionManager.getSessionData(chatId, 'currentBuyOrder');
    
    if (!orderData) {
      return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }
    
    const message = `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CES –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:\n\n` +
                   `–ú–∏–Ω–∏–º—É–º: ${orderData.minAmount} CES (${orderData.minRubles} ‚ÇΩ)\n` +
                   `–ú–∞–∫—Å–∏–º—É–º: ${orderData.maxAmount} CES (${orderData.maxRubles} ‚ÇΩ)`;
    
    sessionManager.setSessionData(chatId, 'waitingForAmount', true);
    
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_sell_orders')]]);
    await ctx.reply(message, keyboard);
  }

  async handleContinueBuyOrder(ctx) {
    const chatId = ctx.chat.id.toString();
    const sessionManager = require('./SessionManager');
    const orderData = sessionManager.getSessionData(chatId, 'currentSellOrder');
    
    if (!orderData) {
      return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }
    
    const message = `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CES –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n\n` +
                   `–ú–∏–Ω–∏–º—É–º: ${orderData.minAmount} CES\n` +
                   `–ú–∞–∫—Å–∏–º—É–º: ${orderData.maxAmount} CES`;
    
    sessionManager.setSessionData(chatId, 'waitingForBuyAmount', true);
    
    const keyboard = Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_buy_orders')]]);
    await ctx.reply(message, keyboard);
  }
  
  async handleCESAmountInput(ctx, amountText) {
    try {
      const chatId = ctx.chat.id.toString();
      const sessionManager = require('./SessionManager');
      const orderData = sessionManager.getSessionData(chatId, 'currentBuyOrder');
      
      if (!orderData) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      // Parse and validate amount
      const amount = parseFloat(amountText.replace(',', '.'));
      
      if (isNaN(amount) || amount <= 0) {
        return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
      }
      
      // Check against order limits
      if (amount < orderData.minAmount) {
        return await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${orderData.minAmount} CES`);
      }
      
      if (amount > orderData.maxAmount) {
        return await ctx.reply(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${orderData.maxAmount} CES`);
      }
      
      // Check user's CES balance
      const walletService = require('../services/walletService');
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (walletInfo.cesBalance < amount) {
        return await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES. –í–∞—à –±–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES`);
      }
      
      // Calculate transaction details
      const totalPrice = amount * orderData.pricePerToken;
      
      // Check against maker's ruble limits
      if (orderData.minRubles && totalPrice < orderData.minRubles) {
        return await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –º–µ–π–∫–µ—Ä–∞: ${orderData.minRubles.toFixed(2)} ‚ÇΩ`);
      }
      
      if (orderData.maxRubles && totalPrice > orderData.maxRubles) {
        return await ctx.reply(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –º–µ–π–∫–µ—Ä–∞: ${orderData.maxRubles.toFixed(2)} ‚ÇΩ`);
      }
      
      // Store confirmed amount in session
      sessionManager.setSessionData(chatId, 'confirmedAmount', amount);
      sessionManager.setSessionData(chatId, 'totalPrice', totalPrice);
      sessionManager.setSessionData(chatId, 'waitingForAmount', false);
      
      // Show confirmation screen
      const message = `–ü—Ä–æ–¥–∞–∂–∞ CES\n` +
                     `–°—É–º–º–∞ ${totalPrice.toFixed(2)} ‚ÇΩ\n` +
                     `–¶–µ–Ω–∞: ${orderData.pricePerToken.toFixed(2)} ‚ÇΩ\n` +
                     `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} CES\n` +
                     `–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: 0 %`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue_with_payment')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_amount_input')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('CES amount input error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã.');
    }
  }
  
  async handleConfirmSellAmount(ctx) {
    await ctx.reply('üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }
  
  async handleBackToAmountInput(ctx) {
    return this.handleContinueSellOrder(ctx);
  }
  
  async handleBackToAmountConfirmation(ctx) {
    const chatId = ctx.chat.id.toString();
    const sessionManager = require('./SessionManager');
    const orderData = sessionManager.getSessionData(chatId, 'currentBuyOrder');
    const confirmedAmount = sessionManager.getSessionData(chatId, 'confirmedAmount');
    const totalPrice = sessionManager.getSessionData(chatId, 'totalPrice');
    
    if (!orderData || !confirmedAmount || !totalPrice) {
      return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }
    
    // Show confirmation screen again
    const message = `–ü—Ä–æ–¥–∞–∂–∞ CES\n` +
                   `–°—É–º–º–∞ ${totalPrice.toFixed(2)} ‚ÇΩ\n` +
                   `–¶–µ–Ω–∞: ${orderData.pricePerToken.toFixed(2)} ‚ÇΩ\n` +
                   `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${confirmedAmount} CES\n` +
                   `–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: 0 %`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue_with_payment')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_amount_input')]
    ]);
    
    await ctx.reply(message, keyboard);
  }
  
  async handleContinueWithPayment(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const sessionManager = require('./SessionManager');
      const orderData = sessionManager.getSessionData(chatId, 'currentBuyOrder');
      const confirmedAmount = sessionManager.getSessionData(chatId, 'confirmedAmount');
      
      if (!orderData || !confirmedAmount) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      // Get available payment methods from maker
      const paymentMethods = orderData.paymentMethods || [];
      const activeMethods = paymentMethods.filter(pm => pm.isActive);
      
      if (activeMethods.length === 0) {
        return await ctx.reply('‚ùå –£ –º–µ–π–∫–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.');
      }
      
      const bankNames = {
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'vtb': '–í–¢–ë',
        'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
        'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
        'mkb': '–ú–ö–ë',
        'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
        'tbank': '–¢-–ë–∞–Ω–∫',
        'domrf': '–î–û–ú.–†–§',
        'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
        'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
        'rosbank': '–†–æ—Å–±–∞–Ω–∫'
      };
      
      const message = `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;
      
      // Create payment method buttons
      const paymentButtons = activeMethods.map(pm => [
        Markup.button.callback(bankNames[pm.bank] || pm.bank, `select_payment_${pm.bank}`)
      ]);
      
      // Add back button
      paymentButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_amount_confirmation')]);
      
      const keyboard = Markup.inlineKeyboard(paymentButtons);
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Continue with payment error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.');
    }
  }
  
  async handleSelectPayment(ctx, bankCode) {
    try {
      const chatId = ctx.chat.id.toString();
      const sessionManager = require('./SessionManager');
      const orderData = sessionManager.getSessionData(chatId, 'currentBuyOrder');
      const confirmedAmount = sessionManager.getSessionData(chatId, 'confirmedAmount');
      const totalPrice = sessionManager.getSessionData(chatId, 'totalPrice');
      
      if (!orderData || !confirmedAmount || !totalPrice) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      // Find selected payment method
      const selectedMethod = orderData.paymentMethods.find(pm => pm.bank === bankCode && pm.isActive);
      if (!selectedMethod) {
        return await ctx.reply('‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
      }
      
      // Store selected payment method
      sessionManager.setSessionData(chatId, 'selectedPaymentMethod', selectedMethod);
      
      // Generate order number
      const orderNumber = `CES${Date.now().toString().slice(-8)}`;
      const currentTime = new Date().toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
      
      sessionManager.setSessionData(chatId, 'orderNumber', orderNumber);
      
      const bankNames = {
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'vtb': '–í–¢–ë',
        'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
        'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
        'mkb': '–ú–ö–ë',
        'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
        'tbank': '–¢-–ë–∞–Ω–∫',
        'domrf': '–î–û–ú.–†–§',
        'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
        'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
        'rosbank': '–†–æ—Å–±–∞–Ω–∫'
      };
      
      const message = `–û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É\n` +
                     `‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†\n` +
                     `–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: ${orderNumber}\n` +
                     `–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${currentTime}\n` +
                     `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${confirmedAmount} CES\n` +
                     `–¶–µ–Ω–∞: ${orderData.pricePerToken.toFixed(2)} ‚ÇΩ\n` +
                     `–û–±—â–∞—è —Å—É–º–º–∞: ${totalPrice.toFixed(2)} ‚ÇΩ\n` +
                     `–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${bankNames[bankCode]}\n\n` +
                     `–ü—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç–µ–∂–∞:\n` +
                     `1. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏\n` +
                     `2. –ù–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ CES –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–µ—Ä–µ–≤–æ–¥—É\n` +
                     `3. –û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Å —Ç–æ–≥–æ –∂–µ —Å—á—ë—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n` +
                     `4. –ù–µ –æ—Ç–º–µ–Ω—è–π—Ç–µ —Å–¥–µ–ª–∫—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n` +
                     `5. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', 'make_payment')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_trade')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Select payment error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞.');
    }
  }
  
  async handleBackToPaymentSelection(ctx) {
    return this.handleContinueWithPayment(ctx);
  }
  
  async handleMakePayment(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const sessionManager = require('./SessionManager');
      const orderData = sessionManager.getSessionData(chatId, 'currentBuyOrder');
      const confirmedAmount = sessionManager.getSessionData(chatId, 'confirmedAmount');
      const totalPrice = sessionManager.getSessionData(chatId, 'totalPrice');
      const selectedPaymentMethod = sessionManager.getSessionData(chatId, 'selectedPaymentMethod');
      const orderNumber = sessionManager.getSessionData(chatId, 'orderNumber');
      
      if (!orderData || !confirmedAmount || !totalPrice || !selectedPaymentMethod || !orderNumber) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      // Create trade in P2P service and escrow CES tokens
      const p2pService = require('../services/p2pService');
      const { User } = require('../database/models');
      
      const buyer = await User.findById(orderData.makerId);
      const seller = await User.findOne({ chatId });
      
      if (!buyer || !seller) {
        return await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      }
      
      // Create P2P trade with escrow
      const tradeResult = await p2pService.createTradeWithEscrow({
        buyerChatId: buyer.chatId,
        sellerChatId: seller.chatId,
        cesAmount: confirmedAmount,
        pricePerToken: orderData.pricePerToken,
        totalPrice: totalPrice,
        paymentMethod: selectedPaymentMethod,
        tradeTimeLimit: orderData.tradeTimeLimit || 30,
        orderNumber: orderNumber,
        buyOrderId: orderData.buyOrderId // Include the buy order ID
      });
      
      if (!tradeResult.success) {
        return await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: ${tradeResult.error}`);
      }
      
      // Store trade ID in session
      sessionManager.setSessionData(chatId, 'tradeId', tradeResult.tradeId);
      
      // Set payment timer (30 minutes)
      const timeLimit = orderData.tradeTimeLimit || 30;
      const expiryTime = new Date(Date.now() + timeLimit * 60 * 1000);
      const expiryTimeStr = expiryTime.toLocaleTimeString('ru-RU', {
        timeZone: 'Europe/Moscow',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      sessionManager.setSessionData(chatId, 'paymentExpiryTime', expiryTime.getTime());
      
      // Get maker's payment details
      let makerName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      if (buyer.p2pProfile && buyer.p2pProfile.fullName) {
        makerName = buyer.p2pProfile.fullName;
      } else if (buyer.firstName) {
        makerName = buyer.firstName;
        if (buyer.lastName) {
          makerName += ` ${buyer.lastName}`;
        }
      }
      
      const bankNames = {
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'vtb': '–í–¢–ë',
        'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
        'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
        'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
        'mkb': '–ú–ö–ë',
        'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
        'tbank': '–¢-–ë–∞–Ω–∫',
        'domrf': '–î–û–ú.–†–§',
        'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
        'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
        'rosbank': '–†–æ—Å–±–∞–Ω–∫'
      };
      
      // Display full card number for payment
      let displayCardNumber = selectedPaymentMethod.cardNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      
      const message = `üí≥ –û–ü–õ–ê–¢–ê\n` +
                     `‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†\n` +
                     `–û—Ä–¥–µ—Ä: ${orderNumber}\n` +
                     `–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: ${timeLimit} –º–∏–Ω. (–¥–æ ${expiryTimeStr})\n` +
                     `–°—É–º–º–∞: ${totalPrice.toFixed(2)} ‚ÇΩ\n\n` +
                     `–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n` +
                     `–ë–∞–Ω–∫: ${bankNames[selectedPaymentMethod.bank]}\n` +
                     `–ö–∞—Ä—Ç–∞: ${displayCardNumber}\n` +
                     `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${makerName}\n\n` +
                     `‚ö†Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.\n` +
                     `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü–ª–∞—Ç—ë–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω".`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–ª–∞—Ç—ë–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'payment_completed')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', 'cancel_payment')]
      ]);
      
      await ctx.reply(message, keyboard);
      
      // Schedule automatic cancellation
      setTimeout(async () => {
        try {
          const currentSession = sessionManager.getSessionData(chatId, 'tradeId');
          if (currentSession === tradeResult.tradeId) {
            // Trade is still active, cancel it
            await p2pService.cancelTradeWithTimeout(tradeResult.tradeId);
            sessionManager.clearUserSession(chatId);
            
            await ctx.reply('‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –°–¥–µ–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. CES –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.');
          }
        } catch (timeoutError) {
          console.error('Timeout cancellation error:', timeoutError);
        }
      }, timeLimit * 60 * 1000);
      
    } catch (error) {
      console.error('Make payment error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.');
    }
  }
  
  async handleCancelTrade(ctx) {
    await ctx.reply('üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }
  
  async handlePaymentCompleted(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const sessionManager = require('./SessionManager');
      const tradeId = sessionManager.getSessionData(chatId, 'tradeId');
      const orderNumber = sessionManager.getSessionData(chatId, 'orderNumber');
      
      if (!tradeId || !orderNumber) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      // Mark payment as completed in P2P service
      const p2pService = require('../services/p2pService');
      const result = await p2pService.markPaymentCompleted(tradeId, chatId);
      
      if (!result.success) {
        return await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
      
      // Clear session
      sessionManager.clearUserSession(chatId);
      
      const message = `‚úÖ –ü–õ–ê–¢–Å–ñ –û–¢–ú–ï–ß–ï–ù –ö–ê–ö –í–´–ü–û–õ–ù–ï–ù–ù–´–ô\n` +
                     `‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†\n` +
                     `–û—Ä–¥–µ—Ä: ${orderNumber}\n\n` +
                     `–ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ.\n` +
                     `–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è CES —Å —ç—Å–∫—Ä–æ—É.\n\n` +
                     `–°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Payment completed error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.');
    }
  }
  
  async handleCancelPayment(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const sessionManager = require('./SessionManager');
      const tradeId = sessionManager.getSessionData(chatId, 'tradeId');
      const orderNumber = sessionManager.getSessionData(chatId, 'orderNumber');
      
      if (!tradeId || !orderNumber) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }
      
      // Cancel trade and release escrow
      const p2pService = require('../services/p2pService');
      const result = await p2pService.cancelTradeByUser(tradeId, chatId);
      
      if (!result.success) {
        return await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ${result.error}`);
      }
      
      // Clear session
      sessionManager.clearUserSession(chatId);
      
      const message = `‚ùå –°–î–ï–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê\n` +
                     `‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†‚Å†\n` +
                     `–û—Ä–¥–µ—Ä: ${orderNumber}\n\n` +
                     `–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n` +
                     `CES –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Cancel payment error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏.');
    }
  }
}

module.exports = MessageHandler;