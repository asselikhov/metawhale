/**
 * Message Handlers
 * Handles all Telegram bot message and callback processing
 */

const { Markup } = require('telegraf');
const priceService = require('../services/priceService');
const walletService = require('../services/walletService');
const p2pService = require('../services/p2pService');
const { User, PriceHistory, P2PTrade, isDatabaseConnected } = require('../database/models');

// Simple session storage for user states
const userSessions = new Map();

class MessageHandler {
  // Get or create user session
  getUserSession(chatId) {
    if (!userSessions.has(chatId)) {
      console.log(`üÜï Creating new session for user ${chatId}`);
      userSessions.set(chatId, {});
    } else {
      console.log(`üîÑ Using existing session for user ${chatId}`);
    }
    return userSessions.get(chatId);
  }

  // Clear user session
  clearUserSession(chatId) {
    console.log(`üóë Clearing session for user ${chatId}`);
    userSessions.delete(chatId);
  }

  // Set session data
  setSessionData(chatId, key, value) {
    const session = this.getUserSession(chatId);
    console.log(`üíæ Setting session data for user ${chatId}: ${key} = ${JSON.stringify(value)}`);
    session[key] = value;
  }

  // Get session data
  getSessionData(chatId, key) {
    const session = this.getUserSession(chatId);
    const value = session[key];
    console.log(`üîç Getting session data for user ${chatId}: ${key} = ${JSON.stringify(value)}`);
    return value;
  }
  // Handle /start command
  async handleStart(ctx) {
    try {
      console.log('üöÄ handleStart called');
      
      const chatId = ctx.chat.id.toString();
      console.log(`üöÄ Handling /start command for user ${chatId}`);
      
      // Register or update user in database (if available)
      let user = null;
      if (isDatabaseConnected()) {
        try {
          user = await User.findOneAndUpdate(
            { chatId },
            {
              username: ctx.from.username,
              firstName: ctx.from.first_name,
              lastName: ctx.from.last_name,
              isActive: true
            },
            { upsert: true, new: true }
          );
          console.log(`üë§ User registered/updated in database:`, user ? `User ${user.username || user.firstName}` : 'No user data');
        } catch (dbError) {
          console.error('Database error during user registration:', dbError);
        }
      }
      
      const welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rustling Grass üåæ assistant !';
      console.log(`üí¨ Welcome message: ${welcomeMessage}`);
      
      // Main menu with regular keyboard buttons (only 2 buttons as requested)
      const mainMenu = Markup.keyboard([
        ['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üîÑ P2P –ë–∏—Ä–∂–∞']
      ]).resize();
      
      console.log(`üì§ Sending welcome message to user ${chatId}`);
      console.log(`‚å® Keyboard markup configured`);
      
      const result = await ctx.reply(welcomeMessage, mainMenu);
      console.log(`‚úÖ Welcome message sent successfully to user ${chatId}`);
      
    } catch (error) {
      console.error('Start command error:', error);
      try {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
  }

  // Handle price command and button with immediate response
  async handlePrice(ctx) {
    try {
      console.log('üí∞ handlePrice called');
      
      // Send immediate acknowledgment
      const sentMessage = await ctx.reply('‚è≥ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É...');
      console.log('üí∞ Price command acknowledgment sent');
      
      // Process price data in background and update the message
      this.processPriceData(ctx, sentMessage);
      
    } catch (error) {
      console.error('Error sending price to user:', error);
      try {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É CES –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
  }

  // Process price data in background
  async processPriceData(ctx, sentMessage) {
    try {
      const priceData = await priceService.getCESPrice();
      
      // Save data to database (only when calling /price and if database is available)
      if (isDatabaseConnected() && !priceData.cached) {
        try {
          await new PriceHistory(priceData).save();
          console.log(`üíæ Price data saved: $${priceData.price.toFixed(2)} | ATH: $${priceData.ath.toFixed(2)}`);
        } catch (dbError) {
          console.error('Database error during price saving:', dbError);
        }
      }
      
      // Determine emoji for price change
      const changeEmoji = priceData.change24h >= 0 ? 'üî∫' : 'üîª';
      const changeSign = priceData.change24h >= 0 ? '+' : '';
      
      // Check if current price is ATH
      const isNewATH = priceData.price >= priceData.ath;
      const athDisplay = isNewATH ? `üèÜ $ ${priceData.ath.toFixed(2)}` : `$ ${priceData.ath.toFixed(2)}`;
      
      // Source indicator (only for database)
      const sourceEmoji = priceData.source === 'database' ? 'üóÑÔ∏è' : '';
      
      // Message format exactly as in example
      const message = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ CES: $ ${priceData.price.toFixed(2)} | ‚ÇΩ ${priceData.priceRub.toFixed(2)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${priceData.change24h.toFixed(1)}% ‚Ä¢ üÖ• $ ${priceService.formatNumber(priceData.volume24h).replace(/(\d+\.\d{2})K/, (match) => {
        const num = parseFloat(match.replace('K', ''));
        return num.toFixed(1) + 'K';
      })} ‚Ä¢ üÖêüÖ£üÖó ${athDisplay}`;
      
      // Edit the original message instead of sending new one
      await ctx.telegram.editMessageText(
        sentMessage.chat.id,
        sentMessage.message_id,
        null,
        message
      );
      
    } catch (error) {
      console.error('Error processing price data:', error);
      // Update the message with error
      try {
        await ctx.telegram.editMessageText(
          sentMessage.chat.id,
          sentMessage.message_id,
          null,
          '‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É CES –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
      } catch (editError) {
        console.error('Error editing message:', editError);
        // If editing fails, send a new message
        try {
          await ctx.reply('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É CES –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } catch (replyError) {
          console.error('Failed to send error message:', replyError);
        }
      }
    }
  }

  // Handle text messages from regular keyboard buttons
  async handleTextMessage(ctx) {
    try {
      console.log('üìù handleTextMessage called');
      
      const text = ctx.message.text;
      const chatId = ctx.chat.id.toString();
      
      console.log(`üìù Processing text message from ${chatId}: "${text}"`);
      
      // Check if user is in transfer mode
      const awaitingTransfer = this.getSessionData(chatId, 'awaitingTransfer');
      if (awaitingTransfer) {
        const transferType = this.getSessionData(chatId, 'transferType') || 'CES';
        this.clearUserSession(chatId);
        return await this.processTransferCommand(ctx, text, transferType);
      }
      
      // Check if user is in P2P order mode
      const awaitingP2POrder = this.getSessionData(chatId, 'awaitingP2POrder');
      if (awaitingP2POrder) {
        const orderType = this.getSessionData(chatId, 'p2pOrderType') || 'buy';
        console.log(`üîÑ Processing P2P order: type=${orderType}, text="${text}"`);
        this.clearUserSession(chatId);
        return await this.processP2POrder(ctx, text, orderType);
      }
      
      // Check if user is in user messaging mode
      const awaitingUserMessage = this.getSessionData(chatId, 'awaitingUserMessage');
      if (awaitingUserMessage) {
        console.log(`üîÑ Processing user message: text="${text}"`);
        this.clearUserSession(chatId);
        return await this.processUserMessage(ctx, text);
      }
      
      if (text.includes('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')) {
        console.log(`üè† Handling Personal Cabinet request from ${chatId}`);
        return await this.handlePersonalCabinetText(ctx);
      }
      
      if (text.includes('P2P –ë–∏—Ä–∂–∞') || text.includes('üîÑ P2P')) {
        console.log(`üîÑ Handling P2P Menu request from ${chatId}`);
        return await this.handleP2PMenu(ctx);
      }
      
      // Check if message looks like a transfer command (address amount)
      const transferPattern = /^0x[a-fA-F0-9]{40}\s+\d+\.?\d*$/;
      if (transferPattern.test(text.trim())) {
        return await this.processTransferCommand(ctx, text, 'CES');
      }
      
      // Check if message looks like a P2P order (amount price)
      const p2pOrderPattern = /^\d+[,.]?\d*\s+\d+[,.]?\d*$/;
      if (p2pOrderPattern.test(text.trim())) {
        console.log(`ü§î Message looks like P2P order but no session found: "${text}"`);
        return await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (–ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞) —á–µ—Ä–µ–∑ –º–µ–Ω—é P2P.\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "P2P" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ.');
      }
      
      // Default response for unknown text
      console.log(`‚ùì Unknown command from ${chatId}: "${text}"`);
      await ctx.reply('üòï –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start');
      
    } catch (error) {
      console.error('Text message handler error:', error);
      try {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
  }

  // Handle Personal Cabinet from text message
  async handlePersonalCabinetText(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üè† Processing Personal Cabinet request for user ${chatId}`);
      
      let walletInfo = null;
      if (isDatabaseConnected()) {
        try {
          walletInfo = await walletService.getUserWallet(chatId);
        } catch (dbError) {
          console.error('Database error during wallet retrieval:', dbError);
        }
      }
      
      // If database is not available or user not found, create a mock wallet info
      if (!walletInfo) {
        walletInfo = {
          hasWallet: false
        };
      }
      
      if (!walletInfo) {
        console.log(`‚ùå User ${chatId} not found`);
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
      }
      
      // Header as requested
      let message = 'üë§ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢\n' +
                   '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n';
      
      if (walletInfo.hasWallet) {
        console.log(`üíº User ${chatId} has wallet, showing wallet info`);
        // Get current price data for both tokens
        const [cesData, polData] = await Promise.all([
          priceService.getCESPrice(),
          priceService.getPOLPrice()
        ]);
      
        const cesTokenPrice = cesData ? cesData.price : 0;
        const cesTokenPriceRub = cesData ? cesData.priceRub : 0;
        const polTokenPrice = polData ? polData.price : 0.45;
        const polTokenPriceRub = polData ? polData.priceRub : 45.0;
      
        // Calculate total value of tokens on wallet
        const cesTotalUsd = (walletInfo.cesBalance * cesTokenPrice).toFixed(2);
        const cesTotalRub = (walletInfo.cesBalance * cesTokenPriceRub).toFixed(2);
        const polTotalUsd = (walletInfo.polBalance * polTokenPrice).toFixed(2);
        const polTotalRub = (walletInfo.polBalance * polTokenPriceRub).toFixed(2);
      
        // Format as requested
        message += `–ë–∞–ª–∞–Ω—Å CES: ${walletInfo.cesBalance.toFixed(4)} ‚Ä¢ $ ${cesTotalUsd} ‚Ä¢ ‚ÇΩ ${cesTotalRub}\n`;
        message += `–ë–∞–ª–∞–Ω—Å POL: ${walletInfo.polBalance.toFixed(4)} ‚Ä¢ $ ${polTotalUsd} ‚Ä¢ ‚ÇΩ ${polTotalRub}\n`;
      
        // Removed the refresh button as requested
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üí≥ –ö–æ—à–µ–ª–µ–∫', 'wallet_details')],
          [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–æ–¥', 'transfer_menu')]
        ]);
      
        await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
      } else {
        console.log(`‚ö†Ô∏è User ${chatId} has no wallet, showing wallet creation prompt`);
        message += '‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω\n\n';
        message += 'üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ CES –∏ POL';
      
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫', 'create_wallet')]
        ]);
      
        await ctx.reply(message, keyboard);
      }
      
    } catch (error) {
      console.error('Error showing personal cabinet:', error);
      try {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
      }
    }
  }

  // Handle user profile
  async handleUserProfile(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
      }
      
      let message = 'üë§ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢\n' +
                   '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n';
      
      if (walletInfo.hasWallet) {
        // Get current price data for both tokens
        const [cesData, polData] = await Promise.all([
          priceService.getCESPrice(),
          priceService.getPOLPrice()
        ]);
        
        const cesTokenPrice = cesData ? cesData.price : 0;
        const cesTokenPriceRub = cesData ? cesData.priceRub : 0;
        const polTokenPrice = polData ? polData.price : 0.45;
        const polTokenPriceRub = polData ? polData.priceRub : 45.0;
        
        // Calculate total value of tokens on wallet
        const cesTotalUsd = (walletInfo.cesBalance * cesTokenPrice).toFixed(2);
        const cesTotalRub = (walletInfo.cesBalance * cesTokenPriceRub).toFixed(2);
        const polTotalUsd = (walletInfo.polBalance * polTokenPrice).toFixed(2);
        const polTotalRub = (walletInfo.polBalance * polTokenPriceRub).toFixed(2);
        
        message += `–ë–∞–ª–∞–Ω—Å CES: ${walletInfo.cesBalance.toFixed(4)} ‚Ä¢ $ ${cesTotalUsd} ‚Ä¢ ‚ÇΩ ${cesTotalRub}\n`;
        message += `–ë–∞–ª–∞–Ω—Å POL: ${walletInfo.polBalance.toFixed(4)} ‚Ä¢ $ ${polTotalUsd} ‚Ä¢ ‚ÇΩ ${polTotalRub}\n`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üí≥ –ö–æ—à–µ–ª–µ–∫', 'wallet_details')],
          [Markup.button.callback('üí∏ –ü–µ—Ä–µ–≤–æ–¥', 'transfer_menu')],
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_balance')]
        ]);
        
        await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
        
      } else {
        message += '‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω\n\n';
        message += 'üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ CES –∏ POL';
        
        // Remove the –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é button
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫', 'create_wallet')]
        ]);
        
        await ctx.reply(message, keyboard);
      }
      
    } catch (error) {
      console.error('Error showing personal cabinet:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle wallet creation
  async handleCreateWallet(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletResult = await walletService.createUserWallet(chatId);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
      ]);
      
      await ctx.reply(
        `–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
        `–ê–¥—Ä–µ—Å: \`${walletResult.address}\`\n` +
        `–°–µ—Ç—å: Polygon\n\n` +
        `–í–∞–∂–Ω–æ: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ:\n` +
        `\`${walletResult.privateKey}\`\n\n` +
        `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!`,
        keyboard
      );
      
    } catch (error) {
      console.error('Wallet creation error:', error);
      await ctx.reply(`‚ùå ${error.message}`);
    }
  }

  // Handle wallet editing menu
  async handleWalletEdit(ctx) {
    try {
      const message = '‚öôÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞**\n\n' +
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîë –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á', 'show_private_key')],
        [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞', 'export_wallet')],
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', 'delete_wallet')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Wallet edit menu error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle wallet details view
  async handleWalletDetails(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);

      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.reply('‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }

      // Get private key for display
      const privateKey = await walletService.getUserPrivateKey(chatId);

      // Format as requested
      const message = 'üí≥ –ö–û–®–ï–õ–ï–ö\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                     `–ê–¥—Ä–µ—Å: \n${walletInfo.address}\n\n` +
                     `–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${privateKey}\n\n` +
                     `‚ö†Ô∏è –í–∞–∂–Ω–æ:\n` +
                     `–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ\n` +
                     `–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á\n` +
                     `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ –∫–æ—à–µ–ª—å–∫–∏`;

      // Simplified keyboard with only back button
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'personal_cabinet')]
      ]);

      await ctx.reply(message, keyboard);

    } catch (error) {
      console.error('Wallet details error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞.');
    }
  }

  // Handle transfer menu
  async handleTransferMenu(ctx) {
    try {
      const message = 'üí∏ –ü–ï–†–ï–í–û–î\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n';

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí∞ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ CES', 'send_ces_tokens')],
        [Markup.button.callback('üí∞ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ POL', 'send_pol_tokens')],
        [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è', 'transaction_history')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'personal_cabinet')]
      ]);

      await ctx.reply(message, keyboard);

    } catch (error) {
      console.error('Transfer menu error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤.');
    }
  }

  // Show private key
  async handleShowPrivateKey(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const privateKey = await walletService.getUserPrivateKey(chatId);
      
      const message = `üîë **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á**\n\n` +
                     `‚ö†Ô∏è **–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!** –ù–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á!\n\n` +
                     `üîê \`${privateKey}\``;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', 'edit_wallet')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Show private key error:', error);
      await ctx.reply(`‚ùå ${error.message}`);
    }
  }

  // Handle wallet export
  async handleExportWallet(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      const privateKey = await walletService.getUserPrivateKey(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.reply('‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const message = `üì§ **–≠–∫—Å–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞**\n\n` +
                     `üí≥ –ê–¥—Ä–µ—Å: \`${walletInfo.address}\`\n` +
                     `üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: \`${privateKey}\`\n\n` +
                     `‚ö†Ô∏è **–í–∞–∂–Ω–æ:**\n` +
                     `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ\n` +
                     `‚Ä¢ –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á\n` +
                     `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ –∫–æ—à–µ–ª—å–∫–∏`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', 'edit_wallet')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Export wallet error:', error);
      await ctx.reply(`‚ùå ${error.message}`);
    }
  }

  // Handle wallet deletion
  async handleDeleteWallet(ctx) {
    try {
      const message = `‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n` +
                     `üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫?\n\n` +
                     `‚ùó **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**\n` +
                     `‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n` +
                     `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å—Ä–µ–¥—Å—Ç–≤–∞–º –±—É–¥–µ—Ç —É—Ç—Ä–∞—á–µ–Ω`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'confirm_delete_wallet')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'edit_wallet')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Delete wallet confirmation error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  }

  // Confirm wallet deletion
  async handleConfirmDeleteWallet(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      await walletService.deleteUserWallet(chatId);
      
      const message = `‚úÖ **–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω**\n\n` +
                     `üóë –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ —É–¥–∞–ª–µ–Ω—ã\n` +
                     `üîÑ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π', 'create_wallet')],
        [Markup.button.callback('üîô –ö –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É', 'personal_cabinet')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Confirm delete wallet error:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
    }
  }

  // Handle P2P menu
  async handleP2PMenu(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üîÑ Handling P2P menu callback for user ${chatId}`);
      
      // Clear any existing session when entering P2P menu
      this.clearUserSession(chatId);
      
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        const message = '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞.\n\n' +
                       'üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è P2P —Ñ—É–Ω–∫—Ü–∏–π.';
        
        // Remove the "–°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫" button as it should only be in the personal cabinet
        const keyboard = Markup.inlineKeyboard([]);
        
        console.log(`üì§ Sending wallet creation message to user ${chatId} (callback version)`);
        return await ctx.reply(message, keyboard);
      }
      
      // Get user reputation data
      const reputationService = require('../services/reputationService');
      const user = await User.findOne({ chatId });
      const reputation = await reputationService.getUserReputation(user._id);
      
      // Get user profile details for trading volume
      const profileDetails = await reputationService.getUserProfileDetails(user._id);
      const userLevel = this.getUserLevelDisplayNew(reputation.trustScore);
      
      // Prepare message text in the exact format requested
      // Adding extra spacing to ensure text width matches button width
      const message = `üîÑ P2P –ë–ò–†–ñ–ê\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–†–µ–π—Ç–∏–Ω–≥: ${reputation.trustScore}/1000 ${userLevel.emoji}\n` +
                     `–û–±—ä–µ–º —Å–¥–µ–ª–æ–∫: ${(profileDetails.totalTradeVolume || 0).toLocaleString('ru-RU')} ‚ÇΩ\n` +
                     `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${reputation.completionRate}%\n` +
                     `–°–ø–æ—Ä–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${reputation.disputeRate}%\n` +
                     `–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${reputation.totalTrades}\n\n` +
                     `‚ö°Ô∏è –ë—ã—Å—Ç—Ä–æ | üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ | üìä –ü—Ä–æ–∑—Ä–∞—á–Ω–æ\n` +
                     `                         `;  // Extra spaces to match button width
      
      // Keyboard with buttons
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìà –ö—É–ø–∏—Ç—å CES', 'p2p_buy_ces'), Markup.button.callback('üìâ –ü—Ä–æ–¥–∞—Ç—å CES', 'p2p_sell_ces')],
        [Markup.button.callback('üìä –†—ã–Ω–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤', 'p2p_market_orders'), Markup.button.callback('üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä—ã', 'p2p_my_orders')],
        [Markup.button.callback('üèÜ –¢–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤', 'p2p_top_traders'), Markup.button.callback('üßÆ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'p2p_analytics')]
      ]);
      
      console.log(`üì§ Sending P2P menu text with buttons to user ${chatId}`);
      console.log(`üìù Message: ${message}`);
      console.log(`‚å® Keyboard: ${JSON.stringify(keyboard)}`);
      
      // Send text with buttons in one message
      await ctx.reply(message, keyboard);
      console.log(`‚úÖ Text with buttons sent successfully to user ${chatId}`);
      
    } catch (error) {
      console.error('P2P menu error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ P2P –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle user profile
  async handleP2PMyProfile(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Get reputation data
      const reputationService = require('../services/reputationService');
      const profileDetails = await reputationService.getUserProfileDetails(user._id);
      
      // Create visual progress bar for trust score
      const progressBar = this.createProgressBar(profileDetails.trustScoreProgress, 100, 20);
      
      // Format member since date
      const memberSinceDate = profileDetails.memberSince ? 
        profileDetails.memberSince.toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      // Format trading limits
      const maxTradeAmount = profileDetails.tradingLimits.maxTradeAmount.toLocaleString('ru-RU');
      const dailyLimit = profileDetails.tradingLimits.dailyLimit.toLocaleString('ru-RU');
      const monthlyLimit = profileDetails.tradingLimits.monthlyLimit.toLocaleString('ru-RU');
      
      // Create achievements section
      let achievementsSection = '';
      if (profileDetails.achievements.length > 0) {
        achievementsSection = '\nüèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n';
        profileDetails.achievements.forEach(achievement => {
          achievementsSection += `${achievement.emoji} **${achievement.name}** - ${achievement.description}\n`;
        });
      }
      
      // Create weekly activity section
      let activitySection = '\nüìÖ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:*\n';
      const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
      days.forEach(day => {
        const count = profileDetails.weeklyActivity[day] || 0;
        activitySection += `${day}: ${count} —Å–¥–µ–ª–æ–∫\n`;
      });
      
      const message = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${profileDetails.username}**\n\n` +
                     `üåü *–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${profileDetails.trustScore}/1000 (${profileDetails.userLevel.emoji} ${profileDetails.userLevel.name})*\n` +
                     `${progressBar} ${profileDetails.trustScoreProgress}%\n\n` +
                     `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${profileDetails.successRate}% (${profileDetails.completedTrades}/${profileDetails.tradesLast30Days})\n` +
                     `‚öñÔ∏è –°–ø–æ—Ä–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${profileDetails.disputeRate}% (${Math.round(profileDetails.tradesLast30Days * profileDetails.disputeRate / 100)})\n` +
                     `‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${profileDetails.avgResponseTime} –º–∏–Ω\n` +
                     `üí∞ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 30 –¥–Ω–µ–π: ${profileDetails.totalTradeVolume.toLocaleString('ru-RU')} ‚ÇΩ\n` +
                     `üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å: ${memberSinceDate}\n` +
                     `üèÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ${profileDetails.verificationStatus}\n\n` +
                     `üìä *–¢–æ—Ä–≥–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã:*\n` +
                     `üîπ –ú–∞–∫—Å. —Å–¥–µ–ª–∫–∞: ${maxTradeAmount} ‚ÇΩ\n` +
                     `üî∏ –°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç: ${dailyLimit} ‚ÇΩ\n` +
                     `üîπ –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç: ${monthlyLimit} ‚ÇΩ\n` +
                     achievementsSection +
                     activitySection;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ P2P', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Profile error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Create visual progress bar
  createProgressBar(value, max, width) {
    const progress = Math.round((value / max) * width);
    const filled = '‚ñà'.repeat(progress);
    const empty = '‚ñë'.repeat(width - progress);
    return `[${filled}${empty}]`;
  }

  // Handle user profile view for other users
  async handleUserPublicProfile(ctx, targetUserId) {
    try {
      const targetUser = await User.findById(targetUserId);
      if (!targetUser) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Get reputation data
      const reputationService = require('../services/reputationService');
      const profileDetails = await reputationService.getUserProfileDetails(targetUser._id);
      
      // Create visual progress bar for trust score
      const progressBar = this.createProgressBar(profileDetails.trustScoreProgress, 100, 15);
      
      // Format member since date
      const memberSinceDate = profileDetails.memberSince ? 
        profileDetails.memberSince.toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const message = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${profileDetails.username}**\n\n` +
                     `üåü *–†–µ–π—Ç–∏–Ω–≥: ${profileDetails.trustScore}/1000 (${profileDetails.userLevel.emoji} ${profileDetails.userLevel.name})*\n` +
                     `${progressBar} ${profileDetails.trustScoreProgress}%\n\n` +
                     `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${profileDetails.successRate}%\n` +
                     `‚öñÔ∏è –°–ø–æ—Ä–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${profileDetails.disputeRate}%\n` +
                     `‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${profileDetails.avgResponseTime} –º–∏–Ω\n` +
                     `üí∞ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 30 –¥–Ω–µ–π: ${profileDetails.totalTradeVolume.toLocaleString('ru-RU')} ‚ÇΩ\n` +
                     `üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å: ${memberSinceDate}\n` +
                     `üèÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ${profileDetails.verificationStatus}\n\n` +
                     `*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å', `message_user_${targetUserId}`)],
        [Markup.button.callback('üîÑ –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä', `create_order_with_${targetUserId}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Public profile error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  }

  // Handle back to main menu
  async handleBackToMenu(ctx) {
    try {
      const mainMenu = Markup.keyboard([
        ['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üîÑ P2P']
      ]).resize();
      
      await ctx.reply('üåæ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenu);
    } catch (error) {
      console.error('Back to menu error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
    }
  }

  // Handle user profile display for P2P trading
  async handleP2PUserProfile(ctx, targetUserId) {
    try {
      const targetUser = await User.findById(targetUserId);
      if (!targetUser) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Get reputation data
      const reputationService = require('../services/reputationService');
      const profileDetails = await reputationService.getUserProfileDetails(targetUser._id);
      
      // Get user's recent trades count (last 30 days)
      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
      const userTrades = await P2PTrade.find({
        $or: [
          { buyerId: targetUser._id },
          { sellerId: targetUser._id }
        ],
        createdAt: { $gte: thirtyDaysAgo }
      });
      
      const completedTrades = userTrades.filter(trade => trade.status === 'completed').length;
      const totalTrades = userTrades.length;
      const completionRate = totalTrades > 0 ? (completedTrades / totalTrades * 100).toFixed(1) : '100.0';
      
      // Calculate average response time (simplified)
      const avgResponseTime = '5'; // Placeholder - in a real implementation this would be calculated
      
      const username = targetUser.username || targetUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const userLevel = this.getUserLevelDisplayNew(profileDetails.trustScore);
      
      const message = `–£—Å–ª–æ–≤–∏—è –º–µ–π–∫–µ—Ä–∞:\n\n` +
                   `–°–≤–µ–¥–µ–Ω–∏—è –æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n` +
                   `–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞: @${username}\n` +
                   `–†–µ–π—Ç–∏–Ω–≥: ${completedTrades}/1000 ${userLevel.emoji}\n` +
                   `–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ –¥–Ω–µ–π: ${completedTrades} –û—Ä–¥–µ—Ä–∞\n` +
                   `–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 30 –¥–Ω–µ–π: ${completionRate}%\n` +
                   `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: ${avgResponseTime} –º–∏–Ω.`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É', `enter_amount_${targetUserId}`)],
        [Markup.button.callback('–ù–∞–∑–∞–¥', 'p2p_buy_orders')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('User profile error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  }

  // Refresh balance
  async handleRefreshBalance(ctx) {
    try {
      await this.handlePersonalCabinet(ctx);
    } catch (error) {
      // Handle "message not modified" error gracefully
      if (error.response && error.response.error_code === 400 && 
          error.response.description.includes('message is not modified')) {
        console.log('Ignoring "message not modified" error during refresh');
        // Message is already up to date, no need to show error
      } else {
        console.error('Refresh balance error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  }

  // Handle CES token transfer initiation
  async handleSendCESTokens(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);

      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
      }

      if (walletInfo.cesBalance <= 0) {
        const message = 'üí∞ –ü–ï–†–ï–í–û–î CES\n' +
                       '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                       '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n' +
                       `–í–∞—à –±–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES`;

        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'transfer_menu')]
        ]);

        return await ctx.reply(message, keyboard);
      }

      const message = 'üí∞ –ü–ï–†–ï–í–û–î CES\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                     `–î–æ—Å—Ç—É–ø–Ω–æ: ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                     'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
                     '–ê–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞ –°—É–º–º–∞\n\n' +
                     'üìù –ü—Ä–∏–º–µ—Ä:\n' +
                     '0x742d35Cc6734C0532925a3b8D4321F...89 10.5\n\n' +
                     'üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.001 CES';

      // Store state to handle next user message
      this.setSessionData(chatId, 'awaitingTransfer', true);
      this.setSessionData(chatId, 'transferType', 'CES');

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'transfer_menu')]
      ]);

      await ctx.reply(message, keyboard);

    } catch (error) {
      console.error('Error initiating CES transfer:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle POL token transfer initiation
  async handleSendPOLTokens(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);

      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
      }

      if (walletInfo.polBalance <= 0.001) {
        const message = 'üí∞ –ü–ï–†–ï–í–û–î POL\n' +
                       '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                       '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n' +
                       `–í–∞—à –±–∞–ª–∞–Ω—Å: ${walletInfo.polBalance.toFixed(4)} POL\n\n` +
                       'üí° –ú–∏–Ω–∏–º—É–º 0.001 POL –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏';

        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'transfer_menu')]
        ]);

        return await ctx.reply(message, keyboard);
      }

      const maxTransfer = (walletInfo.polBalance - 0.001).toFixed(4);
      const message = 'üí∞ –ü–ï–†–ï–í–û–î POL\n' +
                     '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                     `–î–æ—Å—Ç—É–ø–Ω–æ: ${maxTransfer} POL\n` +
                     `–í—Å–µ–≥–æ: ${walletInfo.polBalance.toFixed(4)} POL\n\n` +
                     'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
                     '–ê–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞ –°—É–º–º–∞\n\n' +
                     'üìù –ü—Ä–∏–º–µ—Ä:\n' +
                     '0x742d35Cc6734C0532925a3b8D4321F...89 0.1\n\n' +
                     'üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.001 POL\n' +
                     'üí° 0.001 POL –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏';

      // Store state to handle next user message
      this.setSessionData(chatId, 'awaitingTransfer', true);
      this.setSessionData(chatId, 'transferType', 'POL');

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'transfer_menu')]
      ]);

      await ctx.reply(message, keyboard);

    } catch (error) {
      console.error('Error initiating POL transfer:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle transaction history
  async handleTransactionHistory(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const transactions = await walletService.getUserTransactions(chatId, 5);

      let message = 'üìä –ò–°–¢–û–†–ò–Ø\n' +
                   '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n';

      if (transactions.length === 0) {
        message += '‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ\n\n' +
                  'üí° –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å CES —Ç–æ–∫–µ–Ω—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º !';
      } else {
        const user = await walletService.findUserByAddress(transactions[0].fromAddress) || 
                    await walletService.findUserByAddress(transactions[0].toAddress);

        transactions.forEach((tx, index) => {
          const isOutgoing = tx.fromUserId && tx.fromUserId.toString() === user._id.toString();
          const direction = isOutgoing ? 'üü¢ –ò—Å—Ö–æ–¥—è—â–∏–π' : 'üîµ –í—Ö–æ–¥—è—â–∏–π';
          const statusEmoji = tx.status === 'completed' ? '‚úÖ' : 
                             tx.status === 'pending' ? '‚è≥' : '‚ùå';

          message += `${index + 1}. ${direction}\n`;
          message += `üí∞ ${tx.amount} ${tx.tokenType} ${statusEmoji}\n`;
          message += `üìÖ ${tx.createdAt.toLocaleString('ru-RU')}\n`;

          if (tx.txHash) {
            const shortHash = tx.txHash.substring(0, 10) + '...';
            message += `üîó ${shortHash}\n`;
          }

          message += '\n';
        });
      }

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'transfer_menu')]
      ]);

      await ctx.reply(message, keyboard);

    } catch (error) {
      console.error('Error showing transaction history:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Process transfer command from user message
  async processTransferCommand(ctx, transferData, tokenType = 'CES') {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Parse transfer data (address amount)
      const parts = transferData.trim().split(/\s+/);
      
      if (parts.length !== 2) {
        return await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`–∞–¥—Ä–µ—Å —Å—É–º–º–∞\``, {
          parse_mode: 'Markdown'
        });
      }
      
      const [toAddress, amountStr] = parts;
      const amount = parseFloat(amountStr);
      
      if (isNaN(amount) || amount <= 0) {
        return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
      }
      
      if (amount < 0.001) {
        return await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: 0.001 ${tokenType}`);
      }
      
      // Show confirmation
      const recipient = await walletService.findUserByAddress(toAddress);
      const recipientInfo = recipient ? 
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${recipient.username || recipient.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}` :
        'üë§ –í–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫';
      
      const message = `üîí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
` +
                     `–°—É–º–º–∞: ${amount} ${tokenType}
` +
                     `–ö–æ–º—É: ${toAddress}
` +
                     `${recipientInfo}

` +
                     '‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!';
      
      // Store transfer data in session to avoid callback data length limits
      this.setSessionData(chatId, 'pendingTransfer', {
        tokenType,
        toAddress,
        amount,
        timestamp: Date.now()
      });
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_transfer')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'transfer_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Error processing transfer command:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞.');
    }
  }

  // Handle transfer confirmation
  async handleTransferConfirmation(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Get transfer data from session
      const pendingTransfer = this.getSessionData(chatId, 'pendingTransfer');
      
      if (!pendingTransfer || !pendingTransfer.tokenType || !pendingTransfer.toAddress || !pendingTransfer.amount) {
        throw new Error('–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      
      // Check if transfer data is not too old (30 minutes)
      const transferAge = Date.now() - (pendingTransfer.timestamp || 0);
      if (transferAge > 30 * 60 * 1000) {
        this.setSessionData(chatId, 'pendingTransfer', null);
        throw new Error('–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      
      const { tokenType, toAddress, amount } = pendingTransfer;
      
      await ctx.reply('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ.');
      
      let result;
      if (tokenType === 'POL') {
        result = await walletService.sendPOLTokens(chatId, toAddress, amount);
      } else {
        result = await walletService.sendCESTokens(chatId, toAddress, amount);
      }
      
      // Clear pending transfer data
      this.setSessionData(chatId, 'pendingTransfer', null);
      
      if (result.success) {
        const message = `‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω!
` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
` +
                       `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${amount} ${tokenType}
` +
                       `–ö–æ–º—É: ${toAddress}
` +
                       `Hash: ${result.txHash}

` +
                       '‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback(`üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â–µ ${tokenType}`, tokenType === 'POL' ? 'send_pol_tokens' : 'send_ces_tokens')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'transfer_menu')]
        ]);
        
        await ctx.reply(message, keyboard);
      } else {
        // Handle case where result is not successful but no exception was thrown
        const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n' +
                            '‚ÑπÔ∏è –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'transfer_menu')]
        ]);
        
        await ctx.reply(errorMessage, keyboard);
      }
      
    } catch (error) {
      console.error('Transfer confirmation error:', error);
      
      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n' +
                          `‚ÑπÔ∏è ${error.message}`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'transfer_menu')]
      ]);
      
      await ctx.reply(errorMessage, keyboard);
    }
  }

  // Handle P2P Buy CES
  async handleP2PBuyCES(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const priceData = await p2pService.getMarketPriceSuggestion();
      
      const message = `üìà –ü–û–ö–£–ü–ö–ê CES –¢–û–ö–ï–ù–û–í\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞:\n` +
                     `üí∞ ${priceData.currentPrice.toFixed(2)} ‚ÇΩ –∑–∞ 1 CES\n\n` +
                     `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω—É, –º–∏–Ω. –∏ –º–∞–∫—Å. —Å—É–º–º—É:\n` +
                     `‚û§ –§–æ—Ä–º–∞—Ç: –∫–æ–ª-–≤–æ —Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω –º–∏–Ω_—Å—É–º–º–∞ –º–∞–∫—Å_—Å—É–º–º–∞\n` +
                     `‚û§ –ü—Ä–∏–º–µ—Ä: 10 ${priceData.suggestedPrice.toFixed(2)} 1 5\n\n` +
                     `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                     `‚û§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 CES\n` +
                     `‚û§ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%`;
      
      // Store state to handle next user message
      console.log(`üîÑ Setting P2P buy order session for ${chatId}`);
      this.setSessionData(chatId, 'awaitingP2POrder', true);
      this.setSessionData(chatId, 'p2pOrderType', 'buy');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('P2P Buy CES error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
    }
  }

  // Handle P2P Sell CES
  async handleP2PSellCES(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (walletInfo.cesBalance < 1) {
        const message = `üìâ –ü–†–û–î–ê–ñ–ê CES –¢–û–ö–ï–ù–û–í\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n` +
                       `–í–∞—à –±–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                       `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                       `‚û§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 CES\n` +
                       `‚û§ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%\n\n` +
                       `üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å CES`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
        ]);
        
        return await ctx.reply(message, keyboard);
      }
      
      const priceData = await p2pService.getMarketPriceSuggestion();
      
      const message = `üìâ –ü–†–û–î–ê–ñ–ê CES –¢–û–ö–ï–ù–û–í\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–í–∞—à –±–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                     `–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞:\n` +
                     `üí∞ ${priceData.currentPrice.toFixed(2)} ‚ÇΩ –∑–∞ 1 CES\n\n` +
                     `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω—É, –º–∏–Ω. –∏ –º–∞–∫—Å. —Å—É–º–º—É:\n` +
                     `‚û§ –§–æ—Ä–º–∞—Ç: –∫–æ–ª-–≤–æ —Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω –º–∏–Ω_—Å—É–º–º–∞ –º–∞–∫—Å_—Å—É–º–º–∞\n` +
                     `‚û§ –ü—Ä–∏–º–µ—Ä: 10 ${priceData.suggestedPrice.toFixed(2)} 1 5\n\n` +
                     `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                     `‚û§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 CES\n` +
                     `‚û§ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%`;
      
      // Store state to handle next user message
      console.log(`üîÑ Setting P2P sell order session for ${chatId}`);
      this.setSessionData(chatId, 'awaitingP2POrder', true);
      this.setSessionData(chatId, 'p2pOrderType', 'sell');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('P2P Sell CES error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
    }
  }

  // Handle create order with user
  async handleCreateOrderWithUser(ctx, targetUserId) {
    try {
      const chatId = ctx.chat.id.toString();
      const targetUser = await User.findById(targetUserId);
      
      if (!targetUser) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const username = targetUser.username || targetUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      const message = `üìù *–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @${username}*\n\n` +
                     '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞:';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìà –ö—É–ø–∏—Ç—å CES', `create_buy_order_with_${targetUserId}`)],
        [Markup.button.callback('üìâ –ü—Ä–æ–¥–∞—Ç—å CES', `create_sell_order_with_${targetUserId}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_market_orders')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Create order with user error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
    }
  }

  // Handle create buy order with user
  async handleCreateBuyOrderWithUser(ctx, targetUserId) {
    try {
      const chatId = ctx.chat.id.toString();
      const targetUser = await User.findById(targetUserId);
      
      if (!targetUser) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const username = targetUser.username || targetUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const priceData = await p2pService.getMarketPriceSuggestion();
      
      // Store target user ID in session
      this.setSessionData(chatId, 'targetUserId', targetUserId);
      
      const message = `üìà *–ü–û–ö–£–ü–ö–ê CES –¢–û–ö–ï–ù–û–í —É @${username}*\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞:\n` +
                     `üí∞ ${priceData.currentPrice.toFixed(2)} ‚ÇΩ –∑–∞ 1 CES\n\n` +
                     `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω—É, –º–∏–Ω. –∏ –º–∞–∫—Å. —Å—É–º–º—É:\n` +
                     `‚û§ –§–æ—Ä–º–∞—Ç: –∫–æ–ª-–≤–æ —Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω –º–∏–Ω_—Å—É–º–º–∞ –º–∞–∫—Å_—Å—É–º–º–∞\n` +
                     `‚û§ –ü—Ä–∏–º–µ—Ä: 10 ${priceData.suggestedPrice.toFixed(2)} 1 5\n\n` +
                     `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                     `‚û§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 CES\n` +
                     `‚û§ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%`;
      
      // Store state to handle next user message
      this.setSessionData(chatId, 'awaitingP2POrder', true);
      this.setSessionData(chatId, 'p2pOrderType', 'buy');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_market_orders')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Create buy order with user error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É.');
    }
  }

  // Handle create sell order with user
  async handleCreateSellOrderWithUser(ctx, targetUserId) {
    try {
      const chatId = ctx.chat.id.toString();
      const walletInfo = await walletService.getUserWallet(chatId);
      const targetUser = await User.findById(targetUserId);
      
      if (!targetUser) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      if (!walletInfo || !walletInfo.hasWallet) {
        return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
      }
      
      if (walletInfo.cesBalance < 1) {
        const message = `üìâ *–ü–†–û–î–ê–ñ–ê CES –¢–û–ö–ï–ù–û–í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${targetUser.username || targetUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}*\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n` +
                       `–í–∞—à –±–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                       `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                       `‚û§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 CES\n` +
                       `‚û§ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%\n\n` +
                       `üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å CES`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_market_orders')]
        ]);
        
        return await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      }
      
      const username = targetUser.username || targetUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const priceData = await p2pService.getMarketPriceSuggestion();
      
      // Store target user ID in session
      this.setSessionData(chatId, 'targetUserId', targetUserId);
      
      const message = `üìâ *–ü–†–û–î–ê–ñ–ê CES –¢–û–ö–ï–ù–û–í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}*\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–í–∞—à –±–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                     `–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞:\n` +
                     `üí∞ ${priceData.currentPrice.toFixed(2)} ‚ÇΩ –∑–∞ 1 CES\n\n` +
                     `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω—É, –º–∏–Ω. –∏ –º–∞–∫—Å. —Å—É–º–º—É:\n` +
                     `‚û§ –§–æ—Ä–º–∞—Ç: –∫–æ–ª-–≤–æ —Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω –º–∏–Ω_—Å—É–º–º–∞ –º–∞–∫—Å_—Å—É–º–º–∞\n` +
                     `‚û§ –ü—Ä–∏–º–µ—Ä: 10 ${priceData.suggestedPrice.toFixed(2)} 1 5\n\n` +
                     `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                     `‚û§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 CES\n` +
                     `‚û§ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%`;
      
      // Store state to handle next user message
      this.setSessionData(chatId, 'awaitingP2POrder', true);
      this.setSessionData(chatId, 'p2pOrderType', 'sell');
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_market_orders')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Create sell order with user error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.');
    }
  }

  // Handle market orders display
  async handleP2PMarketOrders(ctx) {
    try {
      // Show selection menu for buy/sell orders
      const message = `üìä –†–´–ù–û–ö –û–†–î–ï–†–û–í\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìà –û—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É', 'p2p_buy_orders')],
        [Markup.button.callback('üìâ –û—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É', 'p2p_sell_orders')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);

      await ctx.reply(message, keyboard);

    } catch (error) {
      console.error('Market orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤.');
    }
  }

  // Handle buy orders display with pagination (each order in separate message)
  async handleP2PBuyOrders(ctx, page = 1) {
    try {
      const limit = 10; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 10 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getMarketOrders(limit, offset);
      
      if (result.sellOrders.length === 0) {
        const message = `üìà –û–†–î–ï–†–ê –ù–ê –ü–û–ö–£–ü–ö–£\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–∫–∞ –Ω–µ—Ç\n\n` +
                       `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É!`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]
        ]);
        
        return await ctx.reply(message, keyboard);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      let headerMessage = `üìà –û–†–î–ï–†–ê –ù–ê –ü–û–ö–£–ü–ö–£\n` +
                         `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
      
      const totalPages = Math.ceil(result.sellOrdersCount / limit);
      if (totalPages > 1) {
        headerMessage += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}\n\n`;
      }
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      const headerButtons = [];
      if (totalPages > 1) {
        const paginationButtons = [];
        
        if (page > 1) {
          paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `p2p_buy_orders_page_${page - 1}`));
        }
        
        paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_buy_orders'));
        
        if (page < totalPages) {
          paginationButtons.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', `p2p_buy_orders_page_${page + 1}`));
        }
        
        headerButtons.push(paginationButtons);
      }
      
      headerButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]);
      const headerKeyboard = Markup.inlineKeyboard(headerButtons);
      
      await ctx.reply(headerMessage, headerKeyboard);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      const reputationService = require('../services/reputationService');
      
      for (let i = 0; i < result.sellOrders.length; i++) {
        const order = result.sellOrders[i];
        const username = order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // Get standardized user statistics
        const stats = await reputationService.getStandardizedUserStats(order.userId._id);
        
        // Calculate limits in rubles based on price and amounts
        const minAmount = order.minTradeAmount || 1;
        const maxAmount = order.maxTradeAmount || order.remainingAmount;
        const minRubles = (minAmount * order.pricePerToken).toFixed(2);
        const maxRubles = (maxAmount * order.pricePerToken).toFixed(2);
        
        const orderMessage = `‚ÇΩ ${order.pricePerToken.toFixed(2)} / CES | @${username} ${stats.rating}\n` +
                           `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.remainingAmount.toFixed(2)} CES\n` +
                           `–õ–∏–º–∏—Ç—ã: ${minRubles} - ${maxRubles} ‚ÇΩ`;
        
        const orderKeyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üü© –ö—É–ø–∏—Ç—å', `buy_details_${order.userId._id}_${order._id}`)]
        ]);
        
        await ctx.reply(orderMessage, orderKeyboard);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
    } catch (error) {
      console.error('Buy orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É.');
    }
  }

  // Handle sell orders display with pagination (each order in separate message)
  async handleP2PSellOrders(ctx, page = 1) {
    try {
      const limit = 10; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 10 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getMarketOrders(limit, offset);
      
      if (result.buyOrders.length === 0) {
        const message = `üìâ –û–†–î–ï–†–ê –ù–ê –ü–†–û–î–ê–ñ–£\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ–∫–∞ –Ω–µ—Ç\n\n` +
                       `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]
        ]);
        
        return await ctx.reply(message, keyboard);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      let headerMessage = `üìâ –û–†–î–ï–†–ê –ù–ê –ü–†–û–î–ê–ñ–£\n` +
                         `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
      
      const totalPages = Math.ceil(result.buyOrdersCount / limit);
      if (totalPages > 1) {
        headerMessage += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}\n\n`;
      }
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      const headerButtons = [];
      if (totalPages > 1) {
        const paginationButtons = [];
        
        if (page > 1) {
          paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `p2p_sell_orders_page_${page - 1}`));
        }
        
        paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_sell_orders'));
        
        if (page < totalPages) {
          paginationButtons.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', `p2p_sell_orders_page_${page + 1}`));
        }
        
        headerButtons.push(paginationButtons);
      }
      
      headerButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]);
      const headerKeyboard = Markup.inlineKeyboard(headerButtons);
      
      await ctx.reply(headerMessage, headerKeyboard);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      const reputationService = require('../services/reputationService');
      
      for (let i = 0; i < result.buyOrders.length; i++) {
        const order = result.buyOrders[i];
        const username = order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // Get standardized user statistics
        const stats = await reputationService.getStandardizedUserStats(order.userId._id);
        
        // Calculate limits in rubles based on price and amounts
        const minAmount = order.minTradeAmount || 1;
        const maxAmount = order.maxTradeAmount || order.remainingAmount;
        const minRubles = (minAmount * order.pricePerToken).toFixed(2);
        const maxRubles = (maxAmount * order.pricePerToken).toFixed(2);
        
        const orderMessage = `‚ÇΩ ${order.pricePerToken.toFixed(2)} / CES @${username} ${stats.rating}\n` +
                           `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.remainingAmount.toFixed(2)} CES\n` +
                           `–õ–∏–º–∏—Ç—ã: ${minRubles} - ${maxRubles} ‚ÇΩ`;
        
        const orderKeyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üü• –ü—Ä–æ–¥–∞—Ç—å', `sell_details_${order.userId._id}_${order._id}`)]
        ]);
        
        await ctx.reply(orderMessage, orderKeyboard);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
    } catch (error) {
      console.error('Sell orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.');
    }
  }

  // Get user level display for market orders
  getUserLevelDisplay(trustScore) {
    if (trustScore >= 900) return { emoji: 'üèÜ', level: 5 };
    if (trustScore >= 750) return { emoji: '‚≠ê', level: 4 };
    if (trustScore >= 600) return { emoji: 'üíé', level: 3 };
    if (trustScore >= 400) return { emoji: 'üå±', level: 2 };
    return { emoji: 'üÜï', level: 1 };
  }

  // Get user level display for market orders (new format)
  getUserLevelDisplayNew(trustScore) {
    if (trustScore >= 1000) return { emoji: 'üêã' };
    if (trustScore >= 500) return { emoji: 'üê∫' };
    if (trustScore >= 200) return { emoji: 'ü¶Ö' };
    if (trustScore >= 50) return { emoji: 'üêøÔ∏è' };
    return { emoji: 'üêπ' }; // For 0-49 trust score
  }

  // Handle buy order details display
  async handleBuyOrderDetails(ctx, userId, orderId) {
    try {
      const reputationService = require('../services/reputationService');
      const { User } = require('../database/models');
      
      const user = await User.findById(userId);
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Get standardized user statistics
      const stats = await reputationService.getStandardizedUserStats(userId);
      
      const message = `–†–µ–π—Ç–∏–Ω–≥: ${stats.rating}\n` +
                     `–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ 30 –¥–Ω–µ–π: ${stats.ordersLast30Days} –æ—Ä–¥–µ—Ä–∞\n` +
                     `–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 30 –¥–Ω–µ–π: ${stats.completionRateLast30Days}%\n` +
                     `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞: ${stats.avgTransferTime} –º–∏–Ω.`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_buy_orders')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Buy order details error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.');
    }
  }

  // Handle sell order details display
  async handleSellOrderDetails(ctx, userId, orderId) {
    try {
      const reputationService = require('../services/reputationService');
      const { User } = require('../database/models');
      
      const user = await User.findById(userId);
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // Get standardized user statistics
      const stats = await reputationService.getStandardizedUserStats(userId);
      
      const message = `–†–µ–π—Ç–∏–Ω–≥: ${stats.rating}\n` +
                     `–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ 30 –¥–Ω–µ–π: ${stats.ordersLast30Days} –æ—Ä–¥–µ—Ä–∞\n` +
                     `–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 30 –¥–Ω–µ–π: ${stats.completionRateLast30Days}%\n` +
                     `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: ${stats.avgPaymentTime} –º–∏–Ω.`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_sell_orders')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Sell order details error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.');
    }
  }

  // Handle top traders display
  async handleP2PTopTraders(ctx) {
    try {
      const reputationService = require('../services/reputationService');
      const topTraders = await reputationService.getTopRatedUsers(10);
      
      let message = `üèÜ –¢–û–ü –¢–†–ï–ô–î–ï–†–û–í\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
      
      if (topTraders.length === 0) {
        message += `‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n\n` +
                  `üí° –ê–∫—Ç–∏–≤–Ω–æ —Ç–æ—Ä–≥—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø !`;
      } else {
        topTraders.forEach((trader, index) => {
          const userLevel = this.getUserLevelDisplayNew(trader.trustScore);
          const username = trader.username || trader.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          
          message += `${index + 1}. @${username} ${userLevel.emoji}\n` +
                    `üìä –†–µ–π—Ç–∏–Ω–≥: ${trader.trustScore}/1000\n` +
                    `üí∞ –û–±—ä–µ–º: ${(trader.totalTradeVolume || 0).toLocaleString('ru-RU')} ‚ÇΩ\n\n`;
        });
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Top traders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.');
    }
  }

  // Handle user's orders
  async handleP2PMyOrders(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const orders = await p2pService.getUserOrders(chatId, 10);
      
      let message = `üìã –ú–û–ò –û–†–î–ï–†–ê\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
      
      const keyboardButtons = [];
      
      if (orders.length === 0) {
        message += `‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤\n\n` +
                  `üí° –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É CES !`;
      } else {
        // Display orders if any exist
        orders.forEach((order, index) => {
          const orderType = order.type === 'buy' ? 'üìà –ü–æ–∫—É–ø–∫–∞' : 'üìâ –ü—Ä–æ–¥–∞–∂–∞';
          const status = order.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                        order.status === 'partial' ? '–ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω' : 
                        order.status === 'completed' ? '–ò—Å–ø–æ–ª–Ω–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω';
          
          message += `${index + 1}. ${orderType}\n` +
                    `${order.amount.toFixed(2)} CES –ø–æ ‚ÇΩ ${order.pricePerToken.toFixed(2)}\n` +
                    `–°—Ç–∞—Ç—É—Å: ${status}\n` +
                    `${order.createdAt.toLocaleString('ru-RU')}\n`;
          
          // Add cancel button for active and partial orders
          if (order.status === 'active' || order.status === 'partial') {
            message += `ID: ${order._id}\n`;
            keyboardButtons.push([Markup.button.callback(`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä #${order._id.toString().substr(0, 6)}`, `cancel_order_${order._id}`)]);
          }
          
          message += `\n`;
        });
      }
      
      // Add back button
      keyboardButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]);
      
      const keyboard = Markup.inlineKeyboard(keyboardButtons);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('My orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤.');
    }
  }

  // Process P2P order from user message
  async processP2POrder(ctx, orderData, orderType) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Parse order data (amount pricePerToken minAmount maxAmount)
      const parts = orderData.trim().split(/\s+/);
      
      if (parts.length < 2 || parts.length > 4) {
        return await ctx.reply(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. \nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω [–º–∏–Ω_—Å—É–º–º–∞ –º–∞–∫—Å_—Å—É–º–º–∞]\n\n–ü—Ä–∏–º–µ—Ä: 10 250.50 –∏–ª–∏ 10 250.50 1 5`, {
          parse_mode: 'Markdown'
        });
      }
      
      const [amountStr, priceStr, minAmountStr, maxAmountStr] = parts;
      
      // Normalize decimal separators (replace comma with dot)
      const normalizedAmountStr = amountStr.replace(',', '.');
      const normalizedPriceStr = priceStr.replace(',', '.');
      const normalizedMinAmountStr = minAmountStr ? minAmountStr.replace(',', '.') : null;
      const normalizedMaxAmountStr = maxAmountStr ? maxAmountStr.replace(',', '.') : null;
      
      const amount = parseFloat(normalizedAmountStr);
      const pricePerToken = parseFloat(normalizedPriceStr);
      const minAmount = normalizedMinAmountStr ? parseFloat(normalizedMinAmountStr) : 1;
      const maxAmount = normalizedMaxAmountStr ? parseFloat(normalizedMaxAmountStr) : amount;
      
      if (isNaN(amount) || amount <= 0 || isNaN(pricePerToken) || pricePerToken <= 0) {
        return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.\n\n**–ü—Ä–∏–º–µ—Ä:** `10 250.50` –∏–ª–∏ `10 250,50`', {
          parse_mode: 'Markdown'
        });
      }
      
      if (isNaN(minAmount) || minAmount <= 0 || isNaN(maxAmount) || maxAmount <= 0) {
        return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–∏–Ω/–º–∞–∫—Å —Å—É–º–º—ã. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.', {
          parse_mode: 'Markdown'
        });
      }
      
      if (minAmount > maxAmount) {
        return await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π.', {
          parse_mode: 'Markdown'
        });
      }
      
      if (amount < 1) {
        console.log(`‚ùå Amount too small: ${amount}`);
        return await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 CES');
      }
      
      if (minAmount > amount) {
        return await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.', {
          parse_mode: 'Markdown'
        });
      }
      
      const totalValue = amount * pricePerToken;
      const commission = totalValue * 0.01;
      
      console.log(`üí∞ Processing P2P order: ${amount} CES at ‚ÇΩ${pricePerToken} (total: ‚ÇΩ${totalValue.toFixed(2)}, commission: ‚ÇΩ${commission.toFixed(2)})`);
      
      // Check if this is a direct order with a specific user
      const targetUserId = this.getSessionData(chatId, 'targetUserId');
      
      // Show confirmation
      const typeEmoji = orderType === 'buy' ? 'üìà' : 'üìâ';
      const typeText = orderType === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
      
      let message = `${typeEmoji} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ ${typeText}\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                   `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} CES\n` +
                   `–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω: ‚ÇΩ${pricePerToken.toFixed(2)}\n` +
                   `–û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${totalValue.toFixed(2)}\n` +
                   `–ú–∏–Ω. —Å—É–º–º–∞: ${minAmount} CES\n` +
                   `–ú–∞–∫—Å. —Å—É–º–º–∞: ${maxAmount} CES\n` +
                   `–ö–æ–º–∏—Å—Å–∏—è: ‚ÇΩ${commission.toFixed(2)} (1%)\n\n` +
                   `üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n` +
                   `–í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π\n\n` +
                   `‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞?`;
      
      // Add target user info if this is a direct order
      if (targetUserId) {
        const targetUser = await User.findById(targetUserId);
        if (targetUser) {
          const username = targetUser.username || targetUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          message = `${typeEmoji} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ ${typeText} —É @${username}\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                   `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} CES\n` +
                   `–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω: ‚ÇΩ${pricePerToken.toFixed(2)}\n` +
                   `–û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${totalValue.toFixed(2)}\n` +
                   `–ú–∏–Ω. —Å—É–º–º–∞: ${minAmount} CES\n` +
                   `–ú–∞–∫—Å. —Å—É–º–º–∞: ${maxAmount} CES\n` +
                   `–ö–æ–º–∏—Å—Å–∏—è: ‚ÇΩ${commission.toFixed(2)} (1%)\n\n` +
                   `üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n` +
                   `–í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π\n\n` +
                   `‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞?`;
        }
      }
      
      // Store P2P order data in session to avoid callback data length limits
      this.setSessionData(chatId, 'pendingP2POrder', {
        orderType,
        amount,
        pricePerToken,
        minAmount,
        maxAmount,
        targetUserId,
        timestamp: Date.now()
      });
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_p2p_order')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      console.log(`‚úÖ Sending P2P order confirmation to user`);
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Error processing P2P order:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  // Handle P2P order confirmation
  async handleP2POrderConfirmation(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üîÑ Processing P2P order confirmation for user ${chatId}`);
      
      // Get P2P order data from session
      const pendingOrder = this.getSessionData(chatId, 'pendingP2POrder');
      
      if (!pendingOrder || !pendingOrder.orderType || !pendingOrder.amount || !pendingOrder.pricePerToken) {
        throw new Error('–î–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      
      // Check if order data is not too old (30 minutes)
      const orderAge = Date.now() - (pendingOrder.timestamp || 0);
      if (orderAge > 30 * 60 * 1000) {
        this.setSessionData(chatId, 'pendingP2POrder', null);
        throw new Error('–î–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      
      const { orderType, amount, pricePerToken, minAmount, maxAmount, targetUserId } = pendingOrder;
      
      console.log(`üìä Order details: type=${orderType}, amount=${amount}, price=${pricePerToken}, min=${minAmount}, max=${maxAmount}, chatId=${chatId}, targetUserId=${targetUserId}`);
      
      await ctx.reply('‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ.');
      
      let result;
      if (orderType === 'buy') {
        console.log(`üìà Creating buy order...`);
        result = await p2pService.createBuyOrder(chatId, amount, pricePerToken, minAmount, maxAmount);
      } else {
        console.log(`üìâ Creating sell order...`);
        result = await p2pService.createSellOrder(chatId, amount, pricePerToken, ['bank_transfer'], minAmount, maxAmount);
      }
      
      console.log(`‚úÖ Order created successfully: ${result._id}`);
      
      // Clear pending order data
      this.setSessionData(chatId, 'pendingP2POrder', null);
      
      const typeEmoji = orderType === 'buy' ? 'üìà' : 'üìâ';
      const typeText = orderType === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
      const totalValue = amount * pricePerToken;
      
      let message = `${typeEmoji} –û—Ä–¥–µ—Ä –Ω–∞ ${typeText} —Å–æ–∑–¥–∞–Ω!\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                   `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} CES\n` +
                   `–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω: ‚ÇΩ${pricePerToken.toFixed(2)}\n` +
                   `–û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${totalValue.toFixed(2)}\n` +
                   `–ú–∏–Ω. —Å—É–º–º–∞: ${minAmount} CES\n` +
                   `–ú–∞–∫—Å. —Å—É–º–º–∞: ${maxAmount} CES\n\n` +
                   `üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n` +
                   `–í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π`;
      
      // Add target user info if this is a direct order
      if (targetUserId) {
        const targetUser = await User.findById(targetUserId);
        if (targetUser) {
          const username = targetUser.username || targetUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          message = `${typeEmoji} –û—Ä–¥–µ—Ä –Ω–∞ ${typeText} —É @${username} —Å–æ–∑–¥–∞–Ω!\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                   `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} CES\n` +
                   `–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω: ‚ÇΩ${pricePerToken.toFixed(2)}\n` +
                   `–û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${totalValue.toFixed(2)}\n` +
                   `–ú–∏–Ω. —Å—É–º–º–∞: ${minAmount} CES\n` +
                   `–ú–∞–∫—Å. —Å—É–º–º–∞: ${maxAmount} CES\n\n` +
                   `üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n` +
                   `–í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π`;
        }
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞', 'p2p_my_orders')],
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('P2P order confirmation error:', error);
      
      // Sanitize error message to avoid Markdown parsing issues
      const sanitizedMessage = error.message.replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&');
      const errorMessage = `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞\n\n‚ÑπÔ∏è ${sanitizedMessage}`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.reply(errorMessage, keyboard);
    }
  }

  // Handle P2P Analytics
  async handleP2PAnalytics(ctx) {
    try {
      // In a real implementation, you would fetch actual analytics data
      // For now, we'll use placeholder data as shown in the example
      
      const message = `üßÆ –ê–ù–ê–õ–ò–¢–ò–ö–ê \n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:\n` +
                     `–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ‚ÇΩ 0\n` +
                     `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: 0\n` +
                     `–£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: 0%\n` +
                     `–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã: 0\n\n` +
                     `2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:\n` +
                     `–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ‚ÇΩ 0\n` +
                     `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: 0\n` +
                     `–£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: 0%\n` +
                     `–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã: 0`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Analytics error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.');
    }
  }

  // Handle user messaging
  async handleUserMessaging(ctx, targetUserId) {
    try {
      // Set session state to capture next message
      const chatId = ctx.chat.id.toString();
      this.setSessionData(chatId, 'awaitingUserMessage', true);
      this.setSessionData(chatId, 'targetUserId', targetUserId);
      
      const targetUser = await User.findById(targetUserId);
      const username = targetUser?.username || targetUser?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      const message = `üìù *–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}*\n\n` +
                     '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:\n' +
                     '‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_market_orders')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('User messaging error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
    }
  }

  // Process user message
  async processUserMessage(ctx, messageText) {
    try {
      const chatId = ctx.chat.id.toString();
      const targetUserId = this.getSessionData(chatId, 'targetUserId');
      
      // Clear session
      this.clearUserSession(chatId);
      
      if (!targetUserId) {
        return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.');
      }
      
      const senderUser = await User.findOne({ chatId });
      const targetUser = await User.findById(targetUserId);
      
      if (!senderUser || !targetUser) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // In a real implementation, you would send the message to the target user
      // For now, we'll just show a confirmation
      
      const senderUsername = senderUser.username || senderUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const targetUsername = targetUser.username || targetUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      const confirmationMessage = `‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${targetUsername}*\n\n` +
                                `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}"\n\n` +
                                `‚ÑπÔ∏è –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –±—ã –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—Ä–¥–µ—Ä–∞–º', 'p2p_market_orders')]
      ]);
      
      await ctx.reply(confirmationMessage, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Process user message error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
  }

  // Handle order cancellation
  async handleCancelOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Show confirmation message
      const message = `‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞*\n\n` +
                     `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä #${orderId.toString().substr(0, 6)}?\n\n` +
                     `‚ÑπÔ∏è –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ–ª—å–∑—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', `confirm_cancel_order_${orderId}`)],
        [Markup.button.callback('‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è', 'p2p_my_orders')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Cancel order error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞.');
    }
  }

  // Handle order cancellation confirmation
  async handleConfirmCancelOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      
      await ctx.reply('‚è≥ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ.');
      
      // Call the service to cancel the order
      const result = await p2pService.cancelOrder(chatId, orderId);
      
      const message = `‚úÖ *–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω*\n\n` +
                     `–û—Ä–¥–µ—Ä #${orderId.toString().substr(0, 6)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω\n\n` +
                     `‚ÑπÔ∏è –í—Å–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞', 'p2p_my_orders')],
        [Markup.button.callback('üîÑ –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
      
    } catch (error) {
      console.error('Confirm cancel order error:', error);
      
      const errorMessage = `‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞*\n\n` +
                          `‚ÑπÔ∏è ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä'}`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞', 'p2p_my_orders')],
        [Markup.button.callback('üîÑ –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.reply(errorMessage, { parse_mode: 'Markdown', ...keyboard });
    }
  }

  // Handle enter amount for P2P trading
  async handleEnterAmount(ctx, targetUserId) {
    try {
      const chatId = ctx.chat.id.toString();
      const targetUser = await User.findById(targetUserId);
      
      if (!targetUser) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const username = targetUser.username || targetUser.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      const message = `üí∏ –ü–û–ö–£–ü–ö–ê CES —É @${username}\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n` +
                     `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
                     `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¶–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω\n\n` +
                     `üìù –ü—Ä–∏–º–µ—Ä:\n` +
                     `10 250.50`;
      
      // Store target user ID in session for P2P trade
      this.setSessionData(chatId, 'awaitingP2POrder', true);
      this.setSessionData(chatId, 'p2pOrderType', 'buy');
      this.setSessionData(chatId, 'targetUserId', targetUserId);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_buy_orders')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Enter amount error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã.');
    }
  }
}

module.exports = new MessageHandler();