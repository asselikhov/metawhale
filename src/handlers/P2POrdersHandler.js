/**
 * P2P Orders Handler
 * Handles complex P2P order display, pagination, and order management
 */

const { Markup } = require('telegraf');
const p2pService = require('../services/p2pService');
const { User } = require('../database/models');
const sessionManager = require('./SessionManager');

class P2POrdersHandler {
  // Handle buy orders display with pagination (edit existing messages)
  async handleP2PBuyOrders(ctx, page = 1) {
    try {
      const limit = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getMarketOrders(limit, offset);
      const chatId = ctx.chat.id.toString();
      
      // Buy orders section shows sell orders from database (users wanting to buy CES)
      if (result.sellOrders.length === 0) {
        const message = `üìà –û–†–î–ï–†–ê –ù–ê –ü–û–ö–£–ü–ö–£\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–∫–∞ –Ω–µ—Ç\n\n` +
                       `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É!`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]
        ]);
        
        // Clear any existing session data
        sessionManager.clearUserSession(chatId);
        return await ctx.reply(message, keyboard);
      }
      
      const totalPages = Math.ceil(result.sellOrdersCount / limit);
      
      // Check if this is pagination (edit mode) or initial display
      const sessionData = sessionManager.getSessionData(chatId, 'buyOrdersMessages');
      const isEditMode = sessionData && sessionData.headerMessageId;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      let headerMessage = `üìà –û–†–î–ï–†–ê –ù–ê –ü–û–ö–£–ü–ö–£\n` +
                         `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
      
      let headerMessageId;
      
      if (isEditMode && sessionData.headerMessageId) {
        // Edit existing header message
        try {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            sessionData.headerMessageId,
            null,
            headerMessage
          );
          headerMessageId = sessionData.headerMessageId;
        } catch (error) {
          console.log('Could not edit header message, sending new one');
          const headerMsg = await ctx.reply(headerMessage);
          headerMessageId = headerMsg.message_id;
        }
      } else {
        // Send new header message
        const headerMsg = await ctx.reply(headerMessage);
        headerMessageId = headerMsg.message_id;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
      const reputationService = require('../services/reputationService');
      const orderMessageIds = [];
      
      // Display sell orders from database (users wanting to buy CES from market perspective)
      for (let i = 0; i < result.sellOrders.length; i++) {
        const order = result.sellOrders[i];
        const username = order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // Get standardized user statistics
        const stats = await reputationService.getStandardizedUserStats(order.userId._id);
        
        // Extract only emoji from rating (remove the number part)
        const emoji = stats.rating.split(' ').pop(); // Gets the last part after space (emoji)
        
        // Calculate limits in rubles based on price and amounts
        const minAmount = order.minTradeAmount || 1;
        const maxAmount = order.maxTradeAmount || order.remainingAmount;
        const minRubles = (minAmount * order.pricePerToken).toFixed(2);
        const maxRubles = (maxAmount * order.pricePerToken).toFixed(2);
        
        const orderMessage = `‚ÇΩ ${order.pricePerToken.toFixed(2)} / CES | @${username} ${emoji}\n` +
                           `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.remainingAmount.toFixed(2)} CES\n` +
                           `–õ–∏–º–∏—Ç—ã: ${minRubles} - ${maxRubles} ‚ÇΩ`;
        
        const orderKeyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üü© –ö—É–ø–∏—Ç—å', `buy_details_${order.userId._id}_${order._id}`)]
        ]);
        
        let orderMessageId;
        
        // Try to edit existing message if we have session data
        if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[i]) {
          try {
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              sessionData.orderMessageIds[i],
              null,
              orderMessage,
              orderKeyboard
            );
            orderMessageId = sessionData.orderMessageIds[i];
          } catch (error) {
            console.log(`Could not edit order message ${i}, sending new one`);
            const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
            orderMessageId = orderMsg.message_id;
          }
        } else {
          // Send new order message
          const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
          orderMessageId = orderMsg.message_id;
        }
        
        orderMessageIds.push(orderMessageId);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
      const navigationButtons = [];
      if (totalPages > 1) {
        const paginationButtons = [];
        
        if (page > 1) {
          paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_buy_orders_page_${page - 1}`));
        }
        
        paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_buy_orders'));
        
        if (page < totalPages) {
          paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_buy_orders_page_${page + 1}`));
        }
        
        navigationButtons.push(paginationButtons);
      }
      
      // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
      navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]);
      
      const navigationKeyboard = Markup.inlineKeyboard(navigationButtons);
      
      let navigationMessageId;
      
      // Navigation message with page number in the correct format
      const navigationText = totalPages > 1 ? `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ` : '–ù–∞–≤–∏–≥–∞—Ü–∏—è';
      
      // Edit navigation message if exists
      if (isEditMode && sessionData.navigationMessageId) {
        try {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            sessionData.navigationMessageId,
            null,
            navigationText,
            navigationKeyboard
          );
          navigationMessageId = sessionData.navigationMessageId;
        } catch (error) {
          console.log('Could not edit navigation message, sending new one');
          const navMsg = await ctx.reply(navigationText, navigationKeyboard);
          navigationMessageId = navMsg.message_id;
        }
      } else {
        // Send new navigation message
        const navMsg = await ctx.reply(navigationText, navigationKeyboard);
        navigationMessageId = navMsg.message_id;
      }
      
      // Store message IDs in session for future edits
      sessionManager.setSessionData(chatId, 'buyOrdersMessages', {
        headerMessageId,
        orderMessageIds,
        navigationMessageId
      });
      
    } catch (error) {
      console.error('Buy orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É.');
    }
  }

  // Handle sell orders display with pagination (edit existing messages)
  async handleP2PSellOrders(ctx, page = 1) {
    try {
      const limit = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getMarketOrders(limit, offset);
      const chatId = ctx.chat.id.toString();
      
      // Sell orders section shows buy orders from database (users wanting to sell CES)
      if (result.buyOrders.length === 0) {
        const message = `üìâ –û–†–î–ï–†–ê –ù–ê –ü–†–û–î–ê–ñ–£\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ–∫–∞ –Ω–µ—Ç\n\n` +
                       `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]
        ]);
        
        // Clear any existing session data
        sessionManager.clearUserSession(chatId);
        return await ctx.reply(message, keyboard);
      }
      
      const totalPages = Math.ceil(result.buyOrdersCount / limit);
      
      // Check if this is pagination (edit mode) or initial display
      const sessionData = sessionManager.getSessionData(chatId, 'sellOrdersMessages');
      const isEditMode = sessionData && sessionData.headerMessageId;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      let headerMessage = `üìâ –û–†–î–ï–†–ê –ù–ê –ü–†–û–î–ê–ñ–£\n` +
                         `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
      
      let headerMessageId;
      
      if (isEditMode && sessionData.headerMessageId) {
        // Edit existing header message
        try {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            sessionData.headerMessageId,
            null,
            headerMessage
          );
          headerMessageId = sessionData.headerMessageId;
        } catch (error) {
          console.log('Could not edit header message, sending new one');
          const headerMsg = await ctx.reply(headerMessage);
          headerMessageId = headerMsg.message_id;
        }
      } else {
        // Send new header message
        const headerMsg = await ctx.reply(headerMessage);
        headerMessageId = headerMsg.message_id;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
      const reputationService = require('../services/reputationService');
      const orderMessageIds = [];
      
      // Display buy orders from database (users wanting to sell CES from market perspective)
      for (let i = 0; i < result.buyOrders.length; i++) {
        const order = result.buyOrders[i];
        const username = order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // Get standardized user statistics
        const stats = await reputationService.getStandardizedUserStats(order.userId._id);
        
        // Extract only emoji from rating (remove the number part)
        const emoji = stats.rating.split(' ').pop(); // Gets the last part after space (emoji)
        
        // Calculate limits in rubles based on price and amounts
        const minAmount = order.minTradeAmount || 1;
        const maxAmount = order.maxTradeAmount || order.remainingAmount;
        const minRubles = (minAmount * order.pricePerToken).toFixed(2);
        const maxRubles = (maxAmount * order.pricePerToken).toFixed(2);
        
        const orderMessage = `‚ÇΩ ${order.pricePerToken.toFixed(2)} / CES | @${username} ${emoji}\n` +
                           `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.remainingAmount.toFixed(2)} CES\n` +
                           `–õ–∏–º–∏—Ç—ã: ${minRubles} - ${maxRubles} ‚ÇΩ`;
        
        const orderKeyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üü• –ü—Ä–æ–¥–∞—Ç—å', `sell_details_${order.userId._id}_${order._id}`)]
        ]);
        
        let orderMessageId;
        
        // Try to edit existing message if we have session data
        if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[i]) {
          try {
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              sessionData.orderMessageIds[i],
              null,
              orderMessage,
              orderKeyboard
            );
            orderMessageId = sessionData.orderMessageIds[i];
          } catch (error) {
            console.log(`Could not edit order message ${i}, sending new one`);
            const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
            orderMessageId = orderMsg.message_id;
          }
        } else {
          // Send new order message
          const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
          orderMessageId = orderMsg.message_id;
        }
        
        orderMessageIds.push(orderMessageId);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
      const navigationButtons = [];
      if (totalPages > 1) {
        const paginationButtons = [];
        
        if (page > 1) {
          paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_sell_orders_page_${page - 1}`));
        }
        
        paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_sell_orders'));
        
        if (page < totalPages) {
          paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_sell_orders_page_${page + 1}`));
        }
        
        navigationButtons.push(paginationButtons);
      }
      
      // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
      navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]);
      
      const navigationKeyboard = Markup.inlineKeyboard(navigationButtons);
      
      let navigationMessageId;
      
      // Navigation message with page number in the correct format
      const navigationText = totalPages > 1 ? `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ` : '–ù–∞–≤–∏–≥–∞—Ü–∏—è';
      
      // Edit navigation message if exists
      if (isEditMode && sessionData.navigationMessageId) {
        try {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            sessionData.navigationMessageId,
            null,
            navigationText,
            navigationKeyboard
          );
          navigationMessageId = sessionData.navigationMessageId;
        } catch (error) {
          console.log('Could not edit navigation message, sending new one');
          const navMsg = await ctx.reply(navigationText, navigationKeyboard);
          navigationMessageId = navMsg.message_id;
        }
      } else {
        // Send new navigation message
        const navMsg = await ctx.reply(navigationText, navigationKeyboard);
        navigationMessageId = navMsg.message_id;
      }
      
      // Store message IDs in session for future edits
      sessionManager.setSessionData(chatId, 'sellOrdersMessages', {
        headerMessageId,
        orderMessageIds,
        navigationMessageId
      });
      
    } catch (error) {
      console.error('Sell orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.');
    }
  }

  // Handle user's orders with pagination
  async handleP2PMyOrders(ctx, page = 1) {
    try {
      const chatId = ctx.chat.id.toString();
      const limit = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getUserOrders(chatId, limit, offset);
      
      // Check if this is pagination (edit mode) or initial display
      const sessionData = sessionManager.getSessionData(chatId, 'myOrdersMessage');
      const isEditMode = sessionData && sessionData.messageId;
      
      let message = `üìã –ú–û–ò –û–†–î–ï–†–ê\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
      
      const totalPages = Math.ceil(result.totalCount / limit);
      
      const keyboardButtons = [];
      
      if (result.orders.length === 0) {
        if (page === 1) {
          message += `‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤\n\n` +
                    `üí° –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É CES !`;
        } else {
          message += `‚ö†Ô∏è –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤`;
        }
      } else {
        // Display orders if any exist
        result.orders.forEach((order, index) => {
          const orderNumber = offset + index + 1;
          const orderType = order.type === 'buy' ? 'üìà –ü–æ–∫—É–ø–∫–∞' : 'üìâ –ü—Ä–æ–¥–∞–∂–∞';
          const status = order.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                        order.status === 'partial' ? '–ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω' : 
                        order.status === 'completed' ? '–ò—Å–ø–æ–ª–Ω–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω';
          
          message += `${orderNumber}. ${orderType}\n` +
                    `${order.amount.toFixed(2)} CES –ø–æ ‚ÇΩ ${order.pricePerToken.toFixed(2)}\n` +
                    `–°—Ç–∞—Ç—É—Å: ${status}\n` +
                    `${order.createdAt.toLocaleString('ru-RU')}\n` +
                    `ID: ${order._id}\n\n`;
          
          // Add cancel button for active and partial orders
          if (order.status === 'active' || order.status === 'partial') {
            keyboardButtons.push([Markup.button.callback(`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä #${order._id.toString().substr(0, 6)}`, `cancel_order_${order._id}`)]);
          }
        });
      }
      
      // Add pagination info at the bottom
      if (totalPages > 1) {
        message += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}`;
      }
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
      const navigationButtons = [];
      if (totalPages > 1) {
        const paginationButtons = [];
        
        if (page > 1) {
          paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_my_orders_page_${page - 1}`));
        }
        
        paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
        
        if (page < totalPages) {
          paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_my_orders_page_${page + 1}`));
        }
        
        navigationButtons.push(paginationButtons);
      }
      
      // Add cancel buttons for orders
      navigationButtons.push(...keyboardButtons);
      
      // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
      navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]);
      
      const keyboard = Markup.inlineKeyboard(navigationButtons);
      
      let messageId;
      
      // Edit existing message if in edit mode
      if (isEditMode && sessionData.messageId) {
        try {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            sessionData.messageId,
            null,
            message,
            keyboard
          );
          messageId = sessionData.messageId;
        } catch (error) {
          console.log('Could not edit my orders message, sending new one');
          const msg = await ctx.reply(message, keyboard);
          messageId = msg.message_id;
        }
      } else {
        // Send new message
        const msg = await ctx.reply(message, keyboard);
        messageId = msg.message_id;
      }
      
      // Store message ID in session for future edits
      sessionManager.setSessionData(chatId, 'myOrdersMessage', {
        messageId
      });
      
    } catch (error) {
      console.error('My orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤.');
    }
  }
}

module.exports = P2POrdersHandler;