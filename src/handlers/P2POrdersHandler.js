/**
 * P2P Orders Handler
 * Handles complex P2P order display, pagination, and order management
 */

const { Markup } = require('telegraf');
const p2pService = require('../services/p2pService');
const { User } = require('../database/models');
const sessionManager = require('./SessionManager');

class P2POrdersHandler {
  
  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ—Ä–¥–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
   * @param {Object} order - –û—Ä–¥–µ—Ä
   * @returns {Object} - {timeText: string, isExpiringSoon: boolean, isExpired: boolean}
   */
  calculateRemainingTime(order) {
    try {
      const now = new Date();
      const timeLimit = order.tradeTimeLimit || 30; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç
      const orderCreatedAt = new Date(order.createdAt);
      const expiresAt = new Date(orderCreatedAt.getTime() + timeLimit * 60 * 1000);
      const timeRemaining = expiresAt.getTime() - now.getTime();
      
      if (timeRemaining <= 0) {
        return {
          timeText: '‚õî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω',
          isExpiringSoon: false,
          isExpired: true,
          expiresAt
        };
      }
      
      const minutesRemaining = Math.ceil(timeRemaining / 60000);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
      let timeText, isExpiringSoon;
      
      if (minutesRemaining <= 5) {
        timeText = `üî¥ ${minutesRemaining} –º–∏–Ω. (–∫—Ä–∏—Ç–∏—á–Ω–æ!)`; // –ö—Ä–∞—Å–Ω—ã–π - –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
        isExpiringSoon = true;
      } else if (minutesRemaining <= 10) {
        timeText = `üü° ${minutesRemaining} –º–∏–Ω.`; // –ñ—ë–ª—Ç—ã–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        isExpiringSoon = true;
      } else {
        timeText = `üü¢ ${minutesRemaining} –º–∏–Ω.`; // –ó–µ–ª—ë–Ω—ã–π - –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        isExpiringSoon = false;
      }
      
      return {
        timeText,
        isExpiringSoon,
        isExpired: false,
        expiresAt,
        minutesRemaining
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ä–¥–µ—Ä–∞:', error);
      return {
        timeText: '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        isExpiringSoon: false,
        isExpired: false,
        expiresAt: null,
        minutesRemaining: 0
      };
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
   * @param {Object} order - –û—Ä–¥–µ—Ä
   * @param {Object} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns {Object} - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  async calculateEnhancedOrderInfo(order, user) {
    try {
      const totalValue = order.amount * order.pricePerToken;
      const filledAmount = order.filledAmount || 0;
      const remainingAmount = order.remainingAmount || order.amount;
      const filledValue = filledAmount * order.pricePerToken;
      const remainingValue = remainingAmount * order.pricePerToken;
      
      // –ö–æ–º–∏—Å—Å–∏—è (–º–µ–π–∫–µ—Ä –ø–ª–∞—Ç–∏—Ç 1%)
      const commissionRate = 0.01; // 1%
      const commission = totalValue * commissionRate;
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
      const progressPercent = order.amount > 0 ? Math.round((filledAmount / order.amount) * 100) : 0;
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ—Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É (–º–æ–∫)
      const p2pService = require('../services/p2pService');
      let marketPrice = order.pricePerToken; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      let priceDeviation = 0;
      
      try {
        const marketData = await p2pService.getMarketPriceSuggestion();
        if (marketData && marketData.averagePrice) {
          marketPrice = marketData.averagePrice;
          priceDeviation = ((order.pricePerToken - marketPrice) / marketPrice) * 100;
        }
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É');
      }
      
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      const timeInfo = this.calculateRemainingTime(order);
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      const progressBar = this.generateProgressBar(progressPercent);
      const progressInfo = `${progressBar} ${progressPercent}%`;
      
      // –†—ã–Ω–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      let marketInfo = '';
      if (priceDeviation !== 0) {
        const deviationText = priceDeviation > 0 ? 
          `+${priceDeviation.toFixed(1)}%` : 
          `${priceDeviation.toFixed(1)}%`;
        const deviationEmoji = priceDeviation > 0 ? 'üî∫' : 'üîª';
        marketInfo = `üìä –†—ã–Ω–æ–∫: ‚ÇΩ${marketPrice.toLocaleString('ru-RU')} (${deviationEmoji}${deviationText})`;
      } else {
        marketInfo = `üìä –†—ã–Ω–æ–∫: ‚ÇΩ${marketPrice.toLocaleString('ru-RU')}`;
      }
      
      return {
        totalValue,
        filledAmount,
        remainingAmount,
        filledValue,
        remainingValue,
        commission,
        progressPercent,
        marketPrice,
        priceDeviation,
        timeInfo: timeInfo.timeText,
        progressInfo,
        marketInfo
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
      return {
        totalValue: 0,
        filledAmount: 0,
        remainingAmount: 0,
        filledValue: 0,
        remainingValue: 0,
        commission: 0,
        progressPercent: 0,
        marketPrice: 0,
        priceDeviation: 0,
        timeInfo: '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        progressInfo: '‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%',
        marketInfo: 'üìä –†—ã–Ω–æ–∫: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
   * @param {Object} order - –û—Ä–¥–µ—Ä
   * @param {Object} enhancedInfo - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
   */
  formatEnhancedStatus(order, enhancedInfo) {
    const timeInfo = this.calculateRemainingTime(order);
    let statusEmoji = '';
    let statusText = '';
    let statusDetails = '';
    
    switch (order.status) {
      case 'active':
        if (timeInfo.isExpired) {
          statusEmoji = 'üî¥';
          statusText = '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω';
          statusDetails = '(—Ç—Ä–µ–±—É–µ—Ç –æ—Ç–º–µ–Ω—ã)';
        } else if (timeInfo.isExpiringSoon) {
          statusEmoji = 'üü°';
          statusText = '–ê–∫—Ç–∏–≤–µ–Ω';
          statusDetails = `(–æ—Å—Ç–∞–ª–æ—Å—å ${timeInfo.minutesRemaining} –º–∏–Ω.)`;
        } else {
          statusEmoji = 'üü¢';
          statusText = '–ê–∫—Ç–∏–≤–µ–Ω';
          statusDetails = `(–æ—Å—Ç–∞–ª–æ—Å—å ${timeInfo.minutesRemaining} –º–∏–Ω.)`;
        }
        break;
      case 'partial':
        statusEmoji = 'üü°';
        statusText = '–ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω';
        statusDetails = `(${enhancedInfo.progressPercent}% –∏—Å–ø–æ–ª–Ω–µ–Ω–æ)`;
        break;
      case 'completed':
        statusEmoji = '‚úÖ';
        statusText = '–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω';
        statusDetails = '';
        break;
      case 'cancelled':
        statusEmoji = '‚ùå';
        statusText = '–û—Ç–º–µ–Ω—ë–Ω';
        statusDetails = '';
        break;
      default:
        statusEmoji = '‚ö†Ô∏è';
        statusText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        statusDetails = '';
    }
    
    return `${statusEmoji} ${statusText} ${statusDetails}`.trim();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @param {Object} order - –û—Ä–¥–µ—Ä
   * @param {Object} enhancedInfo - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  formatFinancialInfo(order, enhancedInfo) {
    let priceDisplay = `üí∞ –¶–µ–Ω–∞: ‚ÇΩ${order.pricePerToken.toLocaleString('ru-RU')} –∑–∞ CES`;
    let financialDisplay = `üìã –û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${enhancedInfo.totalValue.toLocaleString('ru-RU')}`;
    
    if (enhancedInfo.commission > 0) {
      financialDisplay += `\nüí≥ –ö–æ–º–∏—Å—Å–∏—è: ‚ÇΩ${enhancedInfo.commission.toLocaleString('ru-RU')} (1%)`;
    }
    
    if (enhancedInfo.remainingValue > 0 && enhancedInfo.remainingValue !== enhancedInfo.totalValue) {
      financialDisplay += `\nüîÑ –û—Å—Ç–∞–ª–æ—Å—å: ‚ÇΩ${enhancedInfo.remainingValue.toLocaleString('ru-RU')}`;
    }
    
    return `${priceDisplay}\n${financialDisplay}`;
  }
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
   * @param {number} percent - –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   * @returns {string} - –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
   */
  generateProgressBar(percent) {
    const totalBlocks = 10;
    const filledBlocks = Math.round((percent / 100) * totalBlocks);
    const emptyBlocks = totalBlocks - filledBlocks;
    
    const filled = '‚ñà'.repeat(filledBlocks);
    const empty = '‚ñë'.repeat(emptyBlocks);
    
    return `${filled}${empty}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ
   * @param {Object} order - –û—Ä–¥–µ—Ä
   * @param {Object} enhancedInfo - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  formatPriceInfo(order, enhancedInfo) {
    let priceDisplay = `üí∞ –¶–µ–Ω–∞: ‚ÇΩ${order.pricePerToken.toLocaleString('ru-RU')} –∑–∞ CES`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º
    if (enhancedInfo.priceDeviation !== 0) {
      const deviationText = enhancedInfo.priceDeviation > 0 ? 
        `+${enhancedInfo.priceDeviation.toFixed(1)}%` : 
        `${enhancedInfo.priceDeviation.toFixed(1)}%`;
      const deviationEmoji = enhancedInfo.priceDeviation > 0 ? 'üî∫' : 'üîª';
      priceDisplay += `\nüìä –†—ã–Ω–æ–∫: ‚ÇΩ${enhancedInfo.marketPrice.toLocaleString('ru-RU')} (${deviationEmoji}${deviationText})`;
    }
    
    return priceDisplay;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @param {Object} enhancedInfo - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  formatFinancialInfo(enhancedInfo) {
    let financialDisplay = `üìã –û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${enhancedInfo.totalValue.toLocaleString('ru-RU')}`;
    
    if (enhancedInfo.commission > 0) {
      financialDisplay += `\nüí≥ –ö–æ–º–∏—Å—Å–∏—è: ‚ÇΩ${enhancedInfo.commission.toLocaleString('ru-RU')} (1%)`;
    }
    
    if (enhancedInfo.remainingValue > 0 && enhancedInfo.remainingValue !== enhancedInfo.totalValue) {
      financialDisplay += `\nüîÑ –û—Å—Ç–∞–ª–æ—Å—å: ‚ÇΩ${enhancedInfo.remainingValue.toLocaleString('ru-RU')}`;
    }
    
    return financialDisplay;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
   * @param {Object} order - –û—Ä–¥–µ—Ä
   * @param {Object} enhancedInfo - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
   */
  async generateEnhancedOrderButtons(order, enhancedInfo) {
    const buttons = [];
    const timeInfo = this.calculateRemainingTime(order);
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    if (order.status === 'active' || order.status === 'partial') {
      const actionButtons = [];
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      actionButtons.push(Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel_order_${order._id}`));
      
      if (timeInfo.isExpiringSoon || timeInfo.isExpired) {
        actionButtons.push(Markup.button.callback('üîÑ +–≤—Ä–µ–º—è', `extend_time_${order._id}`));
      }
      
      buttons.push(actionButtons);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      const extraButtons = [];
      extraButtons.push(Markup.button.callback('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', `order_analytics_${order._id}`));
      extraButtons.push(Markup.button.callback('üìà –ò—Å—Ç–æ—Ä–∏—è', `order_history_${order._id}`));
      buttons.push(extraButtons);
      
      // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const managementButtons = [];
      if (order.type === 'sell') {
        managementButtons.push(Markup.button.callback('üí∞ –ò–∑–º. —Ü–µ–Ω—É', `edit_price_${order._id}`));
      }
      managementButtons.push(Markup.button.callback('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `share_order_${order._id}`));
      if (managementButtons.length > 0) {
        buttons.push(managementButtons);
      }
    }
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    else if (order.status === 'completed') {
      const completedButtons = [];
      completedButtons.push(Markup.button.callback('üìà –ò—Å—Ç–æ—Ä–∏—è', `order_history_${order._id}`));
      completedButtons.push(Markup.button.callback('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', `duplicate_order_${order._id}`));
      buttons.push(completedButtons);
    }
    
    return buttons;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async generateUserStatistics(user) {
    try {
      const { P2POrder, P2PTrade } = require('../database/models');
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ä–¥–µ—Ä–æ–≤
      const activeOrders = await P2POrder.countDocuments({
        userId: user._id,
        status: { $in: ['active', 'partial'] }
      });
      
      const completedOrders = await P2POrder.countDocuments({
        userId: user._id,
        status: 'completed'
      });
      
      const totalOrders = await P2POrder.countDocuments({
        userId: user._id
      });
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–¥–µ–ª–æ–∫ –∑–∞ 30 –¥–Ω–µ–π
      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
      const recentTrades = await P2PTrade.find({
        $or: [
          { buyerId: user._id },
          { sellerId: user._id }
        ],
        createdAt: { $gte: thirtyDaysAgo },
        status: 'completed'
      });
      
      // –û–±—â–∏–π –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤
      const totalVolume = recentTrades.reduce((sum, trade) => sum + trade.amount, 0);
      const totalValue = recentTrades.reduce((sum, trade) => sum + trade.totalValue, 0);
      
      // –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
      const successRate = totalOrders > 0 ? Math.round((completedOrders / totalOrders) * 100) : 0;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
      const reputationService = require('../services/reputationService');
      const stats = await reputationService.getStandardizedUserStats(user._id);
      
      // –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userRank = 'üå± –ù–æ–≤–∏—á–æ–∫';
      if (completedOrders >= 50) {
        userRank = 'üëë –ú–∞—Å—Ç–µ—Ä';
      } else if (completedOrders >= 20) {
        userRank = 'üî• –≠–∫—Å–ø–µ—Ä—Ç';
      } else if (completedOrders >= 10) {
        userRank = '‚≠ê –û–ø—ã—Ç–Ω—ã–π';
      } else if (completedOrders >= 5) {
        userRank = 'üí™ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
      }
      
      const statisticsHeader = `üìà –ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê P2P\n` +
                              `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                              `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${activeOrders}\n` +
                              `‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ –≤—Å–µ–≥–æ: ${completedOrders} –æ—Ä–¥–µ—Ä–æ–≤\n` +
                              `üìä –û–±—ä—ë–º –∑–∞ 30 –¥–Ω–µ–π: ${totalVolume.toFixed(2)} CES\n` +
                              `üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫: ‚ÇΩ${totalValue.toLocaleString('ru-RU')}\n` +
                              `‚ú® –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%\n` +
                              `üèÜ –†–∞–Ω–≥: ${userRank}\n` +
                              ` –ß–µ—ã –†–µ–π—Ç–∏–Ω–≥: ${stats.rating || '‚≠ê –ù–æ–≤–∏—á–æ–∫'}\n\n`;
      
      return statisticsHeader;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return 'üìà –ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê P2P\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n';
    }
  }

  // Handle buy orders display with pagination (edit existing messages)
  async handleP2PBuyOrders(ctx, page = 1) {
    try {
      const limit = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getMarketOrders(limit, offset);
      const chatId = ctx.chat.id.toString();
      
      // Filter out orders with null userId
      const validSellOrders = result.sellOrders.filter(order => order.userId !== null);
      
      // Buy orders section shows sell orders from database (users wanting to buy CES)
      if (validSellOrders.length === 0) {
        const message = `‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–∫–∞ –Ω–µ—Ç\n\n` +
                       `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É!`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]
        ]);
        
        // Clear any existing session data
        sessionManager.clearUserSession(chatId);
        return await ctx.reply(message, keyboard);
      }
      
      const totalPages = Math.ceil(result.sellOrdersCount / limit);
      
      // Check if this is pagination (edit mode) or initial display
      const sessionData = sessionManager.getSessionData(chatId, 'buyOrdersMessages');
      const isEditMode = sessionData && sessionData.orderMessageIds;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
      const reputationService = require('../services/reputationService');
      const orderMessageIds = [];
      
      // Display sell orders from database (users wanting to buy CES from market perspective)
      for (let i = 0; i < validSellOrders.length; i++) {
        const order = validSellOrders[i];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ username
        const username = order.userId ? (order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // Get standardized user statistics
        const stats = await reputationService.getStandardizedUserStats(order.userId ? order.userId._id : null);
        
        // Extract only emoji from rating (remove the number part)
        const emoji = stats && stats.rating ? stats.rating.split(' ').pop() : '‚≠ê'; // Gets the last part after space (emoji)
        
        // Calculate remaining time for this order
        const timeInfo = this.calculateRemainingTime(order);
        
        // Calculate limits in rubles based on price and amounts
        const minAmount = order.minTradeAmount || 1;
        const maxAmount = order.maxTradeAmount || order.remainingAmount;
        const minRubles = (minAmount * order.pricePerToken).toFixed(2);
        const maxRubles = (maxAmount * order.pricePerToken).toFixed(2);
        
        const orderMessage = `‚ÇΩ ${order.pricePerToken.toFixed(2)} / CES | @${username} ${emoji}\n` +
                           `–î–æ—Å—Ç—É–ø–Ω–æ: ${order.remainingAmount.toFixed(2)} CES\n` +
                           `–õ–∏–º–∏—Ç—ã: ${minRubles} - ${maxRubles} ‚ÇΩ\n` +
                           `‚è∞ –í—Ä–µ–º—è: ${timeInfo.timeText}`;
        
        // Check if this is the last order on page to add navigation
        const isLastOrder = i === validSellOrders.length - 1;
        let orderKeyboard;
        
        if (isLastOrder) {
          // Create navigation buttons for the last order
          const navigationButtons = [[Markup.button.callback('üü© –ö—É–ø–∏—Ç—å', order.userId && order.userId._id && order._id ? `buy_details_${order.userId._id}_${order._id}` : 'no_action')]];
          
          // Add pagination if there are multiple pages
          if (totalPages > 1) {
            const paginationButtons = [];
            
            // –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
            if (page === 1 && totalPages > 1) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_buy_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_buy_orders_page_${page + 1}`));
            }
            // –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
            else if (page === totalPages && totalPages > 1) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_buy_orders_page_${page - 1}`));
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_buy_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
            }
            // –ù–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö - –æ–±–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
            else if (page > 1 && page < totalPages) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_buy_orders_page_${page - 1}`));
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_buy_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_buy_orders_page_${page + 1}`));
            }
            
            if (paginationButtons.length > 0) {
              navigationButtons.push(paginationButtons);
            }
          }
          
          // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
          navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]);
          
          orderKeyboard = Markup.inlineKeyboard(navigationButtons);
        } else {
          orderKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üü© –ö—É–ø–∏—Ç—å', order.userId && order.userId._id && order._id ? `buy_details_${order.userId._id}_${order._id}` : 'no_action')]
          ]);
        }
        
        let orderMessageId;
        
        // Try to edit existing message if we have session data
        if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[i]) {
          try {
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              sessionData.orderMessageIds[i],
              null,
              orderMessage,
              orderKeyboard
            );
            orderMessageId = sessionData.orderMessageIds[i];
          } catch (error) {
            console.log(`Could not edit order message ${i}, sending new one`);
            const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
            orderMessageId = orderMsg.message_id;
          }
        } else {
          // Send new order message
          const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
          orderMessageId = orderMsg.message_id;
        }
        
        orderMessageIds.push(orderMessageId);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // Store message IDs in session for future edits
      sessionManager.setSessionData(chatId, 'buyOrdersMessages', {
        orderMessageIds
      });
      
    } catch (error) {
      console.error('Buy orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É.');
    }
  }

  // Handle sell orders display with pagination (edit existing messages)
  async handleP2PSellOrders(ctx, page = 1) {
    try {
      const limit = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getMarketOrders(limit, offset);
      const chatId = ctx.chat.id.toString();
      
      // Filter out orders with null userId
      const validBuyOrders = result.buyOrders.filter(order => order.userId !== null);
      
      // Sell orders section shows buy orders from database (users wanting to sell CES)
      if (validBuyOrders.length === 0) {
        const message = `‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ–∫–∞ –Ω–µ—Ç\n\n` +
                       `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]
        ]);
        
        // Clear any existing session data
        sessionManager.clearUserSession(chatId);
        return await ctx.reply(message, keyboard);
      }
      
      const totalPages = Math.ceil(result.buyOrdersCount / limit);
      
      // Check if this is pagination (edit mode) or initial display
      const sessionData = sessionManager.getSessionData(chatId, 'sellOrdersMessages');
      const isEditMode = sessionData && sessionData.orderMessageIds;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
      const reputationService = require('../services/reputationService');
      const orderMessageIds = [];
      
      // Display buy orders from database (users wanting to sell CES from market perspective)
      for (let i = 0; i < validBuyOrders.length; i++) {
        const order = validBuyOrders[i];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ username
        const username = order.userId ? (order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // Get standardized user statistics
        const stats = await reputationService.getStandardizedUserStats(order.userId ? order.userId._id : null);
        
        // Extract only emoji from rating (remove the number part)
        const emoji = stats && stats.rating ? stats.rating.split(' ').pop() : '‚≠ê'; // Gets the last part after space (emoji)
        
        // Calculate remaining time for this order
        const timeInfo = this.calculateRemainingTime(order);
        
        // Calculate limits in rubles based on price and amounts
        const minAmount = order.minTradeAmount || 1;
        const maxAmount = order.maxTradeAmount || order.remainingAmount;
        const minRubles = (minAmount * order.pricePerToken).toFixed(2);
        const maxRubles = (maxAmount * order.pricePerToken).toFixed(2);
        
        const orderMessage = `‚ÇΩ ${order.pricePerToken.toFixed(2)} / CES | @${username} ${emoji}\n` +
                           `–î–æ—Å—Ç—É–ø–Ω–æ: ${order.remainingAmount.toFixed(2)} CES\n` +
                           `–õ–∏–º–∏—Ç—ã: ${minRubles} - ${maxRubles} ‚ÇΩ\n` +
                           `‚è∞ –í—Ä–µ–º—è: ${timeInfo.timeText}`;
        
        // Check if this is the last order on page to add navigation
        const isLastOrder = i === validBuyOrders.length - 1;
        let orderKeyboard;
        
        if (isLastOrder) {
          // Create navigation buttons for the last order
          const navigationButtons = [[Markup.button.callback('üü• –ü—Ä–æ–¥–∞—Ç—å', order.userId && order.userId._id && order._id ? `sell_details_${order.userId._id}_${order._id}` : 'no_action')]];
          
          // Add pagination if there are multiple pages
          if (totalPages > 1) {
            const paginationButtons = [];
            
            // –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
            if (page === 1 && totalPages > 1) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_sell_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_sell_orders_page_${page + 1}`));
            }
            // –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
            else if (page === totalPages && totalPages > 1) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_sell_orders_page_${page - 1}`));
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_sell_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
            }
            // –ù–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö - –æ–±–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
            else if (page > 1 && page < totalPages) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_sell_orders_page_${page - 1}`));
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_sell_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_sell_orders_page_${page + 1}`));
            }
            
            if (paginationButtons.length > 0) {
              navigationButtons.push(paginationButtons);
            }
          }
          
          // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
          navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]);
          
          orderKeyboard = Markup.inlineKeyboard(navigationButtons);
        } else {
          orderKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üü• –ü—Ä–æ–¥–∞—Ç—å', order.userId && order.userId._id && order._id ? `sell_details_${order.userId._id}_${order._id}` : 'no_action')]
          ]);
        }
        
        let orderMessageId;
        
        // Try to edit existing message if we have session data
        if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[i]) {
          try {
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              sessionData.orderMessageIds[i],
              null,
              orderMessage,
              orderKeyboard
            );
            orderMessageId = sessionData.orderMessageIds[i];
          } catch (error) {
            console.log(`Could not edit order message ${i}, sending new one`);
            const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
            orderMessageId = orderMsg.message_id;
          }
        } else {
          // Send new order message
          const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
          orderMessageId = orderMsg.message_id;
        }
        
        orderMessageIds.push(orderMessageId);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // Store message IDs in session for future edits
      sessionManager.setSessionData(chatId, 'sellOrdersMessages', {
        orderMessageIds
      });
      
    } catch (error) {
      console.error('Sell orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} chatId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤
   * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async generateUserStatistics(chatId, result) {
    try {
      const p2pService = require('../services/p2pService');
      const { User } = require('../database/models');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ chatId: chatId });
      if (!user) return '';
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const activeOrders = result.orders.filter(order => order.status === 'active' || order.status === 'partial').length;
      const completedOrders = result.orders.filter(order => order.status === 'completed').length;
      const totalOrdersVolume = result.orders.reduce((sum, order) => {
        const filledAmount = order.filledAmount || 0;
        return sum + filledAmount;
      }, 0);
      
      const averageOrderSize = result.orders.length > 0 ? totalOrdersVolume / result.orders.length : 0;
      const successRate = result.orders.length > 0 ? Math.round((completedOrders / result.orders.length) * 100) : 0;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
      const reputationService = require('../services/reputationService');
      const stats = await reputationService.getStandardizedUserStats(user._id);
      
      const statisticsHeader = `üìà –ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n` +
                              `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                              `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${activeOrders}\n` +
                              `‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü: ${stats.ordersLast30Days} –æ—Ä–¥–µ—Ä–æ–≤\n` +
                              `üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: ${averageOrderSize.toFixed(2)} CES\n` +
                              `‚ú® –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.completionRateLast30Days}%\n` +
                              `üèÜ –†–µ–π—Ç–∏–Ω–≥: ${stats.rating}\n\n`;
      
      return statisticsHeader;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return '';
    }
  }

  // Handle user's orders with pagination (following market orders pattern)
  async handleP2PMyOrders(ctx, page = 1) {
    try {
      const chatId = ctx.chat.id.toString();
      const limit = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getUserOrders(chatId, limit, offset);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      let statisticsHeader = '';
      if (page === 1) {
        const user = await User.findOne({ chatId });
        if (user) {
          statisticsHeader = await this.generateUserStatistics(user);
        }
      }
      
      // Check if this is pagination (edit mode) or initial display
      const sessionData = sessionManager.getSessionData(chatId, 'myOrdersMessages');
      const isEditMode = sessionData && sessionData.orderMessageIds;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
      const orderMessageIds = [];
      const totalPages = Math.ceil(result.totalCount / limit);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      if (page === 1 && statisticsHeader && result.orders.length > 0) {
        const statsKeyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('üìà –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'p2p_analytics'),
            Markup.button.callback('üèÜ –¢–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤', 'p2p_top_traders')
          ]
        ]);
        
        const statsMsg = await ctx.reply(statisticsHeader, statsKeyboard);
        orderMessageIds.push(statsMsg.message_id);
        
        // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–æ–≤
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      
      if (result.orders.length === 0) {
        // Show empty state message with navigation
        const emptyMessage = page === 1 ? 
          `‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É CES !` :
          `‚ö†Ô∏è –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤`;
        
        // Create navigation buttons for empty state
        const navigationButtons = [];
        
        // Add pagination if there are multiple pages
        if (totalPages > 1) {
          const paginationButtons = [];
          
          // –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
          if (page === 1 && totalPages > 1) {
            paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
            paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
            paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_my_orders_page_${page + 1}`));
          }
          // –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
          else if (page === totalPages && totalPages > 1) {
            paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_my_orders_page_${page - 1}`));
            paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
            paginationButtons.push(Markup.button.callback('‚û°Ô∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
          }
          // –ù–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö - –æ–±–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
          else if (page > 1 && page < totalPages) {
            paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_my_orders_page_${page - 1}`));
            paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
            paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_my_orders_page_${page + 1}`));
          }
          
          if (paginationButtons.length > 0) {
            navigationButtons.push(paginationButtons);
          }
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
        navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]);
        
        const emptyKeyboard = Markup.inlineKeyboard(navigationButtons);
        
        let emptyMessageId;
        
        // Try to edit existing empty message if we have session data
        if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[0]) {
          try {
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              sessionData.orderMessageIds[0],
              null,
              emptyMessage,
              emptyKeyboard
            );
            emptyMessageId = sessionData.orderMessageIds[0];
          } catch (error) {
            console.log('Could not edit empty message, sending new one');
            const emptyMsg = await ctx.reply(emptyMessage, emptyKeyboard);
            emptyMessageId = emptyMsg.message_id;
          }
        } else {
          // Send new empty message
          const emptyMsg = await ctx.reply(emptyMessage, emptyKeyboard);
          emptyMessageId = emptyMsg.message_id;
        }
        
        orderMessageIds.push(emptyMessageId);
      } else {
        // Display orders if any exist
        for (let i = 0; i < result.orders.length; i++) {
          const order = result.orders[i];
          const orderNumber = offset + i + 1;
          const orderType = order.type === 'buy' ? 'üìà –ü–æ–∫—É–ø–∫–∞' : 'üìâ –ü—Ä–æ–¥–∞–∂–∞';
          
          // üéØ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–†–î–ï–†–ï
          const user = await User.findOne({ chatId });
          const enhancedInfo = await this.calculateEnhancedOrderInfo(order, user);
          const enhancedStatus = this.formatEnhancedStatus(order, enhancedInfo);
          const financialInfo = this.formatFinancialInfo(order, enhancedInfo);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
          let amountDisplay;
          if (order.status === 'completed') {
            amountDisplay = `‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: ${enhancedInfo.filledAmount.toFixed(4)} CES`;
          } else if (order.status === 'partial') {
            amountDisplay = `üü° –ü—Ä–æ–≥—Ä–µ—Å—Å: ${enhancedInfo.progressInfo}\n` +
                           `‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: ${enhancedInfo.filledAmount.toFixed(4)} CES\n` +
                           `üîÑ –û—Å—Ç–∞–ª–æ—Å—å: ${enhancedInfo.remainingAmount.toFixed(4)} CES`;
          } else {
            amountDisplay = `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${enhancedInfo.remainingAmount.toFixed(4)} CES`;
          }
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          let timeDisplay = '';
          if (order.status === 'active' || order.status === 'partial') {
            const timeInfo = this.calculateRemainingTime(order);
            const expiryTime = timeInfo.expiresAt ? timeInfo.expiresAt.toLocaleString('ru-RU', { 
              hour: '2-digit', 
              minute: '2-digit',
              day: '2-digit',
              month: '2-digit'
            }) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            timeDisplay = `\n‚è∞ –í—Ä–µ–º—è: ${enhancedInfo.timeInfo}\nüïõ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${expiryTime}`;
          }
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ä–¥–µ—Ä–µ
          const orderMessage = `${orderNumber}. ${orderType}\n` +
                              `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                              `üÜî ID: ${order._id.toString()}\n` +
                              `${amountDisplay}\n` +
                              `${financialInfo}\n` +
                              `${enhancedInfo.marketInfo}\n` +
                              `üìã –°—Ç–∞—Ç—É—Å: ${enhancedStatus}${timeDisplay}\n` +
                              `\nüìÖ –°–æ–∑–¥–∞–Ω: ${order.createdAt.toLocaleString('ru-RU')}`;
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ—Ä–¥–µ—Ä–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          const isLastOrder = i === result.orders.length - 1;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
          const orderKeyboard = await this.generateEnhancedOrderButtons(order, enhancedInfo);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ä–¥–µ—Ä–∞
          if (isLastOrder) {
            const enhancedButtons = orderKeyboard.reply_markup ? orderKeyboard.reply_markup.inline_keyboard : [];
            
            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            if (totalPages > 1) {
              const paginationButtons = [];
              
              if (page === 1 && totalPages > 1) {
                paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', 'no_action'));
                paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
                paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_my_orders_page_${page + 1}`));
              } else if (page === totalPages && totalPages > 1) {
                paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_my_orders_page_${page - 1}`));
                paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
                paginationButtons.push(Markup.button.callback('‚û°Ô∏è', 'no_action'));
              } else if (page > 1 && page < totalPages) {
                paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_my_orders_page_${page - 1}`));
                paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
                paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_my_orders_page_${page + 1}`));
              }
              
              if (paginationButtons.length > 0) {
                enhancedButtons.push(paginationButtons);
              }
            }
            
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            enhancedButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            orderKeyboard = enhancedButtons.length > 0 ? Markup.inlineKeyboard(enhancedButtons) : null;
          }
          
          let orderMessageId;
          
          // Try to edit existing message if we have session data
          if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[i]) {
            try {
              await ctx.telegram.editMessageText(
                ctx.chat.id,
                sessionData.orderMessageIds[i],
                null,
                orderMessage,
                orderKeyboard
              );
              orderMessageId = sessionData.orderMessageIds[i];
            } catch (error) {
              console.log(`Could not edit order message ${i}, sending new one`);
              const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
              orderMessageId = orderMsg.message_id;
            }
          } else {
            // Send new order message
            const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
            orderMessageId = orderMsg.message_id;
          }
          
          orderMessageIds.push(orderMessageId);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }
      
      // Store message IDs in session for future edits
      sessionManager.setSessionData(chatId, 'myOrdersMessages', {
        orderMessageIds
      });
      
    } catch (error) {
      console.error('My orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤.');
    }
  }
  /**
   * ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
   */
  async handleQuickCancelOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const p2pService = require('../services/p2pService');
      
      console.log(`‚ö° [QUICK-CANCEL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä—É—é –æ—Ç–º–µ–Ω—É –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const { P2POrder, User } = require('../database/models');
      const order = await P2POrder.findById(orderId).populate('userId');
      
      if (!order) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ä–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (order.userId.chatId !== chatId) {
        await ctx.answerCbQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –æ—Ä–¥–µ—Ä');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (!['active', 'partial'].includes(order.status)) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å');
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const orderType = order.type === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
      const remainingTime = this.calculateRemainingTime(order);
      
      const message = `‚ö° –ë–´–°–¢–†–ê–Ø –û–¢–ú–ï–ù–ê\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–û—Ä–¥–µ—Ä –Ω–∞ ${orderType}:\n` +
                     `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount} CES\n` +
                     `‚Ä¢ –¶–µ–Ω–∞: ‚ÇΩ${order.pricePerToken} –∑–∞ CES\n` +
                     `‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${order.remainingAmount} CES\n` +
                     `‚Ä¢ –í—Ä–µ–º—è: ${remainingTime.timeText}\n\n` +
                     `‚ùï –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä?`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', `confirm_cancel_${orderId}`),
          Markup.button.callback('‚ùå –ù–µ—Ç', 'p2p_my_orders')
        ]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ–Ω—ã:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞');
    }
  }
  
  /**
   * ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
   */
  async handleConfirmCancelOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const p2pService = require('../services/p2pService');
      
      console.log(`‚úÖ [CONFIRM-CANCEL] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      
      // –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ p2pService
      const result = await p2pService.cancelOrder(chatId, orderId);
      
      if (result.success) {
        await ctx.reply(`‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!\n\nüí∞ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
        setTimeout(() => this.handleP2PMyOrders(ctx), 1500);
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ${result.message}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞.');
    }
  }
  
  /**
   * üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ä–¥–µ—Ä–∞
   */
  async handleExtendOrderTime(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const { P2POrder, User } = require('../database/models');
      
      console.log(`üîÑ [EXTEND-TIME] –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä
      const order = await P2POrder.findById(orderId).populate('userId');
      
      if (!order || order.userId.chatId !== chatId) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      if (!['active', 'partial'].includes(order.status)) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å (–º–∞–∫—Å–∏–º—É–º 1 —Ä–∞–∑ –≤ —á–∞—Å)
      const now = new Date();
      const lastExtension = order.lastTimeExtension || order.createdAt;
      const timeSinceLastExtension = now.getTime() - new Date(lastExtension).getTime();
      const minExtensionInterval = 60 * 60 * 1000; // 1 —á–∞—Å
      
      if (timeSinceLastExtension < minExtensionInterval) {
        const remainingMinutes = Math.ceil((minExtensionInterval - timeSinceLastExtension) / 60000);
        await ctx.answerCbQuery(`‚ö†Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${remainingMinutes} –º–∏–Ω.`);
        return;
      }
      
      // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const originalTimeLimit = order.tradeTimeLimit || 30;
      const extensionTime = Math.ceil(originalTimeLimit / 2); // –ü–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
      order.createdAt = new Date(now.getTime() - (originalTimeLimit - extensionTime) * 60 * 1000);
      order.lastTimeExtension = now;
      await order.save();
      
      await ctx.answerCbQuery(`‚úÖ –í—Ä–µ–º—è –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ ${extensionTime} –º–∏–Ω.`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      setTimeout(() => this.handleP2PMyOrders(ctx), 1000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è');
    }
  }
  /**
   * üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ä–¥–µ—Ä–∞
   */
  async handleOrderAnalytics(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const { P2POrder } = require('../database/models');
      
      const order = await P2POrder.findById(orderId).populate('userId');
      if (!order || order.userId.chatId !== chatId) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      const enhancedInfo = await this.calculateEnhancedOrderInfo(order);
      const timeInfo = this.calculateRemainingTime(order);
      
      const analytics = `üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –û–†–î–ï–†–ê\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `üè∑Ô∏è ID: ${order._id}\n` +
                       `üìà –¢–∏–ø: ${order.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}\n\n` +
                       `üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n` +
                       `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${enhancedInfo.totalValue.toLocaleString('ru-RU')}\n` +
                       `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: ‚ÇΩ${enhancedInfo.commission.toLocaleString('ru-RU')}\n` +
                       `‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–∫–∞: ${enhancedInfo.priceDeviation.toFixed(1)}%\n\n` +
                       `üìà –ü–†–û–ì–†–ï–°–° –ò–°–ü–û–õ–ù–ï–ù–ò–Ø:\n` +
                       `${this.generateProgressBar(enhancedInfo.progressPercent)} ${enhancedInfo.progressPercent}%\n` +
                       `‚Ä¢ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: ${enhancedInfo.filledAmount.toFixed(4)} CES\n` +
                       `‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${enhancedInfo.remainingAmount.toFixed(4)} CES\n\n` +
                       `‚è∞ –í–†–ï–ú–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n` +
                       `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${timeInfo.timeText}\n` +
                       `‚Ä¢ –°–æ–∑–¥–∞–Ω: ${order.createdAt.toLocaleString('ru-RU')}\n`;
      
      if (timeInfo.expiresAt) {
        analytics += `‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${timeInfo.expiresAt.toLocaleString('ru-RU')}\n`;
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—Ä–¥–µ—Ä–∞–º', 'p2p_my_orders')]
      ]);
      
      await ctx.reply(analytics, keyboard);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ä–¥–µ—Ä–∞:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    }
  }
  
  /**
   * üìà –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–∞
   */
  async handleOrderHistory(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const { P2POrder, P2PTrade } = require('../database/models');
      
      const order = await P2POrder.findById(orderId).populate('userId');
      if (!order || order.userId.chatId !== chatId) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
      const trades = await P2PTrade.find({
        $or: [
          { buyOrderId: orderId },
          { sellOrderId: orderId }
        ]
      }).populate(['buyerId', 'sellerId']).sort({ createdAt: -1 });
      
      let history = `üìà –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–ê\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                   `üè∑Ô∏è ID: ${order._id}\n` +
                   `üìÖ –°–æ–∑–¥–∞–Ω: ${order.createdAt.toLocaleString('ru-RU')}\n\n`;
      
      if (trades.length === 0) {
        history += `üí≠ –ü–æ —ç—Ç–æ–º—É –æ—Ä–¥–µ—Ä—É –µ—â—ë –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫`;
      } else {
        history += `üíº –°–î–ï–õ–ö–ò (${trades.length}):\n`;
        
        trades.slice(0, 5).forEach((trade, index) => { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
          const statusEmoji = {
            'completed': '‚úÖ',
            'cancelled': '‚ùå',
            'disputed': '‚ö†Ô∏è',
            'escrow_locked': 'üîí'
          }[trade.status] || '‚ùî';
          
          history += `\n${index + 1}. ${statusEmoji} ‚ÇΩ${trade.totalValue.toLocaleString('ru-RU')} | ${trade.amount.toFixed(4)} CES\n`;
          history += `   ${trade.createdAt.toLocaleString('ru-RU')}\n`;
        });
        
        if (trades.length > 5) {
          history += `\n‚Ä¶ –∏ –µ—â—ë ${trades.length - 5} —Å–¥–µ–ª–æ–∫`;
        }
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—Ä–¥–µ—Ä–∞–º', 'p2p_my_orders')]
      ]);
      
      await ctx.reply(history, keyboard);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–∞:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
    }
  }
  
  /**
   * üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
   */
  async handleDuplicateOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const { P2POrder } = require('../database/models');
      
      const order = await P2POrder.findById(orderId).populate('userId');
      if (!order || order.userId.chatId !== chatId) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      const message = `üîÑ –ü–û–í–¢–û–†–ò–¢–¨ –û–†–î–ï–†\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ?\n\n` +
                     `üìâ –¢–∏–ø: ${order.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}\n` +
                     `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount.toFixed(4)} CES\n` +
                     `üí∞ –¶–µ–Ω–∞: ‚ÇΩ${order.pricePerToken.toLocaleString('ru-RU')} –∑–∞ CES`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –î–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å', `confirm_duplicate_${orderId}`),
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_my_orders')
        ]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è');
    }
  }
  
  /**
   * üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ä–¥–µ—Ä–æ–º
   */
  async handleShareOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const { P2POrder } = require('../database/models');
      
      const order = await P2POrder.findById(orderId).populate('userId');
      if (!order || order.userId.chatId !== chatId) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      const shareText = `üì§ P2P –û–†–î–ï–†\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `${order.type === 'buy' ? 'üìà –ü–û–ö–£–ü–ö–ê' : 'üìâ –ü–†–û–î–ê–ñ–ê'} CES\n` +
                       `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.remainingAmount.toFixed(4)} CES\n` +
                       `üí∞ –¶–µ–Ω–∞: ‚ÇΩ${order.pricePerToken.toLocaleString('ru-RU')} –∑–∞ CES\n` +
                       `üíµ –°—É–º–º–∞: ‚ÇΩ${(order.remainingAmount * order.pricePerToken).toLocaleString('ru-RU')}\n\n` +
                       `üè∑Ô∏è ID: ${order._id}\n\n` +
                       `ü§ñ @MetawhaleP2PBot`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.url('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram', `https://t.me/share/url?url=${encodeURIComponent(shareText)}`)
        ],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_my_orders')]
      ]);
      
      await ctx.reply(`üì§ –ü–û–î–ï–õ–ò–¢–¨–°–Ø –û–†–î–ï–†–û–ú\n\n${shareText}`, keyboard);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ä–¥–µ—Ä–æ–º:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è');
    }
  }
  /**
   * ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
   */
  async handleConfirmDuplicateOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const { P2POrder, User } = require('../database/models');
      
      const order = await P2POrder.findById(orderId).populate('userId');
      if (!order || order.userId.chatId !== chatId) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–≥–æ
      const p2pService = require('../services/p2pService');
      
      try {
        let result;
        if (order.type === 'buy') {
          result = await p2pService.createBuyOrder(
            chatId,
            order.amount,
            order.pricePerToken,
            order.minTradeAmount,
            order.maxTradeAmount
          );
        } else {
          result = await p2pService.createSellOrder(
            chatId,
            order.amount,
            order.pricePerToken,
            order.minTradeAmount,
            order.maxTradeAmount
          );
        }
        
        await ctx.reply(`‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—Ç–æ—Ä—ë–Ω!\n\nüÜï ID: ${result._id}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
        setTimeout(() => this.handleP2PMyOrders(ctx), 1500);
        
      } catch (error) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${error.message}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è');
    }
  }
}

module.exports = P2POrdersHandler;