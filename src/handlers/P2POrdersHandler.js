/**
 * P2P Orders Handler
 * Handles complex P2P order display, pagination, and order management
 */

const { Markup } = require('telegraf');
const p2pService = require('../services/p2pService');
const { User } = require('../database/models');
const sessionManager = require('./SessionManager');

class P2POrdersHandler {
  
  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ—Ä–¥–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
   * @param {Object} order - –û—Ä–¥–µ—Ä
   * @returns {Object} - {timeText: string, isExpiringSoon: boolean, isExpired: boolean}
   */
  calculateRemainingTime(order) {
    try {
      const now = new Date();
      const timeLimit = order.tradeTimeLimit || 30; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç
      const orderCreatedAt = new Date(order.createdAt);
      const expiresAt = new Date(orderCreatedAt.getTime() + timeLimit * 60 * 1000);
      const timeRemaining = expiresAt.getTime() - now.getTime();
      
      if (timeRemaining <= 0) {
        return {
          timeText: '‚õî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω',
          isExpiringSoon: false,
          isExpired: true
        };
      }
      
      const minutesRemaining = Math.ceil(timeRemaining / 60000);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
      let timeText, isExpiringSoon;
      
      if (minutesRemaining <= 5) {
        timeText = `üî¥ ${minutesRemaining} –º–∏–Ω.`; // –ö—Ä–∞—Å–Ω—ã–π - –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
        isExpiringSoon = true;
      } else if (minutesRemaining <= 10) {
        timeText = `üü° ${minutesRemaining} –º–∏–Ω.`; // –ñ—ë–ª—Ç—ã–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        isExpiringSoon = true;
      } else {
        timeText = `üü¢ ${minutesRemaining} –º–∏–Ω.`; // –ó–µ–ª—ë–Ω—ã–π - –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        isExpiringSoon = false;
      }
      
      return {
        timeText,
        isExpiringSoon,
        isExpired: false
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ä–¥–µ—Ä–∞:', error);
      return {
        timeText: '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        isExpiringSoon: false,
        isExpired: false
      };
    }
  }
  // Handle buy orders display with pagination (edit existing messages)
  async handleP2PBuyOrders(ctx, page = 1) {
    try {
      const limit = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getMarketOrders(limit, offset);
      const chatId = ctx.chat.id.toString();
      
      // Filter out orders with null userId
      const validSellOrders = result.sellOrders.filter(order => order.userId !== null);
      
      // Buy orders section shows sell orders from database (users wanting to buy CES)
      if (validSellOrders.length === 0) {
        const message = `‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–∫–∞ –Ω–µ—Ç\n\n` +
                       `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É!`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]
        ]);
        
        // Clear any existing session data
        sessionManager.clearUserSession(chatId);
        return await ctx.reply(message, keyboard);
      }
      
      const totalPages = Math.ceil(result.sellOrdersCount / limit);
      
      // Check if this is pagination (edit mode) or initial display
      const sessionData = sessionManager.getSessionData(chatId, 'buyOrdersMessages');
      const isEditMode = sessionData && sessionData.orderMessageIds;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
      const reputationService = require('../services/reputationService');
      const orderMessageIds = [];
      
      // Display sell orders from database (users wanting to buy CES from market perspective)
      for (let i = 0; i < validSellOrders.length; i++) {
        const order = validSellOrders[i];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ username
        const username = order.userId ? (order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // Get standardized user statistics
        const stats = await reputationService.getStandardizedUserStats(order.userId ? order.userId._id : null);
        
        // Extract only emoji from rating (remove the number part)
        const emoji = stats && stats.rating ? stats.rating.split(' ').pop() : '‚≠ê'; // Gets the last part after space (emoji)
        
        // Calculate remaining time for this order
        const timeInfo = this.calculateRemainingTime(order);
        
        // Calculate limits in rubles based on price and amounts
        const minAmount = order.minTradeAmount || 1;
        const maxAmount = order.maxTradeAmount || order.remainingAmount;
        const minRubles = (minAmount * order.pricePerToken).toFixed(2);
        const maxRubles = (maxAmount * order.pricePerToken).toFixed(2);
        
        const orderMessage = `‚ÇΩ ${order.pricePerToken.toFixed(2)} / CES | @${username} ${emoji}\n` +
                           `–î–æ—Å—Ç—É–ø–Ω–æ: ${order.remainingAmount.toFixed(2)} CES\n` +
                           `–õ–∏–º–∏—Ç—ã: ${minRubles} - ${maxRubles} ‚ÇΩ\n` +
                           `‚è∞ –í—Ä–µ–º—è: ${timeInfo.timeText}`;
        
        // Check if this is the last order on page to add navigation
        const isLastOrder = i === validSellOrders.length - 1;
        let orderKeyboard;
        
        if (isLastOrder) {
          // Create navigation buttons for the last order
          const navigationButtons = [[Markup.button.callback('üü© –ö—É–ø–∏—Ç—å', order.userId && order.userId._id && order._id ? `buy_details_${order.userId._id}_${order._id}` : 'no_action')]];
          
          // Add pagination if there are multiple pages
          if (totalPages > 1) {
            const paginationButtons = [];
            
            // –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
            if (page === 1 && totalPages > 1) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_buy_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_buy_orders_page_${page + 1}`));
            }
            // –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
            else if (page === totalPages && totalPages > 1) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_buy_orders_page_${page - 1}`));
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_buy_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
            }
            // –ù–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö - –æ–±–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
            else if (page > 1 && page < totalPages) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_buy_orders_page_${page - 1}`));
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_buy_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_buy_orders_page_${page + 1}`));
            }
            
            if (paginationButtons.length > 0) {
              navigationButtons.push(paginationButtons);
            }
          }
          
          // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
          navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]);
          
          orderKeyboard = Markup.inlineKeyboard(navigationButtons);
        } else {
          orderKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üü© –ö—É–ø–∏—Ç—å', order.userId && order.userId._id && order._id ? `buy_details_${order.userId._id}_${order._id}` : 'no_action')]
          ]);
        }
        
        let orderMessageId;
        
        // Try to edit existing message if we have session data
        if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[i]) {
          try {
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              sessionData.orderMessageIds[i],
              null,
              orderMessage,
              orderKeyboard
            );
            orderMessageId = sessionData.orderMessageIds[i];
          } catch (error) {
            console.log(`Could not edit order message ${i}, sending new one`);
            const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
            orderMessageId = orderMsg.message_id;
          }
        } else {
          // Send new order message
          const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
          orderMessageId = orderMsg.message_id;
        }
        
        orderMessageIds.push(orderMessageId);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // Store message IDs in session for future edits
      sessionManager.setSessionData(chatId, 'buyOrdersMessages', {
        orderMessageIds
      });
      
    } catch (error) {
      console.error('Buy orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É.');
    }
  }

  // Handle sell orders display with pagination (edit existing messages)
  async handleP2PSellOrders(ctx, page = 1) {
    try {
      const limit = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getMarketOrders(limit, offset);
      const chatId = ctx.chat.id.toString();
      
      // Filter out orders with null userId
      const validBuyOrders = result.buyOrders.filter(order => order.userId !== null);
      
      // Sell orders section shows buy orders from database (users wanting to sell CES)
      if (validBuyOrders.length === 0) {
        const message = `‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ–∫–∞ –Ω–µ—Ç\n\n` +
                       `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]
        ]);
        
        // Clear any existing session data
        sessionManager.clearUserSession(chatId);
        return await ctx.reply(message, keyboard);
      }
      
      const totalPages = Math.ceil(result.buyOrdersCount / limit);
      
      // Check if this is pagination (edit mode) or initial display
      const sessionData = sessionManager.getSessionData(chatId, 'sellOrdersMessages');
      const isEditMode = sessionData && sessionData.orderMessageIds;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
      const reputationService = require('../services/reputationService');
      const orderMessageIds = [];
      
      // Display buy orders from database (users wanting to sell CES from market perspective)
      for (let i = 0; i < validBuyOrders.length; i++) {
        const order = validBuyOrders[i];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ username
        const username = order.userId ? (order.userId.username || order.userId.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // Get standardized user statistics
        const stats = await reputationService.getStandardizedUserStats(order.userId ? order.userId._id : null);
        
        // Extract only emoji from rating (remove the number part)
        const emoji = stats && stats.rating ? stats.rating.split(' ').pop() : '‚≠ê'; // Gets the last part after space (emoji)
        
        // Calculate remaining time for this order
        const timeInfo = this.calculateRemainingTime(order);
        
        // Calculate limits in rubles based on price and amounts
        const minAmount = order.minTradeAmount || 1;
        const maxAmount = order.maxTradeAmount || order.remainingAmount;
        const minRubles = (minAmount * order.pricePerToken).toFixed(2);
        const maxRubles = (maxAmount * order.pricePerToken).toFixed(2);
        
        const orderMessage = `‚ÇΩ ${order.pricePerToken.toFixed(2)} / CES | @${username} ${emoji}\n` +
                           `–î–æ—Å—Ç—É–ø–Ω–æ: ${order.remainingAmount.toFixed(2)} CES\n` +
                           `–õ–∏–º–∏—Ç—ã: ${minRubles} - ${maxRubles} ‚ÇΩ\n` +
                           `‚è∞ –í—Ä–µ–º—è: ${timeInfo.timeText}`;
        
        // Check if this is the last order on page to add navigation
        const isLastOrder = i === validBuyOrders.length - 1;
        let orderKeyboard;
        
        if (isLastOrder) {
          // Create navigation buttons for the last order
          const navigationButtons = [[Markup.button.callback('üü• –ü—Ä–æ–¥–∞—Ç—å', order.userId && order.userId._id && order._id ? `sell_details_${order.userId._id}_${order._id}` : 'no_action')]];
          
          // Add pagination if there are multiple pages
          if (totalPages > 1) {
            const paginationButtons = [];
            
            // –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
            if (page === 1 && totalPages > 1) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_sell_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_sell_orders_page_${page + 1}`));
            }
            // –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
            else if (page === totalPages && totalPages > 1) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_sell_orders_page_${page - 1}`));
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_sell_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
            }
            // –ù–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö - –æ–±–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
            else if (page > 1 && page < totalPages) {
              paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_sell_orders_page_${page - 1}`));
              paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_sell_orders'));
              paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_sell_orders_page_${page + 1}`));
            }
            
            if (paginationButtons.length > 0) {
              navigationButtons.push(paginationButtons);
            }
          }
          
          // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
          navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_market_orders')]);
          
          orderKeyboard = Markup.inlineKeyboard(navigationButtons);
        } else {
          orderKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üü• –ü—Ä–æ–¥–∞—Ç—å', order.userId && order.userId._id && order._id ? `sell_details_${order.userId._id}_${order._id}` : 'no_action')]
          ]);
        }
        
        let orderMessageId;
        
        // Try to edit existing message if we have session data
        if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[i]) {
          try {
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              sessionData.orderMessageIds[i],
              null,
              orderMessage,
              orderKeyboard
            );
            orderMessageId = sessionData.orderMessageIds[i];
          } catch (error) {
            console.log(`Could not edit order message ${i}, sending new one`);
            const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
            orderMessageId = orderMsg.message_id;
          }
        } else {
          // Send new order message
          const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
          orderMessageId = orderMsg.message_id;
        }
        
        orderMessageIds.push(orderMessageId);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // Store message IDs in session for future edits
      sessionManager.setSessionData(chatId, 'sellOrdersMessages', {
        orderMessageIds
      });
      
    } catch (error) {
      console.error('Sell orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.');
    }
  }

  // Handle user's orders with pagination (following market orders pattern)
  async handleP2PMyOrders(ctx, page = 1) {
    try {
      const chatId = ctx.chat.id.toString();
      const limit = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const offset = (page - 1) * limit;
      const result = await p2pService.getUserOrders(chatId, limit, offset);
      
      // Check if this is pagination (edit mode) or initial display
      const sessionData = sessionManager.getSessionData(chatId, 'myOrdersMessages');
      const isEditMode = sessionData && sessionData.orderMessageIds;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
      const orderMessageIds = [];
      const totalPages = Math.ceil(result.totalCount / limit);
      
      if (result.orders.length === 0) {
        // Show empty state message with navigation
        const emptyMessage = page === 1 ? 
          `‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É CES !` :
          `‚ö†Ô∏è –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤`;
        
        // Create navigation buttons for empty state
        const navigationButtons = [];
        
        // Add pagination if there are multiple pages
        if (totalPages > 1) {
          const paginationButtons = [];
          
          // –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
          if (page === 1 && totalPages > 1) {
            paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
            paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
            paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_my_orders_page_${page + 1}`));
          }
          // –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
          else if (page === totalPages && totalPages > 1) {
            paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_my_orders_page_${page - 1}`));
            paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
            paginationButtons.push(Markup.button.callback('‚û°Ô∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
          }
          // –ù–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö - –æ–±–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
          else if (page > 1 && page < totalPages) {
            paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_my_orders_page_${page - 1}`));
            paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
            paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_my_orders_page_${page + 1}`));
          }
          
          if (paginationButtons.length > 0) {
            navigationButtons.push(paginationButtons);
          }
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
        navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]);
        
        const emptyKeyboard = Markup.inlineKeyboard(navigationButtons);
        
        let emptyMessageId;
        
        // Try to edit existing empty message if we have session data
        if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[0]) {
          try {
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              sessionData.orderMessageIds[0],
              null,
              emptyMessage,
              emptyKeyboard
            );
            emptyMessageId = sessionData.orderMessageIds[0];
          } catch (error) {
            console.log('Could not edit empty message, sending new one');
            const emptyMsg = await ctx.reply(emptyMessage, emptyKeyboard);
            emptyMessageId = emptyMsg.message_id;
          }
        } else {
          // Send new empty message
          const emptyMsg = await ctx.reply(emptyMessage, emptyKeyboard);
          emptyMessageId = emptyMsg.message_id;
        }
        
        orderMessageIds.push(emptyMessageId);
      } else {
        // Display orders if any exist
        for (let i = 0; i < result.orders.length; i++) {
          const order = result.orders[i];
          const orderNumber = offset + i + 1;
          const orderType = order.type === 'buy' ? 'üìà –ü–æ–∫—É–ø–∫–∞' : 'üìâ –ü—Ä–æ–¥–∞–∂–∞';
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
          let status;
          if (order.status === 'active') {
            status = '–ê–∫—Ç–∏–≤–µ–Ω';
          } else if (order.status === 'partial') {
            status = '–ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω';
          } else if (order.status === 'completed') {
            status = '‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω';
          } else {
            status = '‚úñÔ∏è –û—Ç–º–µ–Ω–µ–Ω';
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
          let amountDisplay;
          if (order.status === 'completed') {
            amountDisplay = `–ò—Å–ø–æ–ª–Ω–µ–Ω–æ: ${(order.filledAmount || order.amount).toFixed(2)} CES`;
          } else if (order.status === 'partial') {
            const filled = order.filledAmount || 0;
            const remaining = order.remainingAmount || 0;
            amountDisplay = `–û—Å—Ç–∞–ª–æ—Å—å: ${remaining.toFixed(2)} CES | –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: ${filled.toFixed(2)} CES`;
          } else {
            amountDisplay = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${(order.remainingAmount || order.amount).toFixed(2)} CES`;
          }
          
          // Calculate remaining time for active orders
          let timeDisplay = '';
          if (order.status === 'active' || order.status === 'partial') {
            const timeInfo = this.calculateRemainingTime(order);
            timeDisplay = `\n‚è∞ –í—Ä–µ–º—è: ${timeInfo.timeText}`;
          }
          
          const orderMessage = `${orderNumber}. ${orderType}\n` +
                              `${amountDisplay}\n` +
                              `–¶–µ–Ω–∞: ‚ÇΩ ${order.pricePerToken.toFixed(2)} –∑–∞ CES\n` +
                              `–°—Ç–∞—Ç—É—Å: ${status}${timeDisplay}\n` +
                              `${order.createdAt.toLocaleString('ru-RU')}\n` +
                              `ID: ${order._id.toString().substr(0, 8)}...`;
          
          // Check if this is the last order on page to add navigation
          const isLastOrder = i === result.orders.length - 1;
          let orderKeyboard;
          
          if (isLastOrder) {
            // Create navigation buttons for the last order
            const navigationButtons = [];
            
            // Add cancel button for active and partial orders
            if (order.status === 'active' || order.status === 'partial') {
              const quickButtons = [];
              
              // –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ–Ω—ã
              quickButtons.push(Markup.button.callback(`‚ö° –û—Ç–º–µ–Ω–∏—Ç—å`, `quick_cancel_${order._id}`));
              
              // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å)
              const timeInfo = this.calculateRemainingTime(order);
              if (timeInfo.isExpiringSoon || timeInfo.isExpired) {
                quickButtons.push(Markup.button.callback(`üîÑ +–≤—Ä–µ–º—è`, `extend_time_${order._id}`));
              }
              
              navigationButtons.push(quickButtons);
            }
            
            // Add pagination if there are multiple pages
            if (totalPages > 1) {
              const paginationButtons = [];
              
              // –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
              if (page === 1 && totalPages > 1) {
                paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
                paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
                paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_my_orders_page_${page + 1}`));
              }
              // –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–∞–≤–∞—è
              else if (page === totalPages && totalPages > 1) {
                paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_my_orders_page_${page - 1}`));
                paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
                paginationButtons.push(Markup.button.callback('‚û°Ô∏è', 'no_action')); // –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
              }
              // –ù–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö - –æ–±–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
              else if (page > 1 && page < totalPages) {
                paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `p2p_my_orders_page_${page - 1}`));
                paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'p2p_my_orders'));
                paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `p2p_my_orders_page_${page + 1}`));
              }
              
              if (paginationButtons.length > 0) {
                navigationButtons.push(paginationButtons);
              }
            }
            
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–Ω–∏–∑—É
            navigationButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]);
            
            orderKeyboard = Markup.inlineKeyboard(navigationButtons);
          } else {
            // Add cancel button for active and partial orders (non-last orders)
            if (order.status === 'active' || order.status === 'partial') {
              const quickButtons = [];
              
              // –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ–Ω—ã
              quickButtons.push(Markup.button.callback(`‚ö° –û—Ç–º–µ–Ω–∏—Ç—å`, `quick_cancel_${order._id}`));
              
              // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
              const timeInfo = this.calculateRemainingTime(order);
              if (timeInfo.isExpiringSoon || timeInfo.isExpired) {
                quickButtons.push(Markup.button.callback(`üîÑ +–≤—Ä–µ–º—è`, `extend_time_${order._id}`));
              }
              
              orderKeyboard = Markup.inlineKeyboard([quickButtons]);
            } else {
              orderKeyboard = null;
            }
          }
          
          let orderMessageId;
          
          // Try to edit existing message if we have session data
          if (isEditMode && sessionData.orderMessageIds && sessionData.orderMessageIds[i]) {
            try {
              await ctx.telegram.editMessageText(
                ctx.chat.id,
                sessionData.orderMessageIds[i],
                null,
                orderMessage,
                orderKeyboard
              );
              orderMessageId = sessionData.orderMessageIds[i];
            } catch (error) {
              console.log(`Could not edit order message ${i}, sending new one`);
              const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
              orderMessageId = orderMsg.message_id;
            }
          } else {
            // Send new order message
            const orderMsg = await ctx.reply(orderMessage, orderKeyboard);
            orderMessageId = orderMsg.message_id;
          }
          
          orderMessageIds.push(orderMessageId);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }
      
      // Store message IDs in session for future edits
      sessionManager.setSessionData(chatId, 'myOrdersMessages', {
        orderMessageIds
      });
      
    } catch (error) {
      console.error('My orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤.');
    }
  }
  /**
   * ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
   */
  async handleQuickCancelOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const p2pService = require('../services/p2pService');
      
      console.log(`‚ö° [QUICK-CANCEL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä—É—é –æ—Ç–º–µ–Ω—É –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const { P2POrder, User } = require('../database/models');
      const order = await P2POrder.findById(orderId).populate('userId');
      
      if (!order) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ä–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (order.userId.chatId !== chatId) {
        await ctx.answerCbQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –æ—Ä–¥–µ—Ä');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (!['active', 'partial'].includes(order.status)) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å');
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const orderType = order.type === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
      const remainingTime = this.calculateRemainingTime(order);
      
      const message = `‚ö° –ë–´–°–¢–†–ê–Ø –û–¢–ú–ï–ù–ê\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–û—Ä–¥–µ—Ä –Ω–∞ ${orderType}:\n` +
                     `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount} CES\n` +
                     `‚Ä¢ –¶–µ–Ω–∞: ‚ÇΩ${order.pricePerToken} –∑–∞ CES\n` +
                     `‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${order.remainingAmount} CES\n` +
                     `‚Ä¢ –í—Ä–µ–º—è: ${remainingTime.timeText}\n\n` +
                     `‚ùï –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä?`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', `confirm_cancel_${orderId}`),
          Markup.button.callback('‚ùå –ù–µ—Ç', 'p2p_my_orders')
        ]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ–Ω—ã:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞');
    }
  }
  
  /**
   * ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
   */
  async handleConfirmCancelOrder(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const p2pService = require('../services/p2pService');
      
      console.log(`‚úÖ [CONFIRM-CANCEL] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      
      // –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ p2pService
      const result = await p2pService.cancelOrder(chatId, orderId);
      
      if (result.success) {
        await ctx.reply(`‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!\n\nüí∞ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
        setTimeout(() => this.handleP2PMyOrders(ctx), 1500);
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ${result.message}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞.');
    }
  }
  
  /**
   * üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ä–¥–µ—Ä–∞
   */
  async handleExtendOrderTime(ctx, orderId) {
    try {
      const chatId = ctx.chat.id.toString();
      const { P2POrder, User } = require('../database/models');
      
      console.log(`üîÑ [EXTEND-TIME] –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä
      const order = await P2POrder.findById(orderId).populate('userId');
      
      if (!order || order.userId.chatId !== chatId) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      if (!['active', 'partial'].includes(order.status)) {
        await ctx.answerCbQuery('‚ùå –û—Ä–¥–µ—Ä –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å (–º–∞–∫—Å–∏–º—É–º 1 —Ä–∞–∑ –≤ —á–∞—Å)
      const now = new Date();
      const lastExtension = order.lastTimeExtension || order.createdAt;
      const timeSinceLastExtension = now.getTime() - new Date(lastExtension).getTime();
      const minExtensionInterval = 60 * 60 * 1000; // 1 —á–∞—Å
      
      if (timeSinceLastExtension < minExtensionInterval) {
        const remainingMinutes = Math.ceil((minExtensionInterval - timeSinceLastExtension) / 60000);
        await ctx.answerCbQuery(`‚ö†Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${remainingMinutes} –º–∏–Ω.`);
        return;
      }
      
      // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const originalTimeLimit = order.tradeTimeLimit || 30;
      const extensionTime = Math.ceil(originalTimeLimit / 2); // –ü–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
      order.createdAt = new Date(now.getTime() - (originalTimeLimit - extensionTime) * 60 * 1000);
      order.lastTimeExtension = now;
      await order.save();
      
      await ctx.answerCbQuery(`‚úÖ –í—Ä–µ–º—è –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ ${extensionTime} –º–∏–Ω.`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      setTimeout(() => this.handleP2PMyOrders(ctx), 1000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è');
    }
  }
}

module.exports = P2POrdersHandler;