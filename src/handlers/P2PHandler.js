/**
 * P2P Handler
 * Handles all P2P trading operations including orders, market display, and user interactions
 */

const { Markup } = require('telegraf');
const p2pService = require('../services/p2pService');
const walletService = require('../services/walletService');
const { User, P2PTrade } = require('../database/models');
const sessionManager = require('./SessionManager');

class P2PHandler {
  // Handle P2P menu
  async handleP2PMenu(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üîÑ Handling P2P menu callback for user ${chatId}`);
      
      // Clear any existing session when entering P2P menu
      sessionManager.clearUserSession(chatId);
      
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (!walletInfo || !walletInfo.hasWallet) {
        const message = '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞.\n\n' +
                       'üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è P2P —Ñ—É–Ω–∫—Ü–∏–π.';
        
        // Remove the "–°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫" button as it should only be in the personal cabinet
        const keyboard = Markup.inlineKeyboard([]);
        
        console.log(`üì§ Sending wallet creation message to user ${chatId} (callback version)`);
        return await ctx.reply(message, keyboard);
      }
      
      // Get user reputation data
      const reputationService = require('../services/reputationService');
      const { User } = require('../database/models');
      const user = await User.findOne({ chatId });
      
      // Get standardized user statistics
      const stats = await reputationService.getStandardizedUserStats(user._id);
      
      // Get user's full name from P2P profile or fallback to Telegram name
      let userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      if (user && user.p2pProfile && user.p2pProfile.fullName) {
        userName = user.p2pProfile.fullName;
      } else if (user && user.firstName) {
        userName = user.firstName;
        if (user.lastName) {
          userName += ` ${user.lastName}`;
        }
      }
      
      // Get user's current network and available tokens
      const userNetworkService = require('../services/userNetworkService');
      const multiChainService = require('../services/multiChainService');
      
      const currentNetwork = await userNetworkService.getUserNetwork(chatId);
      const networkTokens = multiChainService.getNetworkTokens(currentNetwork);
      const networkInfo = await userNetworkService.getNetworkInfo(chatId);
      
      // Prepare message text with network info
      const message = `üîÑ P2P –ë–ò–†–ñ–ê\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `${userName}\n` +
                     `üåê –¢–µ–∫—É—â–∞—è —Å–µ—Ç—å: ${networkInfo}\n\n` +
                     `–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ 30 –¥–Ω–µ–π: ${stats.ordersLast30Days} —à—Ç.\n` +
                     `–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 30 –¥–Ω–µ–π: ${stats.completionRateLast30Days}%\n` +
                     `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞: ${stats.avgTransferTime} –º–∏–Ω.\n` +
                     `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: ${stats.avgPaymentTime} –º–∏–Ω.\n` +
                     `–†–µ–π—Ç–∏–Ω–≥: ${stats.rating}\n\n` +
                     `üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:`;
      
      // Generate buttons for available tokens in current network
      const tokenButtons = [];
      const networkEmoji = multiChainService.getNetworkEmoji(currentNetwork);
      
      // Create buttons for each available token
      for (const [tokenSymbol, tokenInfo] of Object.entries(networkTokens)) {
        // Skip certain tokens that shouldn't be traded (like native tokens that are too expensive)
        if (this.shouldShowTokenForTrading(currentNetwork, tokenSymbol)) {
          tokenButtons.push([
            Markup.button.callback(
              `${networkEmoji} ${tokenSymbol} - ${tokenInfo.name}`, 
              `p2p_select_token_${tokenSymbol.toLowerCase()}`
            )
          ]);
        }
      }
      
      // Add management buttons
      const managementButtons = [
        [Markup.button.callback('üìä –†—ã–Ω–æ–∫', 'p2p_market_orders'), Markup.button.callback('üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞', 'p2p_my_orders')],
        [Markup.button.callback('üèÜ –¢–æ–ø', 'p2p_top_traders'), Markup.button.callback('üßÆ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'p2p_analytics')],
        [Markup.button.callback('üìë –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', 'p2p_my_data')]
      ];
      
      // Combine token buttons with management buttons
      const keyboard = Markup.inlineKeyboard([...tokenButtons, ...managementButtons]);
      
      console.log(`üì§ Sending P2P menu with ${tokenButtons.length} tokens for ${currentNetwork} network to user ${chatId}`);
      
      // Send text with buttons in one message
      await ctx.reply(message, keyboard);
      console.log(`‚úÖ P2P menu with token selection sent successfully to user ${chatId}`);
      
    } catch (error) {
      console.error('P2P menu error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ P2P –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle P2P Buy CES with real-time price updates
  async handleP2PBuyCES(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Validate user profile completion before allowing order creation
      const P2PDataHandler = require('./P2PDataHandler');
      const dataHandler = new P2PDataHandler();
      const validation = await dataHandler.validateUserForP2POperations(chatId);
      
      if (!validation.valid) {
        const keyboard = Markup.inlineKeyboard(validation.keyboard || [[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]]);
        return await ctx.reply(validation.message, keyboard);
      }
      
      // Send initial message with loading price
      const initialMessage = `üìà –ü–û–ö–£–ü–ö–ê CES –¢–û–ö–ï–ù–û–í\n` +
                            `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                            `‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É...\n\n` +
                            `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ [–∫–æ–ª-–≤–æ, CES] [—Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω, ‚ÇΩ] [–º–∏–Ω_—Å—É–º–º–∞, ‚ÇΩ] [–º–∞–∫—Å_—Å—É–º–º–∞, ‚ÇΩ]\n` +
                            `üí° –ü—Ä–∏–º–µ—Ä: 10 245 1000 2450\n\n` +
                            `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                            `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚ÇΩ\n` +
                            `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1% (—Ç–æ–ª—å–∫–æ —Å –º–µ–π–∫–µ—Ä–æ–≤)`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', 'refresh_price_buy')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      const sentMessage = await ctx.reply(initialMessage, keyboard);
      
      // Store state to handle next user message
      console.log(`üîÑ Setting P2P buy order session for ${chatId}`);
      sessionManager.setP2POrderState(chatId, 'buy');
      
      // Start real-time price updates
      this.startRealTimePriceUpdates(ctx, sentMessage, 'buy');
      
    } catch (error) {
      console.error('P2P Buy CES error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
    }
  }

  // Handle P2P Sell CES with real-time price updates
  async handleP2PSellCES(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Validate user profile completion before allowing order creation
      const P2PDataHandler = require('./P2PDataHandler');
      const dataHandler = new P2PDataHandler();
      const validation = await dataHandler.validateUserForP2POperations(chatId);
      
      if (!validation.valid) {
        const keyboard = Markup.inlineKeyboard(validation.keyboard || [[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]]);
        return await ctx.reply(validation.message, keyboard);
      }
      
      const walletInfo = await walletService.getUserWallet(chatId);
      
      if (walletInfo.cesBalance < 1) {
        const message = `üìâ –ü–†–û–î–ê–ñ–ê CES –¢–û–ö–ï–ù–û–í\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CES –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n` +
                       `–ë–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                       `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                       `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.1 CES\n` +
                       `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%\n\n` +
                       `üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å CES`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
        ]);
        
        return await ctx.reply(message, keyboard);
      }
      
      // Send initial message with loading price
      const initialMessage = `üìâ –ü–†–û–î–ê–ñ–ê CES –¢–û–ö–ï–ù–û–í\n` +
                            `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                            `‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É...\n` +
                            `–ë–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                            `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ  [–∫–æ–ª-–≤–æ, CES] [—Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω, ‚ÇΩ] [–º–∏–Ω_—Å—É–º–º–∞, ‚ÇΩ] [–º–∞–∫—Å_—Å—É–º–º–∞, ‚ÇΩ]\n` +
                            `üí° –ü—Ä–∏–º–µ—Ä: 50 253.5 1000 12675\n\n` +
                            `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                            `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚ÇΩ\n` +
                            `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', 'refresh_price_sell')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      const sentMessage = await ctx.reply(initialMessage, keyboard);
      
      // Store state to handle next user message
      console.log(`üîÑ Setting P2P sell order session for ${chatId}`);
      sessionManager.setP2POrderState(chatId, 'sell');
      
      // Start real-time price updates
      this.startRealTimePriceUpdates(ctx, sentMessage, 'sell', walletInfo);
      
    } catch (error) {
      console.error('P2P Sell CES error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
    }
  }

  // Handle market orders display
  async handleP2PMarketOrders(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Stop any real-time price updates when user leaves P2P interfaces
      this.stopRealTimePriceUpdates(chatId);
      
      // Clear any existing order session data when entering market orders
      sessionManager.clearUserSession(chatId);
      
      // Show selection menu for buy/sell orders
      const message = `üìä –†–´–ù–û–ö\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìà –ö—É–ø–∏—Ç—å', 'p2p_buy_orders')],
        [Markup.button.callback('üìâ –ü—Ä–æ–¥–∞—Ç—å', 'p2p_sell_orders')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);

      await ctx.reply(message, keyboard);

    } catch (error) {
      console.error('Market orders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤.');
    }
  }

  // Get user level display for market orders
  getUserLevelDisplay(trustScore) {
    if (trustScore >= 900) return { emoji: 'üèÜ', level: 5 };
    if (trustScore >= 750) return { emoji: '‚≠ê', level: 4 };
    if (trustScore >= 600) return { emoji: 'üíé', level: 3 };
    if (trustScore >= 400) return { emoji: 'üå±', level: 2 };
    return { emoji: 'üÜï', level: 1 };
  }

  // Handle top traders display
  async handleP2PTopTraders(ctx) {
    try {
      const reputationService = require('../services/reputationService');
      const topTraders = await reputationService.getTopRatedUsers(10);
      
      let message = `üèÜ –¢–û–ü –¢–†–ï–ô–î–ï–†–û–í\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;
      
      if (topTraders.length === 0) {
        message += `‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n\n` +
                  `üí° –ê–∫—Ç–∏–≤–Ω–æ —Ç–æ—Ä–≥—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø !`;
      } else {
        topTraders.forEach((trader, index) => {
          const ratingEmoji = reputationService.getRatingEmoji(trader.smartRating);
          const username = trader.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          
          message += `${index + 1}. @${username} ${ratingEmoji}\n` +
                    `üìä –†–µ–π—Ç–∏–Ω–≥: ${trader.smartRating}%\n` +
                    `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${trader.completionRate || 100}%\n\n`;
        });
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Top traders error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.');
    }
  }

  // Process P2P order from user message
  async processP2POrder(ctx, orderData, orderType) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Skip processing if this is a callback query or button text
      if (ctx.callbackQuery) {
        console.log('üìù P2PHandler: Skipping P2P order processing - this is a callback query');
        return;
      }
      
      // ONLY handle main menu buttons if we're actually in an order processing session
      const userState = sessionManager.getUserState(chatId);
      
      if (userState === 'p2p_order') {
        // Check for main menu buttons - handle them instead of treating as order data
        if (orderData.includes('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç') || orderData.includes('üë§')) {
          console.log('üìù P2PHandler: Detected main menu button - Personal Cabinet');
          sessionManager.clearUserSession(chatId);
          const WalletHandler = require('./WalletHandler');
          const handler = new WalletHandler();
          return await handler.handlePersonalCabinetText(ctx);
        }
        
        if (orderData.includes('P2P –ë–∏—Ä–∂–∞') || orderData.includes('üîÑ P2P')) {
          console.log('üìù P2PHandler: Detected main menu button - P2P Exchange');
          sessionManager.clearUserSession(chatId);
          return await this.handleP2PMenu(ctx);
        }
      }
      
      // Check if orderData looks like button text (contains emojis or common button phrases)
      const buttonPatterns = [
        /üîô/, // Back arrow emoji
        /‚òù/, // Cancel/Stop emoji
        /‚úÖ/, // Check mark emoji
        /‚ùå/, // X emoji
        /üí∞/, // Money bag emoji
        /üìà/, // Chart emoji
        /üìâ/, // Chart emoji
        /–ù–∞–∑–∞–¥/, // "–ù–∞–∑–∞–¥" word
        /–û—Ç–º–µ–Ω–∞/, // "–û—Ç–º–µ–Ω–∞" word
        /–ü–æ–¥—Ç–≤–µ—Ä–¥/ // "–ü–æ–¥—Ç–≤–µ—Ä–¥" word
      ];
      
      const isButtonText = buttonPatterns.some(pattern => pattern.test(orderData));
      if (isButtonText) {
        console.log(`üìù Detected button text in P2P order: "${orderData}", ignoring`);
        return;
      }
      
      // Parse order data (amount pricePerToken minAmount maxAmount)
      const parts = orderData.trim().split(/\s+/);
      
      if (parts.length < 2 || parts.length > 4) {
        return await ctx.reply(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. \nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω [–º–∏–Ω_—Å—É–º–º–∞_‚ÇΩ –º–∞–∫—Å_—Å—É–º–º–∞_‚ÇΩ]\n\n–ü—Ä–∏–º–µ—Ä: 10 250.50 –∏–ª–∏ 10 250.50 1000 2500`);
      }
      
      const [amountStr, priceStr, minRublesStr, maxRublesStr] = parts;
      
      // Normalize decimal separators
      const amount = parseFloat(amountStr.replace(',', '.'));
      const pricePerToken = parseFloat(priceStr.replace(',', '.'));
      const minRubles = minRublesStr ? parseFloat(minRublesStr.replace(',', '.')) : pricePerToken; // Default to price of 1 CES
      const maxRubles = maxRublesStr ? parseFloat(maxRublesStr.replace(',', '.')) : amount * pricePerToken; // Default to total order value
      
      // Convert ruble amounts to CES amounts
      const minAmount = minRubles / pricePerToken;
      const maxAmount = maxRubles / pricePerToken;
      
      if (isNaN(amount) || amount <= 0 || isNaN(pricePerToken) || pricePerToken <= 0) {
        return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.');
      }
      
      if (amount < 0.1) {
        return await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0.1 CES');
      }
      
      if (minRubles < 10) {
        return await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚ÇΩ');
      }
      
      if (maxRubles < minRubles) {
        return await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π');
      }
      
      const totalValue = amount * pricePerToken;
      const commissionCES = amount * 0.01; // 1% commission in CES
      
      // Show confirmation
      const typeEmoji = orderType === 'buy' ? 'üìà' : 'üìâ';
      const typeText = orderType === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
      
      // Check if smart contract escrow is enabled for sell orders
      const useSmartContract = process.env.USE_SMART_CONTRACT_ESCROW === 'true';
      const escrowContractAddress = process.env.ESCROW_CONTRACT_ADDRESS;
      const isSecureEscrow = orderType === 'sell' && useSmartContract && escrowContractAddress;
      
      // Security status message
      let securityMessage = 'üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:';
      if (isSecureEscrow) {
        securityMessage += '\n‚úÖ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø - —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É\n' +
                           'üîí –¢–æ–∫–µ–Ω—ã –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\n' +
                           '‚ùå –ù–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Ö –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å';
      } else if (orderType === 'sell') {
        securityMessage += '\n‚ö†Ô∏è –ë–ê–ó–û–í–ê–Ø - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ç—Å–∫—Ä–æ—É\n' +
                           'üîì –¢–æ–∫–µ–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω—ã —á–µ—Ä–µ–∑ MetaMask';
      } else {
        securityMessage += '\n‚úÖ –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —ç—Å–∫—Ä–æ—É-—Å–∏—Å—Ç–µ–º–æ–π';
      }
      
      const message = `${typeEmoji} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ ${typeText}\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} CES\n` +
                     `–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω: ${pricePerToken.toFixed(2)} ‚ÇΩ\n` +
                     `–û–±—â–∞—è —Å—É–º–º–∞: ${totalValue.toFixed(2)} ‚ÇΩ\n` +
                     `–ú–∏–Ω. —Å—É–º–º–∞: ${minRubles.toFixed(0)} ‚ÇΩ\n` +
                     `–ú–∞–∫—Å. —Å—É–º–º–∞: ${maxRubles.toFixed(0)} ‚ÇΩ\n` +
                     `–ö–æ–º–∏—Å—Å–∏—è: ${commissionCES.toFixed(2)} CES (1%)\n\n` +
                     `‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞?`;
      
      // Store order data in session
      sessionManager.setPendingP2POrder(chatId, {
        orderType,
        amount,
        pricePerToken,
        minAmount,
        maxAmount,
        timestamp: Date.now()
      });
      
      // Clear the P2P order state since we're moving to confirmation state
      sessionManager.setSessionData(chatId, 'awaitingP2POrder', false);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_p2p_order')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('P2P order processing error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–∞.');
    }
  }

  // Process user message
  async processUserMessage(ctx, text) {
    try {
      await ctx.reply('‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\nüöß –§—É–Ω–∫—Ü–∏—è –æ–±–º–µ–Ω–∞ –ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
    } catch (error) {
      console.error('User message processing error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
  }

  // Handle P2P My Data
  async handleP2PMyData(ctx) {
    try {
      const chatId = ctx.chat.id.toString();
      const { User } = require('../database/models');
      
      const user = await User.findOne({ chatId });
      if (!user) {
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }

      const profile = user.p2pProfile || {};
      
      if (!profile.isProfileComplete) {
        // Profile not set up
        const message = 'üìë –ú–û–ò –î–ê–ù–ù–´–ï\n' +
                       '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
                       '‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω\n\n' +
                       'üí° –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:';
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'p2p_edit_data')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
        ]);
        
        return await ctx.reply(message, keyboard);
      }

      // Show complete profile
      let message = 'üìë –ú–û–ò –î–ê–ù–ù–´–ï\n' +
                   '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n';
      
      // Add profile data in new format
      if (profile.fullName) {
        message += `–§–ò–û: ${profile.fullName}\n`;
      }
      
      if (profile.paymentMethods && profile.paymentMethods.length > 0) {
        const bankNames = {
          'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
          'vtb': '–í–¢–ë',
          'gazprombank': '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
          'alfabank': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
          'rshb': '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫',
          'mkb': '–ú–ö–ë',
          'sovcombank': '–°–æ–≤–∫–æ–º–±–∞–Ω–∫',
          'tbank': '–¢-–ë–∞–Ω–∫',
          'domrf': '–î–û–ú.–†–§',
          'otkritie': '–û—Ç–∫—Ä—ã—Ç–∏–µ',
          'raiffeisenbank': '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
          'rosbank': '–†–æ—Å–±–∞–Ω–∫'
        };
        
        const activeMethods = profile.paymentMethods.filter(pm => pm.isActive);
        
        if (activeMethods.length > 0) {
          const methodNames = activeMethods.map(pm => bankNames[pm.bank]).join(', ');
          message += `–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: ${methodNames} \n`;
          
          message += '–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n';
          activeMethods.forEach(pm => {
            const bankName = bankNames[pm.bank];
            // Improved card masking: show asterisks with last 4 digits
            let maskedCard = pm.cardNumber || '';
            if (maskedCard.length > 4) {
              maskedCard = '*'.repeat(maskedCard.length - 4) + maskedCard.slice(-4);
            } else if (maskedCard) {
              maskedCard = '*'.repeat(maskedCard.length);
            }
            message += `${bankName}: ${maskedCard || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
          });
        }
      }
      
      if (profile.contactInfo) {
        message += `–ö–æ–Ω—Ç–∞–∫—Ç: ${profile.contactInfo}\n`;
      }
      
      // Add conditions without empty line before if it exists
      if (profile.makerConditions) {
        message += `\n–£—Å–ª–æ–≤–∏—è: \n${profile.makerConditions}`;
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', 'p2p_edit_data')],
        [Markup.button.callback(profile.useInOrders ? '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Ä–¥–µ—Ä–∞—Ö' : '‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ä–¥–µ—Ä–∞—Ö', 'p2p_toggle_use_in_orders')],
        [Markup.button.callback('üëÄ –ö–∞–∫ –≤–∏–¥—è—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏', 'p2p_buyer_view')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('P2P My Data error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.');
    }
  }
  
  // Start real-time price updates for P2P interfaces (manual only)
  async startRealTimePriceUpdates(ctx, sentMessage, orderType, walletInfo = null) {
    const chatId = ctx.chat.id.toString();
    
    // Get initial price data for display
    try {
      const p2pService = require('../services/p2pService');
      const priceData = await p2pService.getMarketPriceSuggestion();
      
      let message;
      if (orderType === 'buy') {
        message = `üìà –ü–û–ö–£–ü–ö–ê CES –¢–û–ö–ï–ù–û–í\n` +
                 `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                 `–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ‚ÇΩ ${priceData.currentPrice.toFixed(2)} / CES \ud83d\udfe2\n\n` +
                 `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ [–∫–æ–ª-–≤–æ, CES] [—Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω, ‚ÇΩ] [–º–∏–Ω_—Å—É–º–º–∞, ‚ÇΩ] [–º–∞–∫—Å_—Å—É–º–º–∞, ‚ÇΩ]\n` +
                 `üí° –ü—Ä–∏–º–µ—Ä: 10 245 1000 2450\n\n` +
                 `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                 `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚ÇΩ\n` +
                 `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1% (—Ç–æ–ª—å–∫–æ —Å –º–µ–π–∫–µ—Ä–æ–≤)`;
      } else {
        message = `üìâ –ü–†–û–î–ê–ñ–ê CES –¢–û–ö–ï–ù–û–í\n` +
                 `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                 `–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${priceData.currentPrice.toFixed(2)} ‚ÇΩ / CES \ud83d\udfe2\n` +
                 `–ë–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                 `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ  [–∫–æ–ª-–≤–æ, CES] [—Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω, ‚ÇΩ] [–º–∏–Ω_—Å—É–º–º–∞, ‚ÇΩ] [–º–∞–∫—Å_—Å—É–º–º–∞, ‚ÇΩ]\n` +
                 `üí° –ü—Ä–∏–º–µ—Ä: 50 253.5 1000 12675\n\n` +
                 `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                 `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚ÇΩ\n` +
                 `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%`;
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', `refresh_price_${orderType}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      // Update the initial message with current price
      await ctx.telegram.editMessageText(
        sentMessage.chat.id,
        sentMessage.message_id,
        null,
        message,
        { reply_markup: keyboard.reply_markup }
      );
      
      console.log(`üü¢ Initial price loaded for ${orderType}: ‚ÇΩ${priceData.currentPrice.toFixed(2)}/CES (manual refresh only)`);
      
    } catch (error) {
      console.error('Error loading initial price:', error);
    }
  }
  
  // Stop real-time price updates for a user (legacy function - no longer needed)
  stopRealTimePriceUpdates(chatId) {
    // This function is kept for compatibility but no longer needed
    // since we removed automatic price updates
    console.log(`üü¢ No active price intervals to stop for user ${chatId} (manual refresh only)`);
  }
  
  // Handle manual price refresh
  async handlePriceRefresh(ctx, orderType) {
    try {
      const chatId = ctx.chat.id.toString();
      
      // Show loading message temporarily
      await ctx.answerCbQuery('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É...');
      
      const priceData = await p2pService.getMarketPriceSuggestion();
      
      let message;
      if (orderType === 'buy') {
        message = `üìà –ü–û–ö–£–ü–ö–ê CES –¢–û–ö–ï–ù–û–í\n` +
                 `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                 `–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ‚ÇΩ ${priceData.currentPrice.toFixed(2)} / CES üü¢\n\n` +
                 `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ [–∫–æ–ª-–≤–æ, CES] [—Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω, ‚ÇΩ] [–º–∏–Ω_—Å—É–º–º–∞, ‚ÇΩ] [–º–∞–∫—Å_—Å—É–º–º–∞, ‚ÇΩ]\n` +
                 `üí° –ü—Ä–∏–º–µ—Ä: 10 245 1000 2450\n\n` +
                 `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                 `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚ÇΩ\n` +
                 `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1% (—Ç–æ–ª—å–∫–æ —Å –º–µ–π–∫–µ—Ä–æ–≤)`;
      } else {
        // Get updated wallet info for sell orders
        const walletInfo = await walletService.getUserWallet(chatId);
        message = `üìâ –ü–†–û–î–ê–ñ–ê CES –¢–û–ö–ï–ù–û–í\n` +
                 `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                 `–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${priceData.currentPrice.toFixed(2)} ‚ÇΩ / CES üü¢\n` +
                 `–ë–∞–ª–∞–Ω—Å: ${walletInfo.cesBalance.toFixed(4)} CES\n\n` +
                 `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ  [–∫–æ–ª-–≤–æ, CES] [—Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω, ‚ÇΩ] [–º–∏–Ω_—Å—É–º–º–∞, ‚ÇΩ] [–º–∞–∫—Å_—Å—É–º–º–∞, ‚ÇΩ]\n` +
                 `üí° –ü—Ä–∏–º–µ—Ä: 50 253.5 1000 12675\n\n` +
                 `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                 `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚ÇΩ\n` +
                 `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%`;
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', `refresh_price_${orderType}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      try {
        await ctx.editMessageText(message, keyboard);
      } catch (editError) {
        // Handle case where message content is the same
        if (editError.response && editError.response.error_code === 400 && 
            editError.response.description.includes('message is not modified')) {
          await ctx.answerCbQuery('‚úÖ –¶–µ–Ω–∞ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞!');
          return;
        }
        throw editError;
      }
      
    } catch (error) {
      console.error('Error refreshing price:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã');
    }
  }

  // Helper method to determine if a token should be shown for P2P trading
  shouldShowTokenForTrading(networkId, tokenSymbol) {
    // Define which tokens are suitable for P2P trading per network
    const tradableTokens = {
      polygon: ['CES', 'USDT'], // CES is main token, USDT is stable
      tron: ['TRX', 'USDT'], // TRX is native, USDT is stable
      bsc: ['USDT', 'BUSD', 'USDC'], // Stable coins - BNB too expensive for small trades
      solana: ['USDT', 'USDC'], // Stable coins - SOL too expensive 
      arbitrum: ['USDT', 'USDC'], // Stable coins - ETH too expensive
      avalanche: ['USDT', 'USDC'] // Stable coins - AVAX too expensive
    };
    
    return tradableTokens[networkId]?.includes(tokenSymbol) || false;
  }

  // Handle token selection for P2P trading
  async handleP2PTokenSelect(ctx, tokenSymbol) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üí∞ User ${chatId} selected token ${tokenSymbol} for P2P trading`);
      
      // Get user's current network for context
      const userNetworkService = require('../services/userNetworkService');
      const multiChainService = require('../services/multiChainService');
      
      const currentNetwork = await userNetworkService.getUserNetwork(chatId);
      const networkEmoji = multiChainService.getNetworkEmoji(currentNetwork);
      const tokenConfig = multiChainService.getTokenConfig(currentNetwork, tokenSymbol);
      
      if (!tokenConfig) {
        return await ctx.reply('‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏.');
      }
      
      // Show buy/sell options for selected token
      const message = `üí∞ –¢–û–†–ì–û–í–õ–Ø ${tokenSymbol}\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `${networkEmoji} –°–µ—Ç—å: ${multiChainService.getNetworkDisplayName(currentNetwork)}\n` +
                     `ü™ô –¢–æ–∫–µ–Ω: ${tokenConfig.name} (${tokenSymbol})\n\n` +
                     `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(`üìà –ö—É–ø–∏—Ç—å ${tokenSymbol}`, `p2p_buy_${tokenSymbol.toLowerCase()}`)],
        [Markup.button.callback(`üìâ –ü—Ä–æ–¥–∞—Ç—å ${tokenSymbol}`, `p2p_sell_${tokenSymbol.toLowerCase()}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–∫–µ–Ω–æ–≤', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('P2P token selection error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Handle P2P Buy Token (generic for any token)
  async handleP2PBuyToken(ctx, tokenSymbol) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üìà User ${chatId} wants to buy ${tokenSymbol}`);
      
      // Validate user profile completion before allowing order creation
      const P2PDataHandler = require('./P2PDataHandler');
      const dataHandler = new P2PDataHandler();
      const validation = await dataHandler.validateUserForP2POperations(chatId);
      
      if (!validation.valid) {
        const keyboard = Markup.inlineKeyboard(validation.keyboard || [[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]]);
        return await ctx.reply(validation.message, keyboard);
      }
      
      // Get user's current network and token info
      const userNetworkService = require('../services/userNetworkService');
      const multiChainService = require('../services/multiChainService');
      
      const currentNetwork = await userNetworkService.getUserNetwork(chatId);
      const networkEmoji = multiChainService.getNetworkEmoji(currentNetwork);
      const tokenConfig = multiChainService.getTokenConfig(currentNetwork, tokenSymbol);
      
      if (!tokenConfig) {
        return await ctx.reply('‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏.');
      }
      
      // Send initial message with loading price
      const initialMessage = `üìà –ü–û–ö–£–ü–ö–ê ${tokenSymbol} –¢–û–ö–ï–ù–û–í\n` +
                            `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                            `${networkEmoji} –°–µ—Ç—å: ${multiChainService.getNetworkDisplayName(currentNetwork)}\n` +
                            `ü™ô –¢–æ–∫–µ–Ω: ${tokenConfig.name} (${tokenSymbol})\n` +
                            `‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É...\n\n` +
                            `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ [–∫–æ–ª-–≤–æ, ${tokenSymbol}] [—Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω, ‚ÇΩ] [–º–∏–Ω_—Å—É–º–º–∞, ‚ÇΩ] [–º–∞–∫—Å_—Å—É–º–º–∞, ‚ÇΩ]\n` +
                            `üí° –ü—Ä–∏–º–µ—Ä: 10 245 1000 2450\n\n` +
                            `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                            `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚ÇΩ\n` +
                            `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1% (—Ç–æ–ª—å–∫–æ —Å –º–µ–π–∫–µ—Ä–æ–≤)`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', `refresh_price_buy_${tokenSymbol.toLowerCase()}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–∫–µ–Ω–æ–≤', 'p2p_menu')]
      ]);
      
      const sentMessage = await ctx.reply(initialMessage, keyboard);
      
      // Store state to handle next user message with token context
      console.log(`üîÑ Setting P2P buy order session for ${chatId} with token ${tokenSymbol}`);
      sessionManager.setP2POrderState(chatId, 'buy', tokenSymbol);
      
      // Start real-time price updates for the specific token
      this.startRealTimePriceUpdates(ctx, sentMessage, 'buy', null, tokenSymbol);
      
    } catch (error) {
      console.error(`P2P Buy ${tokenSymbol} error:`, error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
    }
  }

  // Handle P2P Sell Token (generic for any token)
  async handleP2PSellToken(ctx, tokenSymbol) {
    try {
      const chatId = ctx.chat.id.toString();
      console.log(`üìâ User ${chatId} wants to sell ${tokenSymbol}`);
      
      // Validate user profile completion before allowing order creation
      const P2PDataHandler = require('./P2PDataHandler');
      const dataHandler = new P2PDataHandler();
      const validation = await dataHandler.validateUserForP2POperations(chatId);
      
      if (!validation.valid) {
        const keyboard = Markup.inlineKeyboard(validation.keyboard || [[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]]);
        return await ctx.reply(validation.message, keyboard);
      }
      
      // Get user's current network and token info
      const userNetworkService = require('../services/userNetworkService');
      const multiChainService = require('../services/multiChainService');
      const multiChainWalletService = require('../services/multiChainWalletService');
      
      const currentNetwork = await userNetworkService.getUserNetwork(chatId);
      const networkEmoji = multiChainService.getNetworkEmoji(currentNetwork);
      const tokenConfig = multiChainService.getTokenConfig(currentNetwork, tokenSymbol);
      
      if (!tokenConfig) {
        return await ctx.reply('‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏.');
      }
      
      // Get user's token balance
      let tokenBalance = 0;
      try {
        const walletInfo = await multiChainWalletService.getMultiChainWalletInfo(chatId);
        const networkBalances = walletInfo.networks[currentNetwork];
        if (networkBalances && networkBalances.tokens && networkBalances.tokens[tokenSymbol]) {
          tokenBalance = networkBalances.tokens[tokenSymbol].balance || 0;
        }
      } catch (balanceError) {
        console.error(`Error getting ${tokenSymbol} balance:`, balanceError);
      }
      
      if (tokenBalance < 0.001) {
        const message = `üìâ –ü–†–û–î–ê–ñ–ê ${tokenSymbol} –¢–û–ö–ï–ù–û–í\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `${networkEmoji} –°–µ—Ç—å: ${multiChainService.getNetworkDisplayName(currentNetwork)}\n` +
                       `ü™ô –¢–æ–∫–µ–Ω: ${tokenConfig.name} (${tokenSymbol})\n` +
                       `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${tokenSymbol} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n` +
                       `–ë–∞–ª–∞–Ω—Å: ${tokenBalance.toFixed(6)} ${tokenSymbol}\n\n` +
                       `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                       `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.001 ${tokenSymbol}\n` +
                       `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%\n\n` +
                       `üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å ${tokenSymbol}`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–∫–µ–Ω–æ–≤', 'p2p_menu')]
        ]);
        
        return await ctx.reply(message, keyboard);
      }
      
      // Send initial message with loading price
      const initialMessage = `üìâ –ü–†–û–î–ê–ñ–ê ${tokenSymbol} –¢–û–ö–ï–ù–û–í\n` +
                            `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                            `${networkEmoji} –°–µ—Ç—å: ${multiChainService.getNetworkDisplayName(currentNetwork)}\n` +
                            `ü™ô –¢–æ–∫–µ–Ω: ${tokenConfig.name} (${tokenSymbol})\n` +
                            `‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É...\n` +
                            `–ë–∞–ª–∞–Ω—Å: ${tokenBalance.toFixed(6)} ${tokenSymbol}\n\n` +
                            `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ [–∫–æ–ª-–≤–æ, ${tokenSymbol}] [—Ü–µ–Ω–∞_–∑–∞_—Ç–æ–∫–µ–Ω, ‚ÇΩ] [–º–∏–Ω_—Å—É–º–º–∞, ‚ÇΩ] [–º–∞–∫—Å_—Å—É–º–º–∞, ‚ÇΩ]\n` +
                            `üí° –ü—Ä–∏–º–µ—Ä: 50 253.5 1000 12675\n\n` +
                            `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                            `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚ÇΩ\n` +
                            `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 1%`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', `refresh_price_sell_${tokenSymbol.toLowerCase()}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–∫–µ–Ω–æ–≤', 'p2p_menu')]
      ]);
      
      const sentMessage = await ctx.reply(initialMessage, keyboard);
      
      // Store state to handle next user message with token context
      console.log(`üîÑ Setting P2P sell order session for ${chatId} with token ${tokenSymbol}`);
      sessionManager.setP2POrderState(chatId, 'sell', tokenSymbol);
      
      // Start real-time price updates for the specific token
      this.startRealTimePriceUpdates(ctx, sentMessage, 'sell', { tokenSymbol, balance: tokenBalance }, tokenSymbol);
      
    } catch (error) {
      console.error(`P2P Sell ${tokenSymbol} error:`, error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
    }
  }
}

module.exports = P2PHandler;