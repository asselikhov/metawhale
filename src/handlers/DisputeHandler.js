/**
 * üö® PROFESSIONAL DISPUTE HANDLER
 * User-facing interface for dispute management
 */

const { Markup } = require('telegraf');
const { P2PTrade, User, DisputeLog } = require('../database/models');
const disputeService = require('../services/disputeService');
const sessionManager = require('./SessionManager');

class DisputeHandler {
  constructor() {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–æ—Ä–æ–≤ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    this.DISPUTE_CATEGORIES = {
      'payment_not_received': {
        title: 'üí∏ –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–ª—É—á–µ–Ω',
        description: '–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–µ–Ω—å–≥–∏, –Ω–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ',
        priority: 'high'
      },
      'payment_not_made': {
        title: '‚è∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—Ç–∏–ª',
        description: '–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã, –Ω–æ –¥–µ–Ω—å–≥–∏ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏',
        priority: 'high'
      },
      'wrong_amount': {
        title: 'üí∞ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞',
        description: '–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–Ω–µ–≥',
        priority: 'medium'
      },
      'fraud_attempt': {
        title: 'üö® –ü–æ–ø—ã—Ç–∫–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞',
        description: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–ª–∏ –æ–±–º–∞–Ω',
        priority: 'urgent'
      },
      'technical_issue': {
        title: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        description: '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏',
        priority: 'medium'
      },
      'other': {
        title: '‚ùì –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        description: '–ò–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤—ã—à–µ',
        priority: 'medium'
      }
    };

    this.STATUS_EMOJIS = {
      'open': 'üî¥', 'investigating': 'üîç', 'awaiting_evidence': 'üìÑ',
      'under_review': '‚öñÔ∏è', 'resolved': '‚úÖ', 'escalated': 'üìà'
    };

    this.PRIORITY_EMOJIS = {
      'urgent': 'üî•', 'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'
    };
  }

  /**
   * üö® –ò–ù–ò–¶–ò–ê–¶–ò–Ø –°–ü–û–†–ê - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   */
  async handleInitiateDispute(ctx, tradeId = null) {
    try {
      const chatId = ctx.chat.id.toString();
      
      if (!tradeId) {
        tradeId = sessionManager.getSessionData(chatId, 'tradeId');
      }
      
      if (!tradeId) {
        return await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }

      const trade = await P2PTrade.findById(tradeId).populate('buyerId').populate('sellerId');
      if (!trade) {
        return await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      }

      const user = await User.findOne({ chatId });
      const canInitiate = await disputeService.validateDisputeRights(trade, user._id);
      
      if (!canInitiate.allowed) {
        const message = `üö´ –°–ü–û–† –ù–ï–î–û–°–¢–£–ü–ï–ù\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `${canInitiate.reason}\n\n` +
                       `üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π.`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', 'contact_support')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
        ]);
        
        return await ctx.reply(message, keyboard);
      }

      await this.showDisputeCategorySelection(ctx, trade);
      
    } catch (error) {
      console.error('Dispute initiation error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–ø–æ—Ä–∞.');
    }
  }

  /**
   * üìã –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò –°–ü–û–†–ê
   */
  async showDisputeCategorySelection(ctx, trade) {
    try {
      const orderNumber = `CES${trade.buyOrderId.toString().slice(-8)}`;
      
      const message = `üö® –û–¢–ö–†–´–¢–ò–ï –°–ü–û–†–ê\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–û—Ä–¥–µ—Ä: ${orderNumber}\n` +
                     `–°—É–º–º–∞: ${trade.totalValue.toFixed(2)} ‚ÇΩ\n` +
                     `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${trade.amount} CES\n\n` +
                     `üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:\n\n` +
                     `‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.`;

      const buttons = [];
      
      Object.entries(this.DISPUTE_CATEGORIES).forEach(([key, category]) => {
        const emoji = this.PRIORITY_EMOJIS[category.priority];
        buttons.push([Markup.button.callback(
          `${emoji} ${category.title}`, 
          `dispute_category_${key}_${trade._id}`
        )]);
      });
      
      buttons.push([Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'p2p_menu')]);
      
      const keyboard = Markup.inlineKeyboard(buttons);
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Show category selection error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
    }
  }

  /**
   * üìù –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ö–ê–¢–ï–ì–û–†–ò–ò
   */
  async handleCategorySelection(ctx, category, tradeId) {
    try {
      const chatId = ctx.chat.id.toString();
      
      sessionManager.setSessionData(chatId, 'disputeCategory', category);
      sessionManager.setSessionData(chatId, 'disputeTradeId', tradeId);
      
      const categoryInfo = this.DISPUTE_CATEGORIES[category];
      
      const message = `üìù –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryInfo.title}\n\n` +
                     `üìÑ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n` +
                     `‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n` +
                     `‚Ä¢ –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–ª–∏?\n` +
                     `‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞?\n\n` +
                     `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', `dispute_categories_${tradeId}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      sessionManager.setSessionData(chatId, 'awaitingDisputeDescription', true);
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Category selection error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    }
  }

  /**
   * üìÑ –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–ò–°–ê–ù–ò–Ø –°–ü–û–†–ê
   */
  async handleDisputeDescription(ctx, description) {
    try {
      const chatId = ctx.chat.id.toString();
      
      const category = sessionManager.getSessionData(chatId, 'disputeCategory');
      const tradeId = sessionManager.getSessionData(chatId, 'disputeTradeId');
      
      if (!category || !tradeId) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
      }

      sessionManager.setSessionData(chatId, 'awaitingDisputeDescription', false);
      await this.showDisputeConfirmation(ctx, tradeId, category, description);
      
    } catch (error) {
      console.error('Dispute description error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è.');
    }
  }

  /**
   * ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–ü–û–†–ê
   */
  async showDisputeConfirmation(ctx, tradeId, category, description) {
    try {
      const trade = await P2PTrade.findById(tradeId);
      const categoryInfo = this.DISPUTE_CATEGORIES[category];
      const orderNumber = `CES${trade.buyOrderId.toString().slice(-8)}`;
      
      const message = `‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–ü–û–†–ê\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–û—Ä–¥–µ—Ä: ${orderNumber}\n` +
                     `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryInfo.title}\n` +
                     `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.PRIORITY_EMOJIS[categoryInfo.priority]} ${categoryInfo.priority.toUpperCase()}\n\n` +
                     `üìù –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n` +
                     `"${description}"\n\n` +
                     `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${this.getEstimatedTime(categoryInfo.priority)}\n\n` +
                     `üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–æ—Ä?`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', `confirm_dispute_${tradeId}_${category}`)],
        [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', `edit_description_${tradeId}_${category}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'p2p_menu')]
      ]);
      
      const chatId = ctx.chat.id.toString();
      sessionManager.setSessionData(chatId, 'disputeDescription', description);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Dispute confirmation error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø–æ—Ä–∞.');
    }
  }

  /**
   * üìù –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
   */
  async processTextInput(ctx, text) {
    try {
      const chatId = ctx.chat.id.toString();
      
      if (sessionManager.getSessionData(chatId, 'awaitingDisputeDescription')) {
        await this.handleDisputeDescription(ctx, text);
        return true;
      }
      
      if (sessionManager.getSessionData(chatId, 'awaitingEvidenceText')) {
        await this.handleTextEvidence(ctx, text);
        return true;
      }
      
      return false;
      
    } catch (error) {
      console.error('Dispute text input error:', error);
      return false;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getEstimatedTime(priority) {
    const times = {
      'urgent': '2-4 —á–∞—Å–∞', 'high': '4-12 —á–∞—Å–æ–≤',
      'medium': '12-24 —á–∞—Å–∞', 'low': '24-48 —á–∞—Å–æ–≤'
    };
    return times[priority] || '24-48 —á–∞—Å–æ–≤';
  }

  formatStatus(status) {
    const statusNames = {
      'open': '–û—Ç–∫—Ä—ã—Ç', 'investigating': '–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
      'awaiting_evidence': '–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤',
      'under_review': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', 'resolved': '–†–µ—à–µ–Ω', 'escalated': '–≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω'
    };
    return statusNames[status] || status;
  }

  /**
   * üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –°–ü–û–†–ê
   */
  async confirmDispute(ctx, tradeId, category) {
    try {
      const chatId = ctx.chat.id.toString();
      const description = sessionManager.getSessionData(chatId, 'disputeDescription');
      
      if (!description) {
        return await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      }

      const result = await disputeService.initiateDispute(
        tradeId, chatId, category, description, this.DISPUTE_CATEGORIES[category].priority
      );

      if (!result.success) {
        return await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞: ${result.error}`);
      }

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      sessionManager.clearSessionData(chatId, 'disputeCategory');
      sessionManager.clearSessionData(chatId, 'disputeTradeId');
      sessionManager.clearSessionData(chatId, 'disputeDescription');

      const trade = await P2PTrade.findById(tradeId);
      const orderNumber = `CES${trade.buyOrderId.toString().slice(-8)}`;
      
      const message = `‚úÖ –°–ü–û–† –û–¢–ö–†–´–¢\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–°–ø–æ—Ä ID: ${result.disputeId}\n` +
                     `–û—Ä–¥–µ—Ä: ${orderNumber}\n` +
                     `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.PRIORITY_EMOJIS[result.priority]} ${result.priority.toUpperCase()}\n\n` +
                     `üìã –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ:\n` +
                     `${result.moderatorAssigned ? '‚úÖ' : '‚è≥'} –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${result.moderatorAssigned ? '–Ω–∞–∑–Ω–∞—á–µ–Ω' : '–±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n` +
                     `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${result.estimatedResolutionTime}\n` +
                     `üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –±–æ—Ç`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìÑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', `add_evidence_${tradeId}`)],
        [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞', `dispute_status_${tradeId}`)],
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      await this.notifyOtherParticipants(trade, chatId);
      
    } catch (error) {
      console.error('Confirm dispute error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * üìÑ –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í
   */
  async handleAddEvidence(ctx, tradeId) {
    try {
      const trade = await P2PTrade.findById(tradeId);
      
      if (!trade || trade.status !== 'disputed') {
        return await ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.');
      }

      const orderNumber = `CES${trade.buyOrderId.toString().slice(-8)}`;
      
      const message = `üìÑ –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–°–ø–æ—Ä: ${orderNumber}\n` +
                     `–°—Ç–∞—Ç—É—Å: ${this.STATUS_EMOJIS[trade.disputeStatus]} ${this.formatStatus(trade.disputeStatus)}\n\n` +
                     `üìé –¢–∏–ø—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤:\n` +
                     `‚Ä¢ üí¨ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n` +
                     `‚Ä¢ üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã\n\n` +
                     `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí¨ –¢–µ–∫—Å—Ç', `evidence_text_${tradeId}`)],
        [Markup.button.callback('üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', `evidence_image_${tradeId}`)],
        [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞', `dispute_status_${tradeId}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Add evidence error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.');
    }
  }

  /**
   * üìä –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –°–ü–û–†–ê
   */
  async handleDisputeStatus(ctx, tradeId) {
    try {
      const trade = await P2PTrade.findById(tradeId)
        .populate('buyerId').populate('sellerId').populate('moderatorId');
        
      if (!trade || trade.status !== 'disputed') {
        return await ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.');
      }

      const orderNumber = `CES${trade.buyOrderId.toString().slice(-8)}`;
      const chatId = ctx.chat.id.toString();
      const user = await User.findOne({ chatId });
      
      const userRole = trade.buyerId._id.toString() === user._id.toString() ? '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ø—Ä–æ–¥–∞–≤–µ—Ü';
      
      const recentLogs = await DisputeLog.find({ tradeId })
        .sort({ timestamp: -1 }).limit(5);

      let message = `üìä –°–¢–ê–¢–£–° –°–ü–û–†–ê\n` +
                   `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                   `–°–ø–æ—Ä ID: ${tradeId}\n` +
                   `–û—Ä–¥–µ—Ä: ${orderNumber}\n` +
                   `–í–∞—à–∞ —Ä–æ–ª—å: ${userRole}\n\n` +
                   `üîç –°—Ç–∞—Ç—É—Å: ${this.STATUS_EMOJIS[trade.disputeStatus]} ${this.formatStatus(trade.disputeStatus)}\n` +
                   `üìà –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.PRIORITY_EMOJIS[trade.disputePriority]} ${trade.disputePriority.toUpperCase()}\n`;

      if (trade.moderatorId) {
        message += `üë®‚Äç‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: –Ω–∞–∑–Ω–∞—á–µ–Ω\n`;
      } else {
        message += `‚è≥ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n`;
      }

      if (trade.disputeTracking) {
        const openedAt = new Date(trade.disputeTracking.openedAt);
        const hoursElapsed = Math.floor((Date.now() - openedAt.getTime()) / (1000 * 60 * 60));
        message += `‚è∞ –í—Ä–µ–º—è —Å –æ—Ç–∫—Ä—ã—Ç–∏—è: ${hoursElapsed} —á.\n`;
      }

      if (trade.disputeEvidence) {
        const buyerEvidenceCount = trade.disputeEvidence.buyerEvidence?.length || 0;
        const sellerEvidenceCount = trade.disputeEvidence.sellerEvidence?.length || 0;
        message += `\nüìÑ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:\n`;
        message += `  ‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyerEvidenceCount} —à—Ç.\n`;
        message += `  ‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${sellerEvidenceCount} —à—Ç.\n`;
      }

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìÑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', `add_evidence_${trade._id}`)],
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `dispute_status_${trade._id}`)],
        [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', 'contact_support')],
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Dispute status error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ—Ä–∞.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
   */
  async handleTextEvidence(ctx, text) {
    try {
      const chatId = ctx.chat.id.toString();
      const tradeId = sessionManager.getSessionData(chatId, 'evidenceTradeId');
      
      if (!tradeId) {
        return await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }

      await disputeService.submitEvidence(tradeId, chatId, 'text', text, '–¢–µ–∫—Å—Ç–æ–≤–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ');
      
      sessionManager.setSessionData(chatId, 'awaitingEvidenceText', false);
      sessionManager.clearSessionData(chatId, 'evidenceTradeId');
      
      const message = `‚úÖ –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û –î–û–ë–ê–í–õ–ï–ù–û\n` +
                     `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                     `–í–∞—à–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–ø–æ—Ä—É.\n\n` +
                     `üìã –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìÑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', `add_evidence_${tradeId}`)],
        [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞', `dispute_status_${tradeId}`)],
        [Markup.button.callback('üîô –ö P2P –º–µ–Ω—é', 'p2p_menu')]
      ]);
      
      await ctx.reply(message, keyboard);
      
    } catch (error) {
      console.error('Text evidence error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.');
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Å–ø–æ—Ä–µ
   */
  async notifyOtherParticipants(trade, initiatorChatId) {
    try {
      const orderNumber = `CES${trade.buyOrderId.toString().slice(-8)}`;
      const bot = require('../bot/telegramBot').getInstance();
      
      const participants = [trade.buyerId.chatId, trade.sellerId.chatId]
        .filter(chatId => chatId !== initiatorChatId);
      
      for (const chatId of participants) {
        const message = `üö® –û–¢–ö–†–´–¢ –°–ü–û–†\n` +
                       `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
                       `–û—Ä–¥–µ—Ä: ${orderNumber}\n` +
                       `–°—É–º–º–∞: ${trade.totalValue.toFixed(2)} ‚ÇΩ\n\n` +
                       `–ü–æ –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫—Ä—ã–ª —Å–ø–æ—Ä.\n` +
                       `–°–¥–µ–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.`;

        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞', `dispute_status_${trade._id}`)],
          [Markup.button.callback('üìÑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', `add_evidence_${trade._id}`)],
          [Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'contact_support')]
        ]);

        try {
          await bot.telegram.sendMessage(chatId, message, {
            reply_markup: keyboard.reply_markup
          });
        } catch (notifyError) {
          console.error(`Failed to notify participant ${chatId}:`, notifyError);
        }
      }
      
    } catch (error) {
      console.error('Error notifying participants:', error);
    }
  }
}

module.exports = DisputeHandler;