// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ATH –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ä—É–±–ª–∏
require('dotenv').config();
const axios = require('axios');
const mongoose = require('mongoose');

// –°—Ö–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω (–∫–æ–ø–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
const priceHistorySchema = new mongoose.Schema({
  price: { type: Number, required: true },
  timestamp: { type: Date, default: Date.now },
  change24h: Number,
  marketCap: Number,
  volume24h: Number,
  priceRub: Number,
  changeRub24h: Number,
  ath: Number // ATH (All Time High) –≤ USD
});

const PriceHistory = mongoose.model('PriceHistory', priceHistorySchema);

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB
async function getUSDToRUBRate() {
  try {
    console.log('üí± –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD/RUB...');
    const response = await axios.get('https://api.exchangerate-api.com/v4/latest/USD', {
      timeout: 5000
    });
    
    if (response.data && response.data.rates && response.data.rates.RUB) {
      const rate = response.data.rates.RUB;
      console.log(`‚úÖ –ö—É—Ä—Å USD/RUB: ${rate}`);
      return rate;
    }
    
    console.log('‚ö†Ô∏è –ö—É—Ä—Å RUB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API');
    return 100; // Fallback –∫—É—Ä—Å
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB:', error.message);
    return 100; // Fallback –∫—É—Ä—Å ~100 —Ä—É–±–ª–µ–π –∑–∞ –¥–æ–ª–ª–∞—Ä
  }
}

async function testFixes() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ATH –∏ —Ä—É–±–ª–µ–π...\n');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ\n');

    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å USD/RUB
    console.log('üîç –¢–ï–°–¢ 1: –ö—É—Ä—Å USD/RUB');
    console.log('='.repeat(30));
    const usdToRubRate = await getUSDToRUBRate();
    const testPrice = 3.08;
    const testPriceRub = testPrice * usdToRubRate;
    console.log(`–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: $${testPrice}`);
    console.log(`–ö—É—Ä—Å: ${usdToRubRate}`);
    console.log(`–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: ‚ÇΩ${testPriceRub.toFixed(2)}\n`);

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –¢–ï–°–¢ 2: ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('='.repeat(30));
    const maxPriceRecord = await PriceHistory.findOne().sort({ price: -1 });
    const databaseATH = maxPriceRecord ? maxPriceRecord.price : 0;
    console.log(`ATH –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $${databaseATH.toFixed(2)}`);
    console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: ${await PriceHistory.countDocuments()}\n`);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π ATH
    console.log('üîç –¢–ï–°–¢ 3: –§–∏–Ω–∞–ª—å–Ω—ã–π ATH');
    console.log('='.repeat(30));
    const currentPrice = testPrice;
    const finalATH = Math.max(databaseATH, currentPrice);
    console.log(`–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${currentPrice.toFixed(2)}`);
    console.log(`ATH –∏–∑ –±–∞–∑—ã: $${databaseATH.toFixed(2)}`);
    console.log(`–§–∏–Ω–∞–ª—å–Ω—ã–π ATH: $${finalATH.toFixed(2)}`);
    
    if (currentPrice >= finalATH) {
      console.log('üèÜ –≠—Ç–æ –Ω–æ–≤—ã–π ATH!');
    } else {
      console.log('üìä –¢–µ–∫—É—â–∏–π ATH –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º');
    }
    console.log();

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('üîç –¢–ï–°–¢ 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    console.log('='.repeat(30));
    
    const priceData = {
      price: currentPrice,
      priceRub: testPriceRub,
      change24h: -4.85,
      volume24h: 626954.63,
      ath: finalATH,
      source: 'coinmarketcap'
    };

    const changeEmoji = priceData.change24h >= 0 ? 'üî∫' : 'üîª';
    const changeSign = priceData.change24h >= 0 ? '+' : '';
    const isNewATH = priceData.price >= priceData.ath;
    const athDisplay = isNewATH ? `üèÜ $ ${priceData.ath.toFixed(2)}` : `$ ${priceData.ath.toFixed(2)}`;
    const sourceEmoji = priceData.source === 'database' ? 'üóÑÔ∏è' : 'üÑ≤üÑºüÑ≤';

    function formatNumber(num) {
      if (num >= 1e9) return (num / 1e9).toFixed(2) + 'B';
      if (num >= 1e6) return (num / 1e6).toFixed(2) + 'M';
      if (num >= 1e3) return (num / 1e3).toFixed(2) + 'K';
      return num.toFixed(2);
    }

    const message = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ CES: $ ${priceData.price.toFixed(2)}${priceData.priceRub > 0 ? ` | ‚ÇΩ ${priceData.priceRub.toFixed(2)}` : ' | ‚ÇΩ 0.00'} ${sourceEmoji}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${changeEmoji} ${changeSign}${priceData.change24h.toFixed(2)}% ‚Ä¢ üÖ• $ ${formatNumber(priceData.volume24h)} ‚Ä¢ üÖêüÖ£üÖó ${athDisplay}`;

    console.log('–ò–¢–û–ì–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï:');
    console.log(message);
    console.log();

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFixes().catch(console.error);